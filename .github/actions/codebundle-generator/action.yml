name: 'Codebundle Generator'
description: 'Generate codebundle from GitHub issue using AI and existing templates'
author: 'RunWhen'

inputs:
  issue-number:
    description: 'GitHub issue number'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  openai-api-key:
    description: 'OpenAI API key for AI generation (required for AI-powered generation)'
    required: false
    default: ''

outputs:
  codebundle-name:
    description: 'Generated codebundle directory name'
  generated-files:
    description: 'List of generated bash scripts'
  generated-tasks:
    description: 'List of generated Robot Framework tasks'
  success:
    description: 'Whether generation was successful'
  total-tokens:
    description: 'Total tokens used across all AI generation calls'
  prompt-tokens:
    description: 'Total prompt tokens used'
  completion-tokens:
    description: 'Total completion tokens used'
  api-calls:
    description: 'Number of OpenAI API calls made'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      shell: bash
      run: |
        pip install PyGithub pyyaml jinja2 openai
    
    - name: Debug action inputs
      shell: bash
      run: |
        cd ${{ github.action_path }}
        python test_inputs.py
      env:
        INPUT_ISSUE_NUMBER: ${{ inputs.issue-number }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        GITHUB_REPOSITORY: ${{ github.repository }}
    
    - name: Run codebundle generator
      id: generator
      shell: bash
      run: |
        cd ${{ github.action_path }}
        python main.py
        
        # Debug: Show what was written to GITHUB_OUTPUT
        echo "=== GITHUB_OUTPUT contents ==="
        if [ -f "$GITHUB_OUTPUT" ]; then
          cat "$GITHUB_OUTPUT"
        else
          echo "GITHUB_OUTPUT file not found: $GITHUB_OUTPUT"
        fi
        echo "=== End GITHUB_OUTPUT ==="
      env:
        INPUT_ISSUE_NUMBER: ${{ inputs.issue-number }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}

