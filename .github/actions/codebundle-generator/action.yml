name: 'Codebundle Generator'
description: 'Generate codebundle from GitHub issue using AI and existing templates'
author: 'RunWhen'

inputs:
  issue-number:
    description: 'GitHub issue number'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
  openai-api-key:
    description: 'OpenAI API key for AI generation (required for AI-powered generation)'
    required: false
    default: ''

outputs:
  codebundle-name:
    description: 'Generated codebundle directory name'
  generated-files:
    description: 'List of generated bash scripts'
  generated-tasks:
    description: 'List of generated Robot Framework tasks'
  success:
    description: 'Whether generation was successful'
  total-tokens:
    description: 'Total tokens used across all AI generation calls'
  prompt-tokens:
    description: 'Total prompt tokens used'
  completion-tokens:
    description: 'Total completion tokens used'
  api-calls:
    description: 'Number of OpenAI API calls made'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      shell: bash
      run: |
        pip install PyGithub pyyaml jinja2 openai
    
    - name: Debug action inputs
      shell: bash
      run: |
        cd ${{ github.action_path }}
        python test_inputs.py
      env:
        INPUT_ISSUE_NUMBER: ${{ inputs.issue-number }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        GITHUB_REPOSITORY: ${{ github.repository }}
    
    - name: Run codebundle generator
      id: generator
      shell: bash
      run: |
        cd ${{ github.action_path }}
        
        # Create a temporary output file
        OUTPUT_FILE=$(mktemp)
        export GITHUB_OUTPUT="$OUTPUT_FILE"
        
        echo "🔧 Running codebundle generator..."
        echo "📁 Working directory: $(pwd)"
        echo "📄 Output file: $OUTPUT_FILE"
        
        # Run the Python script
        python main.py
        PYTHON_EXIT_CODE=$?
        
        echo "🔍 Python script exit code: $PYTHON_EXIT_CODE"
        
        # Debug: Show what was written to output file
        echo "=== GENERATOR OUTPUT FILE CONTENTS ==="
        if [ -f "$OUTPUT_FILE" ]; then
          cat "$OUTPUT_FILE"
          echo ""
          echo "=== Setting composite action outputs ==="
          
          # Read each line and set as output
          while IFS='=' read -r key value || [ -n "$key" ]; do
            if [ -n "$key" ] && [ -n "$value" ]; then
              echo "$key=$value" >> "${{ env.GITHUB_OUTPUT }}"
              echo "Set output: $key=$value"
            fi
          done < "$OUTPUT_FILE"
        else
          echo "❌ Output file not found: $OUTPUT_FILE"
          # Set default failure outputs
          echo "success=false" >> "${{ env.GITHUB_OUTPUT }}"
          echo "codebundle-name=no-output-file" >> "${{ env.GITHUB_OUTPUT }}"
          echo "generated-files=none" >> "${{ env.GITHUB_OUTPUT }}"
          echo "generated-tasks=0" >> "${{ env.GITHUB_OUTPUT }}"
          echo "total-tokens=0" >> "${{ env.GITHUB_OUTPUT }}"
          echo "prompt-tokens=0" >> "${{ env.GITHUB_OUTPUT }}"
          echo "completion-tokens=0" >> "${{ env.GITHUB_OUTPUT }}"
          echo "api-calls=0" >> "${{ env.GITHUB_OUTPUT }}"
        fi
        echo "=== End output processing ==="
        
        # Clean up
        rm -f "$OUTPUT_FILE"
        
        # Exit with the same code as Python script
        exit $PYTHON_EXIT_CODE
      env:
        INPUT_ISSUE_NUMBER: ${{ inputs.issue-number }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        GITHUB_REPOSITORY: ${{ github.repository }}

