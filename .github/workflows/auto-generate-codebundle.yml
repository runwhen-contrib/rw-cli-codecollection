name: Auto-Generate Codebundle from Issue

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number
      use_ai:
        description: 'Use AI for generation (requires OpenAI API key in secrets)'
        required: false
        type: boolean
        default: true

jobs:
  generate-codebundle:
    # Run if manually triggered OR if issue has labels containing 'new' and 'auto-intake'
    if: |
      github.event_name == 'workflow_dispatch' || 
      (contains(join(github.event.issue.labels.*.name, ' '), 'new') && 
       contains(join(github.event.issue.labels.*.name, ' '), 'auto-intake'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0


      - name: Update labels - Start Processing
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ github.event.inputs.issue_number || github.event.issue.number }};
            
            // Add processing label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['codebundle-processing']
            });
            
            // Remove trigger labels (anything with 'new' or 'auto-intake')
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            for (const label of issue.labels) {
              const labelName = typeof label === 'string' ? label : label.name;
              if (labelName.includes('new') || labelName.includes('auto-intake')) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: labelName
                  });
                  console.log(`Removed trigger label: ${labelName}`);
                } catch (error) {
                  console.log(`Could not remove label ${labelName}: ${error.message}`);
                }
              }
            }

      - name: Generate Codebundle
        id: generate
        uses: ./.github/actions/codebundle-generator
        with:
          issue-number: ${{ github.event.inputs.issue_number || github.event.issue.number }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}

      - name: Debug Action Outputs
        continue-on-error: true
        run: |
          echo "=== ACTION OUTPUTS DEBUG ==="
          echo "codebundle-name: '${{ steps.generate.outputs.codebundle-name }}'"
          echo "generated-files: '${{ steps.generate.outputs.generated-files }}'"
          echo "generated-tasks: '${{ steps.generate.outputs.generated-tasks }}'"
          echo "success: '${{ steps.generate.outputs.success }}'"
          echo "total-tokens: '${{ steps.generate.outputs.total-tokens }}'"
          echo "prompt-tokens: '${{ steps.generate.outputs.prompt-tokens }}'"
          echo "completion-tokens: '${{ steps.generate.outputs.completion-tokens }}'"
          echo "api-calls: '${{ steps.generate.outputs.api-calls }}'"
          echo "=== END OUTPUTS DEBUG ==="

      - name: Check if codebundle was generated
        id: check-generation
        run: |
          # Check the success output from the generator
          if [ "${{ steps.generate.outputs.success }}" = "true" ]; then
            echo "generated=true" >> $GITHUB_OUTPUT
            echo "✅ Codebundle generation successful: ${{ steps.generate.outputs.codebundle-name }}"
          elif [ "${{ steps.generate.outputs.success }}" = "false" ]; then
            echo "generated=false" >> $GITHUB_OUTPUT
            echo "❌ Codebundle generation failed: ${{ steps.generate.outputs.codebundle-name }}"
          elif [ -n "${{ steps.generate.outputs.codebundle-name }}" ] && [ "${{ steps.generate.outputs.codebundle-name }}" != "unknown" ]; then
            echo "generated=true" >> $GITHUB_OUTPUT
            echo "✅ Codebundle generation detected via outputs: ${{ steps.generate.outputs.codebundle-name }}"
          elif find codebundles/ -maxdepth 1 -type d -newer codebundles/ 2>/dev/null | grep -q .; then
            echo "generated=true" >> $GITHUB_OUTPUT
            echo "✅ Codebundle generation detected via file system changes"
          else
            echo "generated=false" >> $GITHUB_OUTPUT
            echo "❌ No codebundle generation detected"
          fi

      - name: Create Pull Request
        if: steps.check-generation.outputs.generated == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: auto-generated codebundle from issue #${{ github.event.inputs.issue_number || github.event.issue.number }}"
          title: "✨ Auto-generated codebundle: ${{ steps.generate.outputs.codebundle-name || format('from issue #{0}', github.event.inputs.issue_number || github.event.issue.number) }}"
          body: |
            ## ✨ Auto-Generated Codebundle
            
            This codebundle was automatically generated using AI based on the requirements in issue #${{ github.event.inputs.issue_number || github.event.issue.number }}.
            
            ### 📦 Generated Components
            
            **Codebundle Location:** `codebundles/${{ steps.generate.outputs.codebundle-name || 'unknown' }}/`
            
            **Generated Files:**
            - **Bash Scripts:** ${{ steps.generate.outputs.generated-files || 'None listed' }}
            - **Robot Framework Tasks:** ${{ steps.generate.outputs.generated-tasks || 'Unknown count' }} tasks
            - **Documentation:** README.md with usage instructions
            - **Metadata:** meta.yaml with platform configuration
            - **Cursor Rules:** .cursorrules for development assistance
            - **RunWhen Templates:** .runwhen/ directory with SLI, Taskset, and Workflow templates
            - **Test Directory:** .test/ for validation scripts
            
            ### 🤖 AI Generation Details
            
            | Metric | Value |
            |--------|-------|
            | **Total Tokens Used** | ${{ steps.generate.outputs.total-tokens || 'Not available' }} |
            | **Prompt Tokens** | ${{ steps.generate.outputs.prompt-tokens || 'Not available' }} |
            | **Completion Tokens** | ${{ steps.generate.outputs.completion-tokens || 'Not available' }} |
            | **API Calls Made** | ${{ steps.generate.outputs.api-calls || 'Not available' }} |
            | **Model Used** | GPT-4 |
            | **Generation Method** | AI-powered with reference codebundle context |
            
            ### Review Checklist
            - [ ] Review generated bash scripts for correctness
            - [ ] Test Robot Framework tasks locally
            - [ ] Verify meta.yaml configuration
            - [ ] Check README documentation
            - [ ] Validate against existing patterns
            
            ### Next Steps
            1. Review the generated code
            2. Test locally using the provided instructions
            3. Make any necessary adjustments
            4. Merge when ready
            
            **Auto-closes**: #${{ github.event.inputs.issue_number || github.event.issue.number }}
          branch: auto-codebundle-${{ github.event.inputs.issue_number || github.event.issue.number }}
          delete-branch: true

      - name: Update issue labels on success
        if: steps.check-generation.outputs.generated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Remove processing label and add success label
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              name: 'codebundle-processing'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              labels: ['codebundle-generated', 'pr-created']
            });

            // Add comment with PR link
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              body: `✨ **Codebundle Generated Successfully!**
              
              I've created a pull request with your auto-generated codebundle: **${{ steps.generate.outputs.codebundle-name }}**
              
              The PR includes:
              - Complete codebundle structure
              - Generated bash scripts for your tasks
              - Robot Framework task definitions
              - Documentation and metadata
              
              📊 **AI Generation Stats:**
              - Total tokens used: ${{ steps.generate.outputs.total-tokens }}
              - API calls made: ${{ steps.generate.outputs.api-calls }}
              
              Please review the generated code and merge when ready!`
            });

      - name: Handle generation failure
        if: steps.check-generation.outputs.generated == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Remove processing label and add failure label
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              name: 'codebundle-processing'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              labels: ['codebundle-failed']
            });

            // Add detailed failure comment
            const failureReason = '${{ steps.generate.outputs.codebundle-name }}';
            let failureMessage = '';
            
            if (failureReason === 'generation-failed') {
              failureMessage = 'The AI generation process encountered an error. This could be due to:\n- OpenAI API issues or rate limits\n- Invalid or unclear requirements in the issue\n- Missing OpenAI API key in repository secrets';
            } else if (failureReason === 'fatal-error') {
              failureMessage = 'A fatal error occurred during initialization. This could be due to:\n- Missing required environment variables\n- GitHub API authentication issues\n- Invalid issue format or content';
            } else {
              failureMessage = 'The codebundle generation process completed but no output was produced.';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              body: `❌ **Codebundle Generation Failed**
              
              ${failureMessage}
              
              **Debug Information:**
              - Failure Type: \`${failureReason}\`
              - Workflow Run: [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              **Next Steps:**
              1. Check the workflow logs for detailed error messages
              2. Verify your issue follows the required format
              3. Ensure OpenAI API key is configured in repository secrets
              4. Try again or contact support if the issue persists`
            });

      - name: Update issue labels on workflow failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // Remove processing label and add failure label
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              name: 'codebundle-processing'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              labels: ['codebundle-failed']
            });

            // Add comment about failure
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number || github.event.issue.number }},
              body: `❌ **Codebundle Generation Failed**
              
              I encountered an error while trying to generate your codebundle. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
              
              Common issues:
              - Missing or unclear requirements in the issue description
              - Unsupported platform or service type
              - API rate limits
              
              Please update your issue with more details and I'll try again!`
            });

