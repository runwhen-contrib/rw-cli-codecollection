commands:
- command: bash 'app_gateway_resource_health.sh'
  doc_links: '

    - [Output directory in Bash](https://linuxize.com/post/bash-output-redirection/){:target="_blank"}

    - [Health status of Azure Application Gateway](https://docs.microsoft.com/en-us/azure/application-gateway/application-gateway-diagnostics/){:target="_blank"}

    - [Microsoft Resource Health Provider registration](https://docs.microsoft.com/en-us/rest/api/resourcehealth/registerproviders/2021-01-04){:target="_blank"}

    - [Setting environment variables in Bash](https://www.cyberciti.biz/faq/set-environment-variable-linux-bash-shell/){:target="_blank"}'
  explanation: This script sets up an output directory and retrieves the health status
    of an application gateway in Microsoft Azure. It also checks and registers the
    Microsoft.ResourceHealth provider if necessary, and requires certain environment
    variables to be set in order to run successfully.
  multi_line_details: "\n#!/bin/bash\n\n# Ensure output directory exists\nOUTPUT_DIR=${OUTPUT_DIR:-\"\
    ./output\"} # Set the default value for OUTPUT_DIR if not already set\nmkdir -p\
    \ \"$OUTPUT_DIR\" # Create the output directory if it doesn't exist\nHEALTH_OUTPUT=\"\
    ${OUTPUT_DIR}/app_gateway_health.json\" # Set the path for the health output file\n\
    echo \"[]\" > \"$HEALTH_OUTPUT\" # Initialize the health output file with an empty\
    \ JSON array\n\n# Get or set subscription ID\nif [ -z \"$AZURE_RESOURCE_SUBSCRIPTION_ID\"\
    \ ]; then # Check if AZURE_RESOURCE_SUBSCRIPTION_ID is not set\n    subscription=$(az\
    \ account show --query \"id\" -o tsv) # Get the current subscription ID using\
    \ the Azure CLI\n    echo \"AZURE_RESOURCE_SUBSCRIPTION_ID is not set. Using current\
    \ subscription ID: $subscription\" # Display the subscription ID being used\n\
    else\n    subscription=\"$AZURE_RESOURCE_SUBSCRIPTION_ID\" # Use the specified\
    \ subscription ID\n    echo \"Using specified subscription ID: $subscription\"\
    \ # Display the specified subscription ID\nfi\n\n# Set the subscription ID\necho\
    \ \"Switching to subscription ID: $subscription\" # Notify that the script is\
    \ switching to the specified subscription ID\naz account set --subscription \"\
    $subscription\" || { echo \"Failed to set subscription.\"; exit 1; } # Set the\
    \ subscription ID using the Azure CLI and handle failure\n\n# Check if Microsoft.ResourceHealth\
    \ provider is registered\necho \"Checking registration status of Microsoft.ResourceHealth\
    \ provider...\" # Notify that the script is checking the registration status of\
    \ the Microsoft.ResourceHealth provider\nregistrationState=$(az provider show\
    \ --namespace Microsoft.ResourceHealth --query \"registrationState\" -o tsv) #\
    \ Get the registration status of the Microsoft.ResourceHealth provider using the\
    \ Azure CLI\n\nif [[ \"$registrationState\" != \"Registered\" ]]; then # Check\
    \ if the registration state is not \"Registered\"\n    echo \"Registering Microsoft.ResourceHealth\
    \ provider...\" # Notify that the script is registering the Microsoft.ResourceHealth\
    \ provider\n    az provider register --namespace Microsoft.ResourceHealth # Register\
    \ the Microsoft.ResourceHealth provider using the Azure CLI\n\n    # Wait for\
    \ registration\n    echo \"Waiting for Microsoft.ResourceHealth provider to register...\"\
    \ # Notify that the script is waiting for the registration of the Microsoft.ResourceHealth\
    \ provider\n    for i in {1..10}; do # Start a loop to check the registration\
    \ state multiple times\n        registrationState=$(az provider show --namespace\
    \ Microsoft.ResourceHealth --query \"registrationState\" -o tsv) # Get the registration\
    \ state using the Azure CLI\n        if [[ \"$registrationState\" == \"Registered\"\
    \ ]]; then # Check if the registration state is \"Registered\"\n            echo\
    \ \"Microsoft.ResourceHealth provider registered successfully.\" # Notify that\
    \ the Microsoft.ResourceHealth provider has been registered successfully\n   \
    \         break # Exit the loop\n        else\n            echo \"Current registration\
    \ state: $registrationState. Retrying in 10 seconds...\" # Notify the current\
    \ registration state and the next retry\n            sleep 10 # Pause the script\
    \ execution for 10 seconds\n        fi\n    done\n\n    # Exit if registration\
    \ fails\n    if [[ \"$registrationState\" != \"Registered\" ]]; then # Check if\
    \ the registration state is still not \"Registered\" after the loop\n        echo\
    \ \"Error: Microsoft.ResourceHealth provider could not be registered.\" # Notify\
    \ that the registration has failed\n        exit 1 # Exit the script with an error\n\
    \    fi\nelse\n    echo \"Microsoft.ResourceHealth provider is already registered.\"\
    \ # Notify that the Microsoft.ResourceHealth provider is already registered\n\
    fi\n\n# Check required environment variables\nif [ -z \"$AZ_RESOURCE_GROUP\" ]\
    \ || [ -z \"$APP_GATEWAY_NAME\" ]; then # Check if AZ_RESOURCE_GROUP or APP_GATEWAY_NAME\
    \ environment variables are not set\n    echo \"Error: AZ_RESOURCE_GROUP and APP_GATEWAY_NAME\
    \ environment variables must be set.\" # Notify that the required environment\
    \ variables are not set\n    exit 1 # Exit the script with an error\nfi\n\n# Retrieve\
    \ health status for the Application Gateway\necho \"Retrieving health status for\
    \ Application Gateway: $APP_GATEWAY_NAME...\" # Notify that the script is retrieving\
    \ the health status for the specified Application Gateway\naz rest --method get\
    \ \\\n    --url \"https://management.azure.com/subscriptions/$subscription/resourceGroups/$AZ_RESOURCE_GROUP/providers/Microsoft.Network/applicationGateways/$APP_GATEWAY_NAME/providers/Microsoft.ResourceHealth/availabilityStatuses/current?api-version=2023-07-01-preview\"\
    \ \\\n    > \"$HEALTH_OUTPUT\" || { echo \"Failed to retrieve health status.\"\
    ; exit 1; } # Make a REST API call to retrieve the health status and handle failure\n\
    \n# Output results\necho \"Health status retrieved and saved to: $HEALTH_OUTPUT\"\
    \ # Notify that the health status has been retrieved and saved to the output file\n\
    cat \"$HEALTH_OUTPUT\" # Display the content of the health output file\n"
  name: check_for_resource_health_issues_affecting_application_gateway_app_gateway_name_in_resource_group_az_resource_group
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: DevOps
    or SREs may need to check the health status of application gateways in Microsoft
    Azure to see if any issues with the gateway are causing the CrashLoopBackoff events.


    2. Setting up a new deployment in Kubernetes: When deploying a new application
    or service in Kubernetes, DevOps or SREs may use this script to ensure that the
    output directory is properly set up and the necessary environment variables are
    configured.


    3. Monitoring and managing the health of multiple application gateways: DevOps
    or SREs may use this script to automate the process of checking and retrieving
    the health status of multiple application gateways in Microsoft Azure, making
    it easier to manage and monitor the overall health of the infrastructure.


    4. Proactive monitoring and alerting for potential issues with the application
    gateways: By regularly running this script, DevOps or SREs can proactively monitor
    the health status of the application gateways and set up alerts for any potential
    issues that may arise.


    5. Automating the registration of Microsoft.ResourceHealth provider: If the Microsoft.ResourceHealth
    provider needs to be registered or checked for proper configuration, this script
    can be used to automate the registration process and ensure that the necessary
    provider is set up correctly.'
