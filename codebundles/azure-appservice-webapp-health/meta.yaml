commands:
- command: bash 'appservice_resource_health.sh'
  doc_links: '

    - [Azure CLI command-line reference](https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest){:target="_blank"}

    - [Microsoft.ResourceHealth provider documentation](https://docs.microsoft.com/en-us/rest/api/resourcehealth/){:target="_blank"}

    - [Azure App Service health status API documentation](https://docs.microsoft.com/en-us/rest/api/appservice/){:target="_blank"}'
  explanation: This script is a bash script that uses the Azure command-line interface
    (CLI) to check and register the Microsoft.ResourceHealth provider if it's not
    already registered, and then makes a REST API call to retrieve the health status
    of an Azure App Service. The output is saved to a specified directory as a JSON
    file.
  multi_line_details: "\n#!/bin/bash\n\n# Set subscription ID and resource details\n\
    subscription=$(az account show --query \"id\" -o tsv)\n: \"${OUTPUT_DIR:?OUTPUT_DIR\
    \ variable is not set}\"\n\n# Check if Microsoft.ResourceHealth provider is already\
    \ registered\necho \"Checking registration status of Microsoft.ResourceHealth\
    \ provider...\"\nregistrationState=$(az provider show --namespace Microsoft.ResourceHealth\
    \ --query \"registrationState\" -o tsv)\n\nif [[ \"$registrationState\" != \"\
    Registered\" ]]; then\n    # If the provider is not registered, register it\n\
    \    echo \"Registering Microsoft.ResourceHealth provider...\"\n    az provider\
    \ register --namespace Microsoft.ResourceHealth\n\n    # Wait for the provider\
    \ to be registered\n    echo \"Waiting for Microsoft.ResourceHealth provider to\
    \ register...\"\n    for i in {1..10}; do\n        registrationState=$(az provider\
    \ show --namespace Microsoft.ResourceHealth --query \"registrationState\" -o tsv)\n\
    \        if [[ \"$registrationState\" == \"Registered\" ]]; then\n           \
    \ echo \"Microsoft.ResourceHealth provider registered successfully.\"\n      \
    \      break\n        else\n            echo \"Current registration state: $registrationState.\
    \ Retrying in 10 seconds...\"\n            sleep 10\n        fi\n    done\n\n\
    \    # Check if the provider is not registered after waiting\n    if [[ \"$registrationState\"\
    \ != \"Registered\" ]]; then\n        echo \"Error: Microsoft.ResourceHealth provider\
    \ could not be registered.\"\n        exit 1\n    fi\nelse\n    echo \"Microsoft.ResourceHealth\
    \ provider is already registered.\"\nfi\n\n# Perform the REST API call to get\
    \ the resource health status\necho \"Retrieving health status for Azure App Service...\"\
    \nhealthUrl=\"https://management.azure.com/subscriptions/$subscription/resourceGroups/$AZ_RESOURCE_GROUP/providers/Microsoft.Web/sites/$APP_SERVICE_NAME/providers/Microsoft.ResourceHealth/availabilityStatuses/current?api-version=2023-07-01-preview\"\
    \n\naz rest --method get --url \"$healthUrl\" > \"${OUTPUT_DIR}/app_service_health.json\"\
    \n\nif [[ $? -eq 0 ]]; then\n    echo \"Health status retrieved successfully.\
    \ Output saved to ${OUTPUT_DIR}/app_service_health.json\"\n    cat \"${OUTPUT_DIR}/app_service_health.json\"\
    \nelse\n    echo \"Error: Failed to retrieve health status for Azure App Service.\"\
    \n    exit 1\nfi\n\n\nIn this script:\n- The `$OUTPUT_DIR` environment variable\
    \ is expected to be set and is used to store the output.\n- It first checks if\
    \ the `Microsoft.ResourceHealth` provider is registered, and if not, registers\
    \ it and waits for it to be registered. \n- Once the provider is registered, it\
    \ retrieves the health status for an Azure App Service using a REST API call and\
    \ saves the output to a JSON file in the specified output directory."
  name: check_for_resource_health_issues_affecting_app_service_app_service_name_in_resource_group_az_resource_group
  when_is_it_useful: '1. Troubleshooting application health issues on an Azure App
    Service, where the script can be used to check the health status and provide insights
    for debugging and resolving the issue.


    2. Automating the registration of the Microsoft.ResourceHealth provider in an
    Azure environment as part of a CI/CD pipeline or infrastructure provisioning process.


    3. Monitoring the health status of multiple Azure App Services at scale, where
    the script can be incorporated into a monitoring and alerting system to proactively
    identify and address potential issues.


    4. Integrating health status checks into automated testing and validation processes,
    ensuring that deployments and updates to Azure App Services are successful and
    do not result in health issues.


    5. Providing visibility into the overall health and status of Azure App Services
    across different environments, enabling DevOps or Site Reliability Engineers to
    assess and manage the reliability and performance of their applications.'
