version: "3"

tasks:
  default:
    desc: "Run complete organization health test suite"
    cmds:
      - task: check-unpushed-commits
      - task: generate-rwl-config

  clean:
    desc: "Run cleanup tasks"
    cmds:
      - task: check-and-cleanup-terraform
      - task: delete-slxs
      - task: clean-rwl-discovery

  build-infra:
    desc: "Build test infrastructure with multiple organization scenarios"
    cmds:
      - task: build-terraform-infra

  test-all-scenarios:
    desc: "Run all organization health test scenarios"
    cmds:
      - task: test-agent-scenarios
      - task: test-license-scenarios
      - task: test-security-scenarios
      - task: test-service-scenarios
      - task: validate-results


  check-unpushed-commits:
    desc: Check if outstanding commits or file updates need to be pushed before testing.
    vars:
      BASE_DIR: "../"
    cmds:
      - |
        echo "Checking for uncommitted changes in $BASE_DIR and $BASE_DIR.runwhen, excluding '.test'..."
        UNCOMMITTED_FILES=$(git diff --name-only HEAD | grep -E "^${BASE_DIR}(\.runwhen|[^/]+)" | grep -v "/\.test/" || true)
        if [ -n "$UNCOMMITTED_FILES" ]; then
          echo "✗"
          echo "Uncommitted changes found:"
          echo "$UNCOMMITTED_FILES"
          echo "Remember to commit & push changes before executing tests."
          echo "------------"
          exit 1    
        else
          echo "√"
          echo "No uncommitted changes in specified directories."
          echo "------------"        
        fi
      - |
        echo "Checking for unpushed commits in $BASE_DIR and $BASE_DIR.runwhen, excluding '.test'..."
        git fetch origin
        UNPUSHED_FILES=$(git diff --name-only origin/$(git rev-parse --abbrev-ref HEAD) HEAD | grep -E "^${BASE_DIR}(\.runwhen|[^/]+)" | grep -v "/\.test/" || true)
        if [ -n "$UNPUSHED_FILES" ]; then
          echo "✗"
          echo "Unpushed commits found:"
          echo "$UNPUSHED_FILES"
          echo "Remember to push changes before executing tests."
          echo "------------"
          exit 1        
        else
          echo "√"
          echo "No unpushed commits in specified directories."
          echo "------------"        
        fi
    silent: true

  generate-rwl-config:
    desc: "Generate RunWhen Local configuration for organization health testing"
    env:
      ARM_SUBSCRIPTION_ID: "{{.ARM_SUBSCRIPTION_ID}}"
      AZURE_TENANT_ID: "{{.AZURE_TENANT_ID}}"
      AZURE_CLIENT_SECRET: "{{.AZURE_CLIENT_SECRET}}"
      AZURE_CLIENT_ID: "{{.AZURE_CLIENT_ID}}"
      RW_WORKSPACE: '{{.RW_WORKSPACE | default "org-health-test-workspace"}}'
    cmds:
      - |
        source terraform/tf.secret
        repo_url=$(git config --get remote.origin.url)
        branch_name=$(git rev-parse --abbrev-ref HEAD)
        codebundle=$(basename "$(dirname "$PWD")")
        
        # Check if terraform state exists
        if [ ! -f "terraform/terraform.tfstate" ]; then
          echo "❌ ERROR: Terraform state file not found."
          echo "Required infrastructure is missing. Please run 'task build-infra' first."
          exit 1
        fi
        
        # Extract resource values from terraform state
        pushd terraform > /dev/null
        
        resource_group=$(terraform show -json terraform.tfstate | jq -r '.values.root_module.resources[] | select(.type == "azurerm_resource_group") | .values.name')
        org_service_url=$(terraform show -json terraform.tfstate | jq -r '.values.outputs["org_url"].value')
        devops_org=$(echo "$org_service_url" | sed -n 's/.*dev\.azure\.com\/\([^\/]*\).*/\1/p')
        
        popd > /dev/null
        
        echo "Using the following values:"
        echo "Resource Group: $resource_group"
        echo "DevOps Organization: $devops_org"
        
        # Generate workspaceInfo.yaml for organization health testing
        cat <<EOF > workspaceInfo.yaml
        workspaceName: "$RW_WORKSPACE"
        workspaceOwnerEmail: authors@runwhen.com
        defaultLocation: location-01-us-west1
        defaultLOD: detailed
        cloudConfig:
          azure:
            subscriptionId: "$ARM_SUBSCRIPTION_ID"
            tenantId: "$AZURE_TENANT_ID"
            clientId: "$AZURE_CLIENT_ID"
            clientSecret: "$AZURE_CLIENT_SECRET"
            resourceGroupLevelOfDetails:
              $resource_group: detailed
            devops:
              organizationUrl: "https://dev.azure.com/$devops_org"
        codeCollections:
        - repoURL: "$repo_url"
          branch: "$branch_name"
          codeBundles: ["$codebundle"]
        custom:
          devops_org: $devops_org
          agent_utilization_threshold: 80
          license_utilization_threshold: 90
          test_scenarios:
            - overutilized_pools
            - offline_agents  
            - high_license_usage
            - inactive_users
            - weak_policies
            - connectivity_issues
        EOF
        
        echo "Generated workspaceInfo.yaml for organization health testing."
    silent: true

  run-rwl-discovery:
    desc: "Run RunWhen Local Discovery on test infrastructure"
    cmds:
      - |
        CONTAINER_NAME="RunWhenLocal"
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi

        echo "Cleaning up output directory..."
        sudo rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }

        echo "Starting new container $CONTAINER_NAME..."

        docker run --name $CONTAINER_NAME -p 8081:8081 -v "$(pwd)":/shared -d ghcr.io/runwhen-contrib/runwhen-local:latest || {
          echo "Failed to start container"; exit 1;
        }

        echo "Running workspace builder script in container..."
        docker exec -w /workspace-builder $CONTAINER_NAME ./run.sh $1 --verbose || {
          echo "Error executing script in container"; exit 1;
        }

        echo "Review generated config files under output/workspaces/"
    silent: true
 
  build-terraform-infra:
    desc: "Build test infrastructure using Terraform"
    cmds:
      - |
        echo "Building Azure DevOps organization health test infrastructure..."
        
        # Check if terraform directory exists
        if [ ! -d "terraform" ]; then
          echo "❌ ERROR: terraform directory not found"
          exit 1
        fi
        
        cd terraform
        
        # Check if tf.secret exists
        if [ ! -f "tf.secret" ]; then
          echo "❌ ERROR: tf.secret file not found"
          echo "Please create tf.secret with required environment variables"
          exit 1
        fi
        
        # Source the secrets
        source tf.secret
        
        # Initialize and apply terraform
        terraform init
        terraform plan
        terraform apply -auto-approve
        
        echo "✓ Infrastructure built successfully"
        echo "Organization health test environment is ready"

  check-and-cleanup-terraform:
    desc: "Check and cleanup Terraform resources"
    cmds:
      - |
        if [ -f "terraform/terraform.tfstate" ]; then
          echo "Terraform state found, cleaning up resources..."
          cd terraform
          source tf.secret
          terraform destroy -auto-approve
          echo "✓ Resources cleaned up"
        else
          echo "No Terraform state found, nothing to cleanup"
        fi

  check-rwp-config:
    desc: Check if env vars are set for RunWhen Platform
    cmds:
      - |
        source terraform/tf.secret
        missing_vars=()

        if [ -z "$RW_WORKSPACE" ]; then
          missing_vars+=("RW_WORKSPACE")
        fi

        if [ -z "$RW_API_URL" ]; then
          missing_vars+=("RW_API_URL")
        fi

        if [ -z "$RW_PAT" ]; then
          missing_vars+=("RW_PAT")
        fi

        if [ ${#missing_vars[@]} -ne 0 ]; then
          echo "The following required environment variables are missing: ${missing_vars[*]}"
          exit 1
        fi
    silent: true

  upload-slxs:
    desc: "Upload SLX files to the appropriate URL"
    env:
      RW_WORKSPACE: "{{.RW_WORKSPACE}}"
      RW_API_URL: "{{.RW_API}}"
      RW_PAT: "{{.RW_PAT}}"
    cmds:
      - task: check-rwp-config
      - |
        BASE_DIR="output/workspaces/${RW_WORKSPACE}/slxs"
        if [ ! -d "$BASE_DIR" ]; then
          echo "Directory $BASE_DIR does not exist. Upload aborted."
          exit 1
        fi

        for dir in "$BASE_DIR"/*; do
          if [ -d "$dir" ]; then
            SLX_NAME=$(basename "$dir")
            PAYLOAD=$(jq -n --arg commitMsg "Creating new SLX $SLX_NAME" '{ commitMsg: $commitMsg, files: {} }')
            for file in slx.yaml runbook.yaml sli.yaml; do
              if [ -f "$dir/$file" ]; then
                CONTENT=$(cat "$dir/$file")
                PAYLOAD=$(echo "$PAYLOAD" | jq --arg fileContent "$CONTENT" --arg fileName "$file" '.files[$fileName] = $fileContent')
              fi
            done

            URL="https://${RW_API_URL}/api/v3/workspaces/${RW_WORKSPACE}/branches/main/slxs/${SLX_NAME}"
            echo "Uploading SLX: $SLX_NAME to $URL"
            response=$(curl -v -X POST "$URL" \
              -H "Authorization: Bearer $RW_PAT" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" -w "%{http_code}" -o /dev/null -s 2>&1)
            
            if [[ "$response" =~ 200|201 ]]; then
              echo "Successfully uploaded SLX: $SLX_NAME to $URL"
            else
              echo "Failed to upload SLX: $SLX_NAME to $URL. Response:"
              echo "$response"
            fi
          fi
        done
    silent: true
  delete-slxs:
    desc: "Delete generated SLX resources"
    cmds:
      - |
        echo "Cleaning up generated SLX resources..."
        if [ -f "workspaceInfo.yaml" ]; then
          rm workspaceInfo.yaml
          echo "✓ workspaceInfo.yaml removed"
        fi
        if [ -d ".test/output" ]; then
          rm -rf .test/output
          echo "✓ Test output directory removed"
        fi

  clean-rwl-discovery:
    desc: "Clean RunWhen Local discovery files"
    cmds:
      - |
        echo "Cleaning RunWhen Local discovery files..."
        rm -f *.discovery.yaml
        rm -f *.slx.yaml
        rm -f *.sli.yaml
        rm -f *.taskset.yaml
        echo "✓ Discovery files cleaned" 