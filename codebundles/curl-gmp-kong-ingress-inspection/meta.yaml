commands:
- command: 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && response=$(curl -s -d "query=rate(kong_http_requests_total{service=''${INGRESS_SERVICE}'',code=~''${HTTP_ERROR_CODES}''}[${TIME_SLICE}])
    > ${HTTP_ERROR_RATE_THRESHOLD}" -H "Authorization: Bearer $(gcloud auth print-access-token)"
    ''https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query'')
    && echo "$response" | jq -e ''.data.result | length > 0'' && echo "$response"
    | jq -r ''.data.result[] | "Route:" + .metric.route + " Service:" + .metric.service
    + " Kong Instance:" + .metric.instance + " HTTP Error Count:" + .value[1]'' ||
    echo "No HTTP Error threshold violations found for ${INGRESS_SERVICE}."'
  doc_links: '

    '
  explanation: This command activates a service account for Google Cloud, then runs
    a query to check if the error rate of HTTP requests on a specific service exceeds
    a certain threshold using Prometheus and outputs the results in a specific format.
    If there are no threshold violations found, it will display a message indicating
    so.
  multi_line_details: "# Authenticate the gcloud service\n\ngcloud auth activate-service-account\
    \ --key-file=$GOOGLE_APPLICATION_CREDENTIALS && \n\n# Make a POST request to Prometheus\
    \ API with specific query parameters and authorization header\nresponse=$(curl\
    \ -s -d \"query=rate(kong_http_requests_total{service='${INGRESS_SERVICE}',code=~'${HTTP_ERROR_CODES}'}[${TIME_SLICE}])\
    \ > ${HTTP_ERROR_RATE_THRESHOLD}\" -H \"Authorization: Bearer $(gcloud auth print-access-token)\"\
    \ 'https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query')\
    \ && \n\n# Use jq to check if there is data in the response object\necho \"$response\"\
    \ | jq -e '.data.result | length > 0' && \n\n# If there are results, loop through\
    \ them and echo the route, service, instance, and HTTP error count.\necho \"$response\"\
    \ | jq -r '.data.result[] | \"Route:\" + .metric.route + \" Service:\" + .metric.service\
    \ + \" Kong Instance:\" + .metric.instance + \" HTTP Error Count:\" + .value[1]'\
    \ || \n\n# If there are no results, echo a message indicating no HTTP error threshold\
    \ violations.\necho \"No HTTP Error threshold violations found for ${INGRESS_SERVICE}.\""
  name: check_if_kong_ingress_http_error_rate_violates_http_error_threshold
- command: 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && response=$(curl -s -d "query=histogram_quantile(0.99, sum(rate(kong_request_latency_ms_bucket{service=''${INGRESS_SERVICE}''}[${TIME_SLICE}]))
    by (le)) > ${REQUEST_LATENCY_THRESHOLD}" -H "Authorization: Bearer $(gcloud auth
    print-access-token)" ''https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query'')
    && echo "$response" | jq -e ''.data.result | length > 0'' && echo "$response"
    | jq -r ''.data.result[] | "Service: ${INGRESS_SERVICE}" + " HTTP Request Latency(ms):"
    + .value[1]'' || echo "No HTTP request latency threshold violations found for
    ${INGRESS_SERVICE}."'
  doc_links: '

    '
  explanation: This command activates the service account using the Google Cloud SDK
    and then uses a curl command to send a query to a Prometheus monitoring system,
    checking if the request latency of a specific service exceeds a certain threshold,
    and then outputs the results.
  multi_line_details: "# Activate the service account and get response from the API\n\
    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS\
    \ \\\n  && response=$(curl -s -d \"query=histogram_quantile(0.99, sum(rate(kong_request_latency_ms_bucket{service='${INGRESS_SERVICE}'}[${TIME_SLICE}]))\
    \ by (le)) > ${REQUEST_LATENCY_THRESHOLD}\" \\\n  -H \"Authorization: Bearer $(gcloud\
    \ auth print-access-token)\" \\\n  'https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query')\
    \ \\\n\n# Check if there are any results returned and print the results\n&& echo\
    \ \"$response\" | jq -e '.data.result | length > 0' \\\n  && echo \"$response\"\
    \ | jq -r '.data.result[] | \"Service: ${INGRESS_SERVICE}\" + \" HTTP Request\
    \ Latency(ms):\" + .value[1]' \\\n# If no results, print message\n  || echo \"\
    No HTTP request latency threshold violations found for ${INGRESS_SERVICE}.\"\n"
  name: check_if_kong_ingress_http_request_latency_violates_threshold
- command: 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && response=$(curl -s -d "query=kong_upstream_target_health{upstream=''${INGRESS_UPSTREAM}'',state=''healthchecks_off''}
    > 0" -H "Authorization: Bearer $(gcloud auth print-access-token)" ''https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query'')
    && echo "$response" | jq -e ''.data.result | length > 0'' && echo "$response"
    | jq -r ''.data.result[] | "Service: ${INGRESS_UPSTREAM}" + " Healthchecks Disabled!''
    || echo "${INGRESS_UPSTREAM} has healthchecks enabled."'
  doc_links: '

    - [Google Cloud Service Account Authentication](https://cloud.google.com/iam/docs/service-accounts){:target="_blank"}

    - [Google Cloud Monitoring API Overview](https://cloud.google.com/monitoring/api/v3){:target="_blank"}

    - [Google Cloud Monitoring API Reference: Uptime Checks](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.uptimeCheckConfigs){:target="_blank"}

    - [Google Cloud Health Checks Configuration](https://cloud.google.com/load-balancing/docs/health-check-concepts){:target="_blank"}'
  explanation: This command activates a service account authentication and then uses
    it to make a query to the Google Cloud Monitoring API to check if a particular
    upstream target has health checks enabled or disabled, and then provides a response
    based on the result.
  multi_line_details: "#!/bin/bash\n# Activates service account and makes a curl request\
    \ to monitoring API to check upstream target health\n\n# Activate the service\
    \ account\ngcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS\
    \ && \n\n# Make a POST request to the monitoring API\nresponse=$(curl -s -d \"\
    query=kong_upstream_target_health{upstream='${INGRESS_UPSTREAM}',state='healthchecks_off'}\
    \ > 0\" -H \"Authorization: Bearer $(gcloud auth print-access-token)\" 'https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query')\
    \ && \n\n# Check if there are any results for the query\necho \"$response\" |\
    \ jq -e '.data.result | length > 0' && \n\n# Print the results from the query\n\
    echo \"$response\" | jq -r '.data.result[] | \"Service: ${INGRESS_UPSTREAM}\"\
    \ + \" Healthchecks Disabled!' || echo \"${INGRESS_UPSTREAM} has healthchecks\
    \ enabled.\""
  name: check_if_kong_ingress_controller_reports_upstream_errors
- command: 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && response=$(curl -s -d "query=kong_upstream_target_health{upstream=''${INGRESS_UPSTREAM}'',state=~''dns_error|unhealthy''}
    > 0" -H "Authorization: Bearer $(gcloud auth print-access-token)" ''https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query'')
    && echo "$response" | jq -e ''.data.result | length > 0'' && echo "$response"
    | jq -r ''.data.result[] | "Issue detected with Service: ${INGRESS_UPSTREAM}"
    + " Healthcheck subsystem-state: " + .metric.subsystem + "-" + .metric.state +
    " Target: " + .metric.target'' || echo "${INGRESS_UPSTREAM} is reported as healthy
    from the Kong ingress controller."'
  doc_links: '

    - [Google Cloud SDK](https://cloud.google.com/sdk){:target="_blank"}

    - [Service account authentication with Google Cloud SDK](https://cloud.google.com/sdk/gcloud/reference/auth/activate-service-account){:target="_blank"}

    - [Google Cloud Monitoring API](https://cloud.google.com/monitoring/api/v3){:target="_blank"}'
  explanation: This command uses the Google Cloud SDK to authenticate a service account
    and then sends a query to the Google Cloud Monitoring API to check the health
    of a specific upstream target in an application. If any issues are found, it will
    display information about the issue, otherwise it will report that the upstream
    is healthy.
  multi_line_details: '# Activate service account

    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    \


    # Get response from Prometheus for unhealthy targets

    && response=$(curl -s -d "query=kong_upstream_target_health{upstream=''${INGRESS_UPSTREAM}'',state=~''dns_error|unhealthy''}
    > 0" -H "Authorization: Bearer $(gcloud auth print-access-token)" ''https://monitoring.googleapis.com/v1/projects/runwhen-nonprod-sandbox/location/global/prometheus/api/v1/query'')
    \


    # Check if the response contains any results

    && echo "$response" | jq -e ''.data.result | length > 0'' \


    # If there are results, print issue detected with service and target

    && echo "$response" | jq -r ''.data.result[] | "Issue detected with Service: ${INGRESS_UPSTREAM}"
    + " Healthcheck subsystem-state: " + .metric.subsystem + "-" + .metric.state +
    " Target: " + .metric.target'' \


    # If there are no results, print that the upstream is healthy

    || echo "${INGRESS_UPSTREAM} is reported as healthy from the Kong ingress controller."'
  name: check_if_kong_ingress_controller_reports_upstream_errors
