commands:
- command: 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && curl -d "query=rate(nginx_ingress_controller_requests{host=''${INGRESS_HOST}'',
    service=''${INGRESS_SERVICE}'', status=~''${ERROR_CODES}''}[${TIME_SLICE}]) >
    0" -H "Authorization: Bearer $(gcloud auth print-access-token)" ''https://monitoring.googleapis.com/v1/projects/${GCP_PROJECT_ID}/location/global/prometheus/api/v1/query''
    | jq -r ''if .data.result[0] then "Host:" + .data.result[0].metric.host + " Ingress:"
    + .data.result[0].metric.ingress + " Namespace:" + .data.result[0].metric.exported_namespace
    + " Service:" + .data.result[0].metric.service else "" end'''
  doc_links: '

    - [Activating a service account](https://cloud.google.com/iam/docs/creating-managing-service-account-keys){:target="_blank"}

    - [cURL command usage](https://linux.die.net/man/1/curl){:target="_blank"}

    - [Querying with cURL in Google Cloud Platform](https://cloud.google.com/apis/design/custom_methods){:target="_blank"}

    - [Using jq to format JSON output](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command activates a service account and then uses cURL to make
    a query to Google Cloud Monitoring's Prometheus API, checking for errors in the
    nginx ingress controller within a specific time frame. It then uses jq to format
    the output showing the host, ingress, namespace, and service if any errors are
    found.
  multi_line_details: '# Activate service account using its key file

    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && \


    # Use curl to send a query to Google Cloud Monitoring API

    curl -d "query=rate(nginx_ingress_controller_requests{host=''${INGRESS_HOST}'',
    service=''${INGRESS_SERVICE}'', status=~''${ERROR_CODES}''}[${TIME_SLICE}]) >
    0" \

    -H "Authorization: Bearer $(gcloud auth print-access-token)" ''https://monitoring.googleapis.com/v1/projects/${GCP_PROJECT_ID}/location/global/prometheus/api/v1/query''
    | \


    # Parse the response with jq to extract relevant information

    jq -r ''if .data.result[0] then "Host:" + .data.result[0].metric.host + " Ingress:"
    + .data.result[0].metric.ingress + " Namespace:" + .data.result[0].metric.exported_namespace
    + " Service:" + .data.result[0].metric.service else "" end'''
  name: fetch_nginx_http_errors_from_gmp_for_ingress_ingress_object_name
- command: 'namespace="${NAMESPACE}"; context="${CONTEXT}"; ingress="${INGRESS_OBJECT_NAME}";
    echo "Ingress: $ingress"; health_status="NA"; services=(); backend_services=$(kubectl
    get ingress "$ingress" -n "$namespace" --context "$context" -ojsonpath=''{range
    .spec.rules[*].http.paths[*]}{.backend.service.name}{" "}{.backend.service.port.number}{"\n"}{end}'');
    IFS=$''\n''; for line in $backend_services; do service=$(echo "$line" | cut -d
    " " -f 1); port=$(echo "$line" | cut -d " " -f 2); if [ -n "$service" ] && [ -n
    "$port" ]; then echo "Backend Service: $service, Port: $port"; service_exists=$(kubectl
    get service "$service" -n "$namespace" --context "$context" -ojsonpath=''{.metadata.name}'');
    if [ -z "$service_exists" ]; then health_status="Unhealthy"; echo "Validation:
    Service $service does not exist"; else endpoint_pods=$(kubectl get endpoints "$service"
    -n "$namespace" --context "$context" -ojsonpath=''{range .subsets[*].addresses[*]}-
    Pod Name: {.targetRef.name}, Pod IP: {.ip}\n{end}''); if [ -z "$endpoint_pods"
    ]; then health_status="Unhealthy"; echo "Validation: Endpoint for service $service
    does not have any pods"; else echo "Endpoint Pod:"; echo -e "$endpoint_pods";
    for pod in $endpoint_pods; do if [[ $pod == *"- Pod Name: "* ]]; then pod_name="\${pod#*-
    Pod Name: }"; pod_name="\${pod_name%%,*}"; if [ -n "$pod_name" ]; then owner_kind=$(kubectl
    get pod "$pod_name" -n "$namespace" --context "$context" -o=jsonpath=''{.metadata.ownerReferences[0].kind}'');
    if [ -n "$owner_kind" ]; then if [ "$owner_kind" = "StatefulSet" ] || [ "$owner_kind"
    = "DaemonSet" ]; then owner_info="$(kubectl get pod "$pod_name" -n "$namespace"
    --context "$context" -o=jsonpath=''{.metadata.ownerReferences[0].name}'') $owner_kind";
    else replicaset=$(kubectl get pod "$pod_name" -n "$namespace" --context "$context"
    -o=jsonpath=''{.metadata.ownerReferences[0].name}''); if [ -n "$replicaset" ];
    then owner_kind=$(kubectl get replicaset "$replicaset" -n "$namespace" --context
    "$context" -o=jsonpath=''{.metadata.ownerReferences[0].kind}''); owner_name=$(kubectl
    get replicaset "$replicaset" -n "$namespace" --context "$context" -o=jsonpath=''{.metadata.ownerReferences[0].name}'');
    owner_info="$owner_name $owner_kind"; fi; fi; fi; if [ -n "$owner_info" ]; then
    echo "Owner: $owner_info"; fi; fi; fi; done; health_status="Healthy"; fi; fi;
    services+=("$service"); fi; done; for service in "\${services[@]}"; do service_exists=$(kubectl
    get service "$service" -n "$namespace" --context "$context" -ojsonpath=''{.metadata.name}'');
    if [ -z "$service_exists" ]; then health_status="Unhealthy"; echo "Validation:
    Service $service does not exist"; else endpoint_exists=$(kubectl get endpoints
    "$service" -n "$namespace" --context "$context" -ojsonpath=''{.metadata.name}'');
    if [ -z "$endpoint_exists" ]; then health_status="Unhealthy"; echo "Validation:
    Endpoint for service $service does not exist"; fi; fi; done; if [ "$health_status"
    = "Unhealthy" ]; then echo "Health Status: $health_status"; echo "=====================";
    elif [ "$health_status" = "Healthy" ]; then echo "Health Status: $health_status";
    fi; echo "------------"'
  doc_links: '

    - [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/){:target="_blank"}

    - [Kubernetes backend services](https://kubernetes.io/docs/concepts/services-networking/service/){:target="_blank"}

    - [Owner references in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/){:target="_blank"}'
  explanation: This command is a script that checks the health status of a specified
    Ingress object in Kubernetes, including validating the existence and connectivity
    of backend services and their pods, as well as checking if they are healthy or
    unhealthy. It also provides detailed information about the owner of each pod.
  multi_line_details: "namespace=\"${NAMESPACE}\" # Set namespace variable\ncontext=\"\
    ${CONTEXT}\" # Set context variable\ningress=\"${INGRESS_OBJECT_NAME}\"  # Set\
    \ ingress variable\necho \"Ingress: $ingress\"  # Print Ingress name\n\nhealth_status=\"\
    NA\"  # Initialize health status variable\nservices=()  # Initialize services\
    \ array\n\n# Get backend services from the specified ingress object\nbackend_services=$(kubectl\
    \ get ingress \"$ingress\" -n \"$namespace\" --context \"$context\" -ojsonpath='{range\
    \ .spec.rules[*].http.paths[*]}{.backend.service.name}{\" \"}{.backend.service.port.number}{\"\
    \\n\"}{end}')\n\nIFS=$'\\n'  # Set internal field separator to newline to iterate\
    \ over each backend service\n\nfor line in $backend_services; do\n    service=$(echo\
    \ \"$line\" | cut -d \" \" -f 1)  # Extract service name\n    port=$(echo \"$line\"\
    \ | cut -d \" \" -f 2)  # Extract port number\n\n    if [ -n \"$service\" ] &&\
    \ [ -n \"$port\" ]; then\n        echo \"Backend Service: $service, Port: $port\"\
    \  # Print backend service and port\n\n        service_exists=$(kubectl get service\
    \ \"$service\" -n \"$namespace\" --context \"$context\" -ojsonpath='{.metadata.name}')\
    \  # Check if service exists\n\n        if [ -z \"$service_exists\" ]; then\n\
    \            health_status=\"Unhealthy\"  # Update health status to Unhealthy\n\
    \            echo \"Validation: Service $service does not exist\"\n        else\n\
    \            endpoint_pods=$(kubectl get endpoints \"$service\" -n \"$namespace\"\
    \ --context \"$context\" -ojsonpath='{range .subsets[*].addresses[*]}- Pod Name:\
    \ {.targetRef.name}, Pod IP: {.ip}\\n{end}')  # Get endpoint pods for the service\n\
    \n            if [ -z \"$endpoint_pods\" ]; then\n                health_status=\"\
    Unhealthy\"  # Update health status to Unhealthy\n                echo \"Validation:\
    \ Endpoint for service $service does not have any pods\"\n            else\n \
    \               echo \"Endpoint Pod:\"\n                echo -e \"$endpoint_pods\"\
    \  # Print endpoint pods\n\n                for pod in $endpoint_pods; do\n  \
    \                  if [[ $pod == *\"- Pod Name: \"* ]]; then\n               \
    \         pod_name=\"${pod#*- Pod Name: }\"\n                        pod_name=\"\
    ${pod_name%%,*}\"\n\n                        if [ -n \"$pod_name\" ]; then\n \
    \                           owner_kind=$(kubectl get pod \"$pod_name\" -n \"$namespace\"\
    \ --context \"$context\" -o=jsonpath='{.metadata.ownerReferences[0].kind}')  #\
    \ Get owner kind of the pod\n\n                            if [ -n \"$owner_kind\"\
    \ ]; then\n                                # Check the type of owner and get additional\
    \ info if necessary\n                                if [ \"$owner_kind\" = \"\
    StatefulSet\" ] || [ \"$owner_kind\" = \"DaemonSet\" ]; then\n               \
    \                     owner_info=\"$(kubectl get pod \"$pod_name\" -n \"$namespace\"\
    \ --context \"$context\" -o=jsonpath='{.metadata.ownerReferences[0].name}') $owner_kind\"\
    \n                                else\n                                    replicaset=$(kubectl\
    \ get pod \"$pod_name\" -n \"$namespace\" --context \"$context\" -o=jsonpath='{.metadata.ownerReferences[0].name}')\n\
    \                                    if [ -n \"$replicaset\" ]; then\n       \
    \                                 owner_kind=$(kubectl get replicaset \"$replicaset\"\
    \ -n \"$namespace\" --context \"$context\" -o=jsonpath='{.metadata.ownerReferences[0].kind}')\n\
    \                                        owner_name=$(kubectl get replicaset \"\
    $replicaset\" -n \"$namespace\" --context \"$context\" -o=jsonpath='{.metadata.ownerReferences[0].name}')\n\
    \                                        owner_info=\"$owner_name $owner_kind\"\
    \n                                    fi\n                                fi\n\
    \                            fi\n\n                            if [ -n \"$owner_info\"\
    \ ]; then\n                                echo \"Owner: $owner_info\"  # Print\
    \ owner information\n                            fi\n                        fi\n\
    \                    fi\n                done\n\n                health_status=\"\
    Healthy\"  # Update health status to Healthy\n            fi\n        fi\n\n \
    \       services+=(\"$service\")  # Add service to the services array\n    fi\n\
    done\n\n# Validate the existence of each service and its endpoints\nfor service\
    \ in \"${services[@]}\"; do\n    service_exists=$(kubectl get service \"$service\"\
    \ -n \"$namespace\" --context \"$context\" -ojsonpath='{.metadata.name}')\n  \
    \  if [ -z \"$service_exists\" ]; then\n        health_status=\"Unhealthy\"  #\
    \ Update health status to Unhealthy\n        echo \"Validation: Service $service\
    \ does not exist\"\n    else\n        endpoint_exists=$(kubectl get endpoints\
    \ \"$service\" -n \"$namespace\" --context \"$context\" -ojsonpath='{.metadata.name}')\n\
    \        if [ -z \"$endpoint_exists\" ]; then\n            health_status=\"Unhealthy\"\
    \  # Update health status to Unhealthy\n            echo \"Validation: Endpoint\
    \ for service $service does not exist\"\n        fi\n    fi\ndone\n\n# Print the\
    \ final health status\nif [ \"$health_status\" = \"Unhealthy\" ]; then\n    echo\
    \ \"Health Status: $health_status\"\n    echo \"=====================\"\nelif\
    \ [ \"$health_status\" = \"Healthy\" ]; then\n    echo \"Health Status: $health_status\"\
    \nfi\n\necho \"------------\"  # Print separator at the end for better readability"
  name: find_owner_and_service_health_for_ingress_ingress_object_name
