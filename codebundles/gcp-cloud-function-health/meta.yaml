commands:
- command: gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && gcloud functions list --filter="state!=ACTIVE OR status!=ACTIVE" --format="table[box](name,
    state, status, stateMessages.severity, stateMessages.type, stateMessages.message:wrap=30)"
    --project=${GCP_PROJECT_ID} && echo "Run 'gcloud functions describe [name]' for
    full details."
  doc_links: '

    - [Activating a service account for authentication](https://cloud.google.com/iam/docs/creating-managing-service-accounts){:target="_blank"}

    - [Listing Google Cloud functions](https://cloud.google.com/functions/docs/quickstart){:target="_blank"}

    - [Formatted table of function names, states, statuses, and error messages](https://cloud.google.com/sdk/gcloud/reference/functions/list){:target="_blank"}'
  explanation: This command activates a service account for authentication, then lists
    any Google Cloud functions that are not currently active or in an error state,
    and provides a formatted table of their names, states, statuses, and error messages.
    It also reminds the user to use another command to get more detailed information
    about a specific function.
  multi_line_details: '# First, activate the service account using the key file specified
    in the environment variable GOOGLE_APPLICATION_CREDENTIALS

    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS


    # Next, list all Cloud Functions that are not in the ACTIVE state or have a status
    other than ACTIVE

    # Format the output into a table for easier readability and include additional
    details about the state messages

    # Specify the project using the GCP_PROJECT_ID environment variable

    gcloud functions list --filter="state!=ACTIVE OR status!=ACTIVE" --format="table[box](name,
    state, status, stateMessages.severity, stateMessages.type, stateMessages.message:wrap=30)"
    --project=${GCP_PROJECT_ID}


    # Lastly, provide a helpful message to remind the user how to obtain full details
    for a specific function

    echo "Run ''gcloud functions describe [name]'' for full details."'
  name: list_unhealhy_cloud_functions_in_gcp_project_gcp_project_id
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events to identify
    and resolve issues with the containerized applications running on the cluster.


    2. Monitoring and managing Google Cloud functions to ensure they are running properly
    and addressing any errors or inactive states.


    3. Automating the activation of service accounts for authentication in a continuous
    integration/continuous deployment (CI/CD) pipeline.


    4. Creating automated alerts or notifications for when Google Cloud functions
    encounter errors or become inactive.


    5. Developing scripts or programs to provide detailed information about specific
    Google Cloud functions for debugging and troubleshooting purposes.'
- command: gcloud functions list --filter="state!=ACTIVE OR status!=ACTIVE" --format="value(name)"
    --project=${GCP_PROJECT_ID} | xargs -I {} gcloud logging read "severity=ERROR
    AND resource.type=cloud_function AND resource.labels.function_name={}" --limit
    50 --freshness=14d
  doc_links: '

    - [gcloud command-line tool overview](https://cloud.google.com/sdk/gcloud){:target="_blank"}

    - [Google Cloud Functions documentation](https://cloud.google.com/functions/docs){:target="_blank"}'
  explanation: This command uses the gcloud tool to list all Google Cloud Functions
    that are not in an active state, and then searches the logs for those functions
    to find any error messages that have occurred in the last 14 days.
  multi_line_details: "\n# List all cloud functions that are not in the ACTIVE state\n\
    # and that do not have an ACTIVE status\ngcloud functions list --filter=\"state!=ACTIVE\
    \ OR status!=ACTIVE\" \\\n    --format=\"value(name)\" --project=${GCP_PROJECT_ID}\
    \ \\\n    | xargs -I {} \\\n    # For each cloud function found, read the error\
    \ logs associated with it\n    gcloud logging read \"severity=ERROR AND resource.type=cloud_function\
    \ AND resource.labels.function_name={}\" \\\n    --limit 50 --freshness=14d\n"
  name: get_error_logs_for_unhealthy_cloud_functions_in_gcp_project_gcp_project_id
  when_is_it_useful: '1. Identifying and troubleshooting issues with a Google Cloud
    Function that is not in an active state, such as identifying error messages or
    potential underlying causes for the function not being active.


    2. Monitoring and maintaining the health of Google Cloud Functions, proactively
    searching for any potential issues or errors in the logs to address them before
    they escalate.


    3. Investigating and resolving Kubernetes CrashLoopBackoff events by analyzing
    logs and identifying any errors that may have occurred.


    4. Troubleshooting issues with Google Cloud Functions that are experiencing performance
    issues or errors, using the gcloud tool to search for relevant logs and error
    messages.


    5. Performing routine maintenance and monitoring of Google Cloud Functions to
    ensure their proper functioning and availability, using the gcloud tool to search
    for any potential issues in the logs.'
