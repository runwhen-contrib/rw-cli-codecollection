commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs -l ${LABELS} --tail=${MAX_LOG_LINES}
    --limit-bytes=256000 --since=${LOGS_SINCE} --container=${CONTAINER_NAME}
  doc_links: '

    - [kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [kubectl logs Command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Using Labels in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: 'This command is used to retrieve the logs of a specific container
    in a Kubernetes pod. Let''s break it down:


    - kubectl: This is the command-line tool for running commands against Kubernetes
    clusters.


    - --context=${CONTEXT}: This option allows you to specify which Kubernetes cluster
    and user context to use. A context is a group of access parameters that define
    a Kubernetes environment.


    - -n ${NAMESPACE}: This option specifies the namespace in which the pod is running.
    Namespaces are used to divide cluster resources between multiple users or teams.


    - logs: This is the subcommand that specifies that we want to retrieve logs.


    - -l ${LABELS}: This option allows you to filter the pods by their labels. It
    only retrieves logs from pods with the specified labels.


    - --tail=${MAX_LOG_LINES}: This option specifies how many lines of logs to show
    from the end of the log stream. It''s useful for seeing the most recent log messages.


    - --limit-bytes=256000: This option limits the number of bytes returned by the
    logs. This can be helpful to avoid overwhelming the terminal with too much log
    data.


    - --since=${LOGS_SINCE}: This option allows you to specify a timeframe for retrieving
    logs. It will only show logs after the specified timestamp.


    - --container=${CONTAINER_NAME}: This option allows you to specify which container
    within the pod you want to retrieve logs from. Pods can have multiple containers,
    so this option lets you choose the one you''re interested in.


    So, when you run this command, you''ll get the logs from the specified container
    in the selected namespace, filtered by the specified labels, limited by the maximum
    number of lines, byte limit, and the timeframe. This can help you troubleshoot
    issues and monitor the behavior of your application running in Kubernetes.'
  multi_line_details: '```bash

    # Set the context to be used for the operation

    kubectl config use-context ${CONTEXT}


    # Specify the namespace where the pods you want to get logs from are located

    kubectl config set-context --current --namespace=${NAMESPACE}


    # Retrieve the logs of pods that match the specified labels

    kubectl logs -l ${LABELS}


    # Limit the number of lines of logs retrieved

    kubectl logs -l ${LABELS} --tail=${MAX_LOG_LINES}


    # Limit the total size of logs retrieved in bytes

    kubectl logs -l ${LABELS} --limit-bytes=256000


    # Only retrieve logs since a specific time

    kubectl logs -l ${LABELS} --since=${LOGS_SINCE}


    # Specify the container name for which logs should be retrieved

    kubectl logs -l ${LABELS} --container=${CONTAINER_NAME}

    ```'
  name: get_workload_logs
- command: ${cmd}
  doc_links: '

    - [AWS CLI Command Reference](https://docs.aws.amazon.com/cli/latest/reference/){:target="_blank"}

    - [S3 Bucket Operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html){:target="_blank"}

    - [IAM Role Permissions](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html){:target="_blank"}'
  explanation: 'Sure! The command you provided is a placeholder for a specific command
    that you would use in Kubernetes. In Kubernetes, a command typically starts with
    `kubectl`, which is the command line tool for interacting with Kubernetes clusters.


    When you see `${cmd}`, it means that you need to replace it with the actual command
    that you want to run. For example, if you wanted to list all the pods running
    in your cluster, the actual command would be:


    ```

    kubectl get pods

    ```


    So whenever you see `${cmd}` in a tutorial or documentation, just replace it with
    the relevant `kubectl` command that you want to run. And remember, as you continue
    to use Kubernetes daily as an engineer, you''ll become more familiar with the
    various commands and how to use them effectively.'
  multi_line_details: '# Create a new deployment in Kubernetes

    kubectl create deployment my-deployment --image=nginx


    # Expose the deployment as a service

    kubectl expose deployment my-deployment --type=NodePort --port=80


    # Print out the newly created deployment and service

    kubectl get deployment

    kubectl get service'
  name: troubleshoot_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- printenv
  doc_links: '

    - [kubectl exec Command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: 'The command "kubectl --context=${CONTEXT} -n ${NAMESPACE} exec" allows
    you to execute a command inside a running container in a Kubernetes cluster. Let''s
    break it down:


    - "${CONTEXT}" represents the Kubernetes context, which is basically the configuration
    settings for a specific Kubernetes cluster. This allows you to specify which cluster
    you want to interact with.

    - "-n ${NAMESPACE}" specifies the namespace in which the resources are located.
    Namespaces are used to divide cluster resources between multiple users, teams,
    or projects.

    - "$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get all -l ${LABELS} -oname
    | grep -iE "deploy|stateful" | head -n 1)" is a command that retrieves resources
    based on specific labels and selects the name of the first deployment or stateful
    set found.

    - "--container=${CONTAINER_NAME}" specifies the name of the specific container
    within the pod where you want to execute the command.

    - "-- printenv" is the actual command being executed inside the specified container,
    in this case, it prints out the environment variables.


    So, to summarize, this command is essentially finding the first deployment or
    stateful set that matches a certain label, and then running the "printenv" command
    inside a specific container within that deployment or stateful set. It''s a powerful
    way to inspect and interact with containers running in your Kubernetes cluster.'
  multi_line_details: '```bash

    # Set the context to the desired Kubernetes cluster for running the command

    kubectl config use-context ${CONTEXT}


    # Set the namespace where the pod is located

    NAMESPACE=${NAMESPACE}


    # Get the name of the first deployment or stateful set filtered by labels in the
    specified namespace

    POD_NAME=$(kubectl get all -l ${LABELS} -n ${NAMESPACE} -o name | grep -iE "deploy|stateful"
    | head -n 1)


    # Print the environment variables in a specific container of the selected pod

    kubectl exec -it ${POD_NAME} -n ${NAMESPACE} --container=${CONTAINER_NAME} --
    printenv

    ```


    This multi-line command provides detailed explanation and steps to follow for
    new users of Kubernetes. It sets the context, selects the namespace, retrieves
    the pod name based on labels, and finally executes the `printenv` command within
    the selected container.'
  name: troubleshoot_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- ps -eo command --no-header | grep -v "ps
    -eo"
  doc_links: '

    - [Kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Exec Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec){:target="_blank"}

    - [Kubectl Get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl Grep Documentation](https://www.gnu.org/software/grep/manual/grep.html){:target="_blank"}'
  explanation: 'This command is used to run a specific command inside a container
    in a Kubernetes cluster. Let me break it down for you:


    - `kubectl`: This is the command line tool for interacting with Kubernetes clusters.


    - `--context=${CONTEXT}`: This specifies the context of the Kubernetes cluster
    you want to run the command on. The context contains information about the cluster,
    user, and namespace.


    - `-n ${NAMESPACE}`: This specifies the namespace within the Kubernetes cluster
    where the command will be executed.


    - `exec`: This tells Kubernetes to execute a command in a container.


    - `$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get all -l ${LABELS} -oname
    | grep -iE "deploy|stateful" | head -n 1)`: This part of the command uses the
    `kubectl get all` command to list all resources with specific labels and selects
    the first deployment or stateful set that matches those labels.


    - `--container=${CONTAINER_NAME}`: This specifies the container within the selected
    deployment or stateful set where the command will be executed.


    - `-- ps -eo command --no-header | grep -v "ps -eo"`: The final part of the command
    runs the `ps` command in the specified container, extracts the command being run
    by each process, and removes any lines containing the `ps -eo` command itself.


    In summary, this command allows you to find and inspect the command being run
    by a specific container within a Kubernetes deployment or stateful set. As an
    engineer working with Kubernetes, you will likely use this type of command frequently
    to troubleshoot and debug issues in your containers.'
  multi_line_details: "```bash\n# Set the context for the kubectl command to be executed\
    \ in a specific Kubernetes cluster\nkubectl --context=${CONTEXT}\n\n# Set the\
    \ namespace in which the executed command will take place\n-n ${NAMESPACE}\n\n\
    # Get the list of all resources with specific labels and output their names\n\
    get all -l ${LABELS} -oname\n\n# Filter the list of resources to only include\
    \ deployments and stateful sets, then select the first one\n| grep -iE \"deploy|stateful\"\
    \ | head -n 1\n\n# Execute a command in a specific container within the selected\
    \ resource\nkubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(...) \n\n# Specify\
    \ the container name where the command should be executed\n--container=${CONTAINER_NAME}\n\
    \n# Execute the 'ps' command with specific output format and filter out the header\
    \ line\n-- ps -eo command --no-header | grep -v \"ps -eo\"\n```"
  name: troubleshoot_application_logs
