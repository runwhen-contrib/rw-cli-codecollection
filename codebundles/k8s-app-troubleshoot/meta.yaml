commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs -l ${LABELS} --tail=${MAX_LOG_LINES}
    --limit-bytes=256000 --since=${LOGS_SINCE} --container=${CONTAINER_NAME}
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Accessing logs in kubectl](https://kubernetes.io/docs/concepts/cluster-administration/logging/#accessing-logs-in-kubectl){:target="_blank"}

    - [Kubernetes namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Labels in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command uses kubectl to access logs from a specific context and
    namespace based on specified labels, displaying only the latest lines of logs
    within certain size and time limitations for a specific container.
  multi_line_details: "\n# Set the Kubernetes context to the specified context\nkubectl\
    \ config use-context ${CONTEXT}\n\n# View logs from a specific namespace using\
    \ the -n flag\n# Replace ${NAMESPACE} with the name of the namespace you want\
    \ to view logs for\nkubectl -n ${NAMESPACE} \n\n# Filter logs based on labels\
    \ using the -l flag\n# Replace ${LABELS} with the labels you want to filter by\n\
    logs -l ${LABELS} \n\n# Specify the maximum number of lines of log output to show\
    \ using the --tail flag\n# Replace ${MAX_LOG_LINES} with the maximum number of\
    \ lines you want to display\n--tail=${MAX_LOG_LINES} \n\n# Limit the log output\
    \ in bytes using the --limit-bytes flag\n# Replace 256000 with the maximum number\
    \ of bytes you want to display\n--limit-bytes=256000 \n\n# Show logs since a specific\
    \ timestamp using the --since flag\n# Replace ${LOGS_SINCE} with the timestamp\
    \ you want to view logs since\n--since=${LOGS_SINCE} \n\n# View logs from a specific\
    \ container using the --container flag\n# Replace ${CONTAINER_NAME} with the name\
    \ of the container you want to view logs for\n--container=${CONTAINER_NAME}\n"
  name: get_container_name_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs -l ${LABELS} --tail=${MAX_LOG_LINES}
    --limit-bytes=256000 --since=${LOGS_SINCE} --container=${CONTAINER_NAME}
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Accessing logs in kubectl](https://kubernetes.io/docs/concepts/cluster-administration/logging/#accessing-logs-in-kubectl){:target="_blank"}

    - [Kubernetes namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Labels in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command uses kubectl to access logs from a specific context and
    namespace based on specified labels, displaying only the latest lines of logs
    within certain size and time limitations for a specific container.
  multi_line_details: "\n# Set the Kubernetes context to the specified context\nkubectl\
    \ config use-context ${CONTEXT}\n\n# View logs from a specific namespace using\
    \ the -n flag\n# Replace ${NAMESPACE} with the name of the namespace you want\
    \ to view logs for\nkubectl -n ${NAMESPACE} \n\n# Filter logs based on labels\
    \ using the -l flag\n# Replace ${LABELS} with the labels you want to filter by\n\
    logs -l ${LABELS} \n\n# Specify the maximum number of lines of log output to show\
    \ using the --tail flag\n# Replace ${MAX_LOG_LINES} with the maximum number of\
    \ lines you want to display\n--tail=${MAX_LOG_LINES} \n\n# Limit the log output\
    \ in bytes using the --limit-bytes flag\n# Replace 256000 with the maximum number\
    \ of bytes you want to display\n--limit-bytes=256000 \n\n# Show logs since a specific\
    \ timestamp using the --since flag\n# Replace ${LOGS_SINCE} with the timestamp\
    \ you want to view logs since\n--since=${LOGS_SINCE} \n\n# View logs from a specific\
    \ container using the --container flag\n# Replace ${CONTAINER_NAME} with the name\
    \ of the container you want to view logs for\n--container=${CONTAINER_NAME}\n"
  name: get_container_name_application_logs
- command: ${cmd}
  doc_links: '

    - [How to execute system commands in Python](https://realpython.com/run-python-scripts/){:target="_blank"}

    - [Introduction to shell scripting](https://www.guru99.com/introduction-to-shell-scripting.html){:target="_blank"}

    - [Bash scripting tutorial for beginners](https://linuxconfig.org/bash-scripting-tutorial-for-beginners){:target="_blank"}

    - [Using command line arguments in shell scripts](https://bash.cyberciti.biz/script/using-arguments/){:target="_blank"}'
  explanation: This command is a placeholder for a specific system command or script
    that needs to be executed within a larger program or script. It allows for the
    dynamic execution of commands based on specific conditions or inputs.
  multi_line_details: '# This is a multi-line command with helpful comments

    # First, we want to declare a variable called cmd and assign it a value


    cmd="some_command --option1 value1 --option2 value2"


    # Next, we want to execute the command stored in the cmd variable.

    # By using the ${} notation, we can reference the value of the variable.


    ${cmd}'
  name: troubleshoot_container_name_application_logs
- command: ${cmd}
  doc_links: '

    - [How to execute system commands in Python](https://realpython.com/run-python-scripts/){:target="_blank"}

    - [Introduction to shell scripting](https://www.guru99.com/introduction-to-shell-scripting.html){:target="_blank"}

    - [Bash scripting tutorial for beginners](https://linuxconfig.org/bash-scripting-tutorial-for-beginners){:target="_blank"}

    - [Using command line arguments in shell scripts](https://bash.cyberciti.biz/script/using-arguments/){:target="_blank"}'
  explanation: This command is a placeholder for a specific system command or script
    that needs to be executed within a larger program or script. It allows for the
    dynamic execution of commands based on specific conditions or inputs.
  multi_line_details: '# This is a multi-line command with helpful comments

    # First, we want to declare a variable called cmd and assign it a value


    cmd="some_command --option1 value1 --option2 value2"


    # Next, we want to execute the command stored in the cmd variable.

    # By using the ${} notation, we can reference the value of the variable.


    ${cmd}'
  name: troubleshoot_container_name_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- printenv
  doc_links: '

    '
  explanation: This command allows you to execute a specific command within a running
    container in a Kubernetes cluster by specifying the context, namespace, labels,
    and container name. It makes use of kubectl to find the relevant resources and
    then runs the specified command within the chosen container.
  multi_line_details: '

    # Set the context and namespace to be used

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Get the name of the first deployment or stateful set based on specified labels

    RESOURCE_NAME=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get all -l ${LABELS}
    -oname | grep -iE "deploy|stateful" | head -n 1)


    # Execute the command within the specified container using the retrieved resource
    name

    CONTAINER_NAME=my-container

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $RESOURCE_NAME --container=${CONTAINER_NAME}
    -- printenv

    '
  name: troubleshoot_container_name_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- printenv
  doc_links: '

    '
  explanation: This command allows you to execute a specific command within a running
    container in a Kubernetes cluster by specifying the context, namespace, labels,
    and container name. It makes use of kubectl to find the relevant resources and
    then runs the specified command within the chosen container.
  multi_line_details: '

    # Set the context and namespace to be used

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Get the name of the first deployment or stateful set based on specified labels

    RESOURCE_NAME=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get all -l ${LABELS}
    -oname | grep -iE "deploy|stateful" | head -n 1)


    # Execute the command within the specified container using the retrieved resource
    name

    CONTAINER_NAME=my-container

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $RESOURCE_NAME --container=${CONTAINER_NAME}
    -- printenv

    '
  name: troubleshoot_container_name_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- ps -eo command --no-header | grep -v "ps
    -eo"
  doc_links: '

    - [Kubernetes kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubectl Exec Command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec){:target="_blank"}

    - [Linux ps command](https://man7.org/linux/man-pages/man1/ps.1.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific namespace
    and context, targeting the first deployment or stateful set with specified labels.
    It then runs a ps command in a specific container and filters out the ps command
    itself from the output.
  multi_line_details: '

    # Set the kubectl context to be used for the command

    CONTEXT=${CONTEXT}


    # Set the namespace in which the command will be executed

    NAMESPACE=${NAMESPACE}


    # Get a list of all resources with the specified labels in the specified namespace

    # Filter the results to only include deployments and stateful sets

    # Select the first resource from the filtered list

    DEPLOYMENT=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get all -l ${LABELS}
    -o name | grep -iE "deploy|stateful" | head -n 1)


    # Specify the name of the container within the selected resource

    CONTAINER_NAME=${CONTAINER_NAME}


    # Execute the ''ps'' command within the specified container and output the command
    from each process

    COMMAND=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} exec ${DEPLOYMENT} --container=${CONTAINER_NAME}
    -- ps -eo command --no-header)


    # Filter out any lines that contain the ''ps'' command itself

    FILTERED_COMMAND=$(echo "${COMMAND}" | grep -v "ps -eo")


    # Display the filtered command output

    echo "${FILTERED_COMMAND}"


    This multi-line command breaks down the original complex command into individual
    steps with explanatory comments, making it easier for newer or less experienced
    devops engineers to understand and modify as needed.'
  name: troubleshoot_container_name_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- ps -eo command --no-header | grep -v "ps
    -eo"
  doc_links: '

    - [Kubernetes kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubectl Exec Command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec){:target="_blank"}

    - [Linux ps command](https://man7.org/linux/man-pages/man1/ps.1.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific namespace
    and context, targeting the first deployment or stateful set with specified labels.
    It then runs a ps command in a specific container and filters out the ps command
    itself from the output.
  multi_line_details: '

    # Set the kubectl context to be used for the command

    CONTEXT=${CONTEXT}


    # Set the namespace in which the command will be executed

    NAMESPACE=${NAMESPACE}


    # Get a list of all resources with the specified labels in the specified namespace

    # Filter the results to only include deployments and stateful sets

    # Select the first resource from the filtered list

    DEPLOYMENT=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get all -l ${LABELS}
    -o name | grep -iE "deploy|stateful" | head -n 1)


    # Specify the name of the container within the selected resource

    CONTAINER_NAME=${CONTAINER_NAME}


    # Execute the ''ps'' command within the specified container and output the command
    from each process

    COMMAND=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} exec ${DEPLOYMENT} --container=${CONTAINER_NAME}
    -- ps -eo command --no-header)


    # Filter out any lines that contain the ''ps'' command itself

    FILTERED_COMMAND=$(echo "${COMMAND}" | grep -v "ps -eo")


    # Display the filtered command output

    echo "${FILTERED_COMMAND}"


    This multi-line command breaks down the original complex command into individual
    steps with explanatory comments, making it easier for newer or less experienced
    devops engineers to understand and modify as needed.'
  name: troubleshoot_container_name_application_logs
