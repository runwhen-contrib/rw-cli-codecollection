commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs -l ${LABELS} --tail=${MAX_LOG_LINES}
    --limit-bytes=256000 --since=${LOGS_SINCE} --container=${CONTAINER_NAME}
  doc_links: '

    - [Kubernetes Documentation: Kubernetes Logs](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#logs){:target="_blank"}

    - [Kubernetes Documentation: Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Documentation: Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubernetes Documentation: Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation: Logging and Monitoring](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}'
  explanation: This command retrieves the logs of a specific container within a Kubernetes
    pod, using the specified context, namespace, and labels, and limiting the output
    to a certain number of lines and bytes, as well as filtering based on a specified
    timestamp.
  multi_line_details: "```bash\n# Set the context for the kubectl command\nkubectl\
    \ config use-context ${CONTEXT}\n\n# Specify the namespace for which to get logs\n\
    namespace=${NAMESPACE}\n\n# Get logs with specific labels and other options\n\
    kubectl logs -n $namespace \\\n  -l ${LABELS} \\\n  --tail=${MAX_LOG_LINES} \\\
    \n  --limit-bytes=256000 \\\n  --since=${LOGS_SINCE} \\\n  --container=${CONTAINER_NAME}\n\
    ```"
  name: get_workload_name_application_logs
- command: ${cmd}
  doc_links: '

    - [Linux command line documentation](https://linuxcommand.org/){:target="_blank"}

    - [Bash scripting tutorial](https://ryanstutorials.net/bash-scripting-tutorial/){:target="_blank"}'
  explanation: This command is a placeholder for a specific command that needs to
    be executed, but the actual command will depend on the context in which it's being
    used.
  multi_line_details: '```sh

    #!/bin/bash

    # This script sets up a variable named cmd

    cmd="your_command_here"

    # Then it uses the variable to execute the command

    ${cmd}

    ```'
  name: troubleshoot_workload_name_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- printenv
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command allows you to execute a shell command in a specific container
    within a Kubernetes cluster, using the specified context and namespace, and targeting
    a resource based on certain labels.
  multi_line_details: "```bash\n# Set the kubectl context and namespace for execution\n\
    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(\n\n  # Get the name of the\
    \ first deployment or stateful set with the specified labels\n  kubectl --context=${CONTEXT}\
    \ -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE \"deploy|stateful\" |\
    \ head -n 1\n\n) --container=${CONTAINER_NAME} -- printenv\n```"
  name: troubleshoot_workload_name_application_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get all -l ${LABELS} -oname | grep -iE "deploy|stateful" | head
    -n 1) --container=${CONTAINER_NAME} -- ps -eo command --no-header | grep -v "ps
    -eo"
  doc_links: '

    - [Kubectl Command Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubectl Advanced Pod Usage](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific deployment
    or stateful set within a given namespace and context. It retrieves the pods based
    on specified labels, selects the first result, and runs a specific container's
    process command while filtering out any non-relevant results.
  multi_line_details: '```bash

    # Store the name of the resource with the specified labels in a variable

    resource_name=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get all -l ${LABELS}
    -oname | grep -iE "deploy|stateful" | head -n 1)


    # Execute a command within the specified resource and container to retrieve process
    information

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $resource_name --container=${CONTAINER_NAME}
    -- ps -eo command --no-header | grep -v "ps -eo"

    ```'
  name: troubleshoot_workload_name_application_logs
