{
  "patterns": [
    {
      "match": "error=connection closed before message completed",
      "category": "GenericError",
      "severity": 4,
      "next_steps": [
        "These 'connection closed' lines are typically normal and do not indicate a genuine error",
        "Monitor if repeated excessively. If so, investigate possible timeouts or network disruptions"
      ]
    },
    {
      "match": "(?i)error", 
      "category": "GenericError",
      "severity": 3,
      "next_steps": [
        "Review logs for generic error messages in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Identify if they indicate operational issues or known warnings"
      ]
    },
    {
      "match": "(?i)fail",
      "category": "GenericError",
      "severity": 3,
      "next_steps": [
        "Investigate 'fail' references in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check if they correspond to test failures, partial successes, or genuine errors"
      ]
    },
    {
      "match": "(?i)generic failure",
      "category": "GenericError",
      "severity": 2,
      "next_steps": [
        "Review logs for references to 'generic failure' in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Determine whether this indicates a minor or major operational issue"
      ]
    },
    {
      "match": "(?i)unhandled error",
      "category": "GenericError",
      "severity": 2,
      "next_steps": [
        "Look for unhandled error traces in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Add error handling or logging to capture more details"
      ]
    },
    {
      "match": "(?i)problem occurred",
      "category": "GenericError",
      "severity": 2,
      "next_steps": [
        "Check for known issues or configuration problems in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Correlate with surrounding log lines to isolate root cause"
      ]
    },
    {
      "match": "(?i)issue:",
      "category": "GenericError",
      "severity": 2,
      "next_steps": [
        "Investigate the reported 'issue:' logs in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Assess if it's user-facing or internal diagnostic info"
      ]
    },
    {
      "match": "(?i)unexpected situation",
      "category": "GenericError",
      "severity": 3,
      "next_steps": [
        "Analyze why an unexpected situation arose in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Consider adding guard clauses or additional checks"
      ]
    },
    {
      "match": "connection refused",
      "category": "Connection",
      "severity": 2,
      "next_steps": [
        "Check if the service for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is reachable",
        "Validate firewall rules and network policies"
      ]
    },
    {
      "match": "connection timeout",
      "category": "Connection",
      "severity": 3,
      "next_steps": [
        "Investigate network latency for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check DNS resolution and service response time"
      ]
    },
    {
      "match": "failed to connect",
      "category": "Connection",
      "severity": 2,
      "next_steps": [
        "Ensure that ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} has the correct service endpoints",
        "Validate hostnames and connection settings"
      ]
    },
    {
      "match": "service unavailable",
      "category": "Connection",
      "severity": 2,
      "next_steps": [
        "Verify if the backend service for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is healthy and accepting connections"
      ]
    },
    {
      "match": "unable to reach",
      "category": "Connection",
      "severity": 3,
      "next_steps": [
        "Confirm that ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} has network access to required services",
        "Check for misconfigured network policies"
      ]
    },
    {
      "match": "could not resolve host",
      "category": "Connection",
      "severity": 3,
      "next_steps": [
        "Investigate DNS resolution issues for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure DNS is properly configured"
      ]
    },
    {
      "match": "read: connection reset by peer",
      "category": "Connection",
      "severity": 3,
      "next_steps": [
        "Check if the remote service for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is experiencing intermittent failures",
        "Increase retry logic if needed"
      ]
    },
    {
      "match": "remote error: internal server error",
      "category": "Connection",
      "severity": 3,
      "next_steps": [
        "Investigate backend failures impacting ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Review service logs for further details"
      ]
    },
    {
      "match": "network is unreachable",
      "category": "Connection",
      "severity": 2,
      "next_steps": [
        "Confirm that the host network allows traffic for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check route tables and network interfaces"
      ]
    },
    {
      "match": "SSL handshake error",
      "category": "Connection",
      "severity": 3,
      "next_steps": [
        "Verify certificates used by ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check if TLS versions or cipher suites are mismatched"
      ]
    },
    {
      "match": "DNS lookup failed",
      "category": "Connection",
      "severity": 3,
      "next_steps": [
        "Ensure DNS configuration is correct for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check /etc/resolv.conf or cluster DNS pods"
      ]
    },
    {
      "match": "host unreachable",
      "category": "Connection",
      "severity": 2,
      "next_steps": [
        "Verify the target host is up and responding to pings",
        "Review firewall or security group rules restricting connectivity"
      ]
    },
    {
      "match": "broken pipe",
      "category": "Connection",
      "severity": 2,
      "next_steps": [
        "Check if the remote service forcibly closed the connection",
        "Look for partial writes or large data transfers in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}"
      ]
    },
    {
      "match": "timeout",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Investigate slow responses in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check backend latency and optimize timeouts"
      ]
    },
    {
      "match": "request timeout",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Review API response times for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure service endpoints are responsive"
      ]
    },
    {
      "match": "operation timed out",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Check if ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is experiencing long-running operations",
        "Consider adjusting timeout settings"
      ]
    },
    {
      "match": "execution expired",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Identify delays in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Review service dependencies and optimize response times"
      ]
    },
    {
      "match": "deadline exceeded",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Verify service timeouts for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Adjust retry mechanisms if necessary"
      ]
    },
    {
      "match": "response took too long",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Investigate if ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is overloaded",
        "Review performance metrics and potential bottlenecks"
      ]
    },
    {
      "match": "gateway timeout",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Confirm upstream services respond within the gateway's time limit",
        "Evaluate timeouts for the gateway or load balancer"
      ]
    },
    {
      "match": "operation exceeded time limit",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Identify which operation in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is slow",
        "Optimize or break it down into smaller tasks"
      ]
    },
    {
      "match": "script timed out",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Check any scripting logic in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Review max execution times or watch for infinite loops"
      ]
    },
    {
      "match": "query took too long",
      "category": "Timeout",
      "severity": 3,
      "next_steps": [
        "Optimize database queries or indexes for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Investigate large data sets or slow I/O"
      ]
    },
    {
      "match": "authentication failed",
      "category": "Auth",
      "severity": 2,
      "next_steps": [
        "Verify credentials for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check if tokens or passwords are expired"
      ]
    },
    {
      "match": "unauthorized",
      "category": "Auth",
      "severity": 4,
      "next_steps": [
        "Verify user credentials and authentication settings for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check for missing or expired tokens"
      ]
    },
    {
      "match": "invalid credentials",
      "category": "Auth",
      "severity": 3,
      "next_steps": [
        "Ensure that the credentials for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} are valid",
        "Check for misconfigured secrets"
      ]
    },
    {
      "match": "token expired",
      "category": "Auth",
      "severity": 3,
      "next_steps": [
        "Renew expired tokens for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Verify OAuth and JWT configurations"
      ]
    },
    {
      "match": "access denied",
      "category": "Auth",
      "severity": 2,
      "next_steps": [
        "Verify RBAC permissions for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure the correct roles are assigned"
      ]
    },
    {
      "match": "forbidden",
      "category": "Auth",
      "severity": 2,
      "next_steps": [
        "Check Kubernetes role bindings and policies for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure required permissions exist"
      ]
    },
    {
      "match": "login failed",
      "category": "Auth",
      "severity": 2,
      "next_steps": [
        "Verify username/password or tokens used by ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check if there's a lockout policy after multiple failures"
      ]
    },
    {
      "match": "unauthenticated request",
      "category": "Auth",
      "severity": 3,
      "next_steps": [
        "Determine why ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} didn't authenticate the request",
        "Add required authentication headers or tokens"
      ]
    },
    {
      "match": "API key invalid",
      "category": "Auth",
      "severity": 3,
      "next_steps": [
        "Refresh or rotate the API key for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure the configured key matches the backend"
      ]
    },
    {
      "match": "user does not have permission",
      "category": "Auth",
      "severity": 2,
      "next_steps": [
        "Review role-based access controls for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Update roles if the user should have access"
      ]
    },
    {
      "match": "token validation failed",
      "category": "Auth",
      "severity": 3,
      "next_steps": [
        "Check JWT or OAuth token for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Confirm token hasn't expired or been revoked"
      ]
    },
    {
      "match": "Exception",
      "category": "Exceptions",
      "severity": 2,
      "next_steps": [
        "Analyze the Java exception in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Verify exception handling and log details"
      ]
    },
    {
      "match": "Traceback",
      "category": "Exceptions",
      "severity": 2,
      "next_steps": [
        "Identify the root cause of the Python traceback in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check for missing dependencies or incorrect data"
      ]
    },
    {
      "match": "NullPointerException",
      "category": "Exceptions",
      "severity": 2,
      "next_steps": [
        "Investigate possible null dereferences in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Add null checks and handle missing values appropriately"
      ]
    },
    {
      "match": "TypeError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Check type mismatches in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure expected data structures are used"
      ]
    },
    {
      "match": "ReferenceError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Verify that variables and functions are correctly declared and accessible in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}"
      ]
    },
    {
      "match": "UnhandledPromiseRejectionWarning",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Handle rejected promises properly in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Use try/catch or .catch() to handle errors"
      ]
    },
    {
      "match": "panic:",
      "category": "Exceptions",
      "severity": 2,
      "next_steps": [
        "Investigate unhandled panic in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Use `recover()` to handle unhandled crashes"
      ]
    },
    {
      "match": "segmentation fault",
      "category": "Exceptions",
      "severity": 1,
      "next_steps": [
        "Analyze memory usage for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Use `gdb` or `valgrind` to debug segmentation faults"
      ]
    },
    {
      "match": "ArithmeticException",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Investigate division by zero or numeric overflows in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}"
      ]
    },
    {
      "match": "IllegalStateException",
      "category": "Exceptions",
      "severity": 2,
      "next_steps": [
        "Verify that ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is in a valid state before calling dependent functions"
      ]
    },
    {
      "match": "System.InvalidOperationException",
      "category": "Exceptions",
      "severity": 2,
      "next_steps": [
        "Ensure ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} follows correct sequence operations and does not call methods at an invalid state"
      ]
    },
    {
      "match": "IndexError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Check list indexing in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure indices are within range"
      ]
    },
    {
      "match": "KeyError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Verify dictionary keys in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure keys exist before accessing them"
      ]
    },
    {
      "match": "AssertionError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Check failed assertions in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure expected conditions are met"
      ]
    },
    {
      "match": "IndexOutOfBoundsException",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Check array or list indexing in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure indices are within valid bounds"
      ]
    },
    {
      "match": "ZeroDivisionError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Verify arithmetic operations in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Avoid dividing by zero or handle zero-check logic"
      ]
    },
    {
      "match": "ModuleNotFoundError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Install or reference the missing module in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check environment paths or package versions"
      ]
    },
    {
      "match": "NameError",
      "category": "Exceptions",
      "severity": 3,
      "next_steps": [
        "Ensure variables or functions are declared before use in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check for typos or scope issues"
      ]
    },
    {
      "match": "SIGSEGV",
      "category": "Exceptions",
      "severity": 1,
      "next_steps": [
        "A segmentation fault occurred in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Debug with gdb or relevant memory analysis tools"
      ]
    },
    {
      "match": "process exited",
      "category": "AppFailure",
      "severity": 2,
      "next_steps": [
        "Check logs in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} for crash details",
        "Investigate unhandled exceptions or out-of-memory errors"
      ]
    },
    {
      "match": "shutting down",
      "category": "AppFailure",
      "severity": 3,
      "next_steps": [
        "Investigate why ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} is shutting down",
        "Look for termination signals or resource exhaustion"
      ]
    },
    {
      "match": "fatal error",
      "category": "AppFailure",
      "severity": 1,
      "next_steps": [
        "A fatal error was detected in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Review logs and debug the cause immediately"
      ]
    },
    {
      "match": "core dumped",
      "category": "AppFailure",
      "severity": 1,
      "next_steps": [
        "Check core dump analysis for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Debug using `gdb` or post-mortem tools"
      ]
    },
    {
      "match": "exited with code",
      "category": "AppFailure",
      "severity": 2,
      "next_steps": [
        "Check process exit codes for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Investigate logs for the reason of non-zero exit"
      ]
    },
    {
      "match": "hang detected",
      "category": "AppFailure",
      "severity": 2,
      "next_steps": [
        "Look for deadlocks or infinite loops in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Capture thread dumps or stack traces if possible"
      ]
    },
    {
      "match": "broken state",
      "category": "AppFailure",
      "severity": 3,
      "next_steps": [
        "Investigate logs to see how ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} reached a broken state",
        "Restart or roll back to a stable version if needed"
      ]
    },
    {
      "match": "fatal termination",
      "category": "AppFailure",
      "severity": 1,
      "next_steps": [
        "A fatal termination was triggered in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check logs for root cause and fix underlying issue"
      ]
    },
    {
      "match": "unrecoverable error",
      "category": "AppFailure",
      "severity": 1,
      "next_steps": [
        "The application cannot continue safely in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Implement fallback logic or investigate logs thoroughly"
      ]
    },
    {
      "match": "restart",
      "category": "AppRestart",
      "severity": 2,
      "next_steps": [
        "Monitor ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} for repeated restarts",
        "Check readiness probes and resource limits for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}"
      ]
    },
    {
      "match": "init process restarted",
      "category": "AppRestart",
      "severity": 2,
      "next_steps": [
        "Check why the init process in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} triggered a restart",
        "Review system logs or container logs for restart signals"
      ]
    },
    {
      "match": "service reboot initiated",
      "category": "AppRestart",
      "severity": 2,
      "next_steps": [
        "Determine if an admin or automated script caused a reboot for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Verify if it's part of a normal update cycle"
      ]
    },
    {
      "match": "app is restarting",
      "category": "AppRestart",
      "severity": 2,
      "next_steps": [
        "Verify readiness/liveness probes for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Ensure frequent restarts are not caused by configuration issues"
      ]
    },
    {
      "match": "restart loop detected",
      "category": "AppRestart",
      "severity": 3,
      "next_steps": [
        "Investigate repeated restarts for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check resource usage or unhandled exceptions"
      ]
    },
    {
      "match": "system is rebooting",
      "category": "AppRestart",
      "severity": 2,
      "next_steps": [
        "Confirm if the system reboot is expected (maintenance)",
        "Ensure no critical workloads are abruptly stopped"
      ]
    },
    {
      "match": "Out of memory",
      "category": "Resource",
      "severity": 1,
      "next_steps": [
        "Increase memory limits for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Investigate memory leaks or optimize resource allocation"
      ]
    },
    {
      "match": "Killed process",
      "category": "Resource",
      "severity": 1,
      "next_steps": [
        "A process was killed due to memory exhaustion in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Increase available memory or reduce memory consumption"
      ]
    },
    {
      "match": "memory limit exceeded",
      "category": "Resource",
      "severity": 2,
      "next_steps": [
        "Monitor ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} for memory usage spikes",
        "Consider adjusting requests and limits"
      ]
    },
    {
      "match": "OOMKilled",
      "category": "Resource",
      "severity": 1,
      "next_steps": [
        "The pod running ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE} was OOMKilled",
        "Increase memory allocation or optimize memory usage"
      ]
    },
    {
      "match": "high CPU usage",
      "category": "Resource",
      "severity": 2,
      "next_steps": [
        "Investigate high CPU usage in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Optimize CPU-intensive tasks and adjust resource limits"
      ]
    },
    {
      "match": "CPU throttling detected",
      "category": "Resource",
      "severity": 2,
      "next_steps": [
        "Kubernetes is throttling CPU for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Consider increasing CPU limits or reviewing workload efficiency"
      ]
    },
    {
      "match": "disk full",
      "category": "Resource",
      "severity": 1,
      "next_steps": [
        "Free up disk space for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Add persistent volume or increase disk allocation"
      ]
    },
    {
      "match": "max file descriptors exceeded",
      "category": "Resource",
      "severity": 2,
      "next_steps": [
        "Increase the open files limit for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Close file handles properly to avoid leaks"
      ]
    },
    {
      "match": "thread pool exhausted",
      "category": "Resource",
      "severity": 2,
      "next_steps": [
        "Check thread usage for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Raise thread pool size or optimize concurrent operations"
      ]
    },
    {
      "match": "out of swap space",
      "category": "Resource",
      "severity": 1,
      "next_steps": [
        "Increase swap or reduce memory usage in ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Optimize memory-hungry operations"
      ]
    },
    {
      "match": "too many open files",
      "category": "Resource",
      "severity": 2,
      "next_steps": [
        "Raise the file descriptor limit for ${WORKLOAD_TYPE} ${WORKLOAD_NAME} in namespace ${NAMESPACE}",
        "Check for file handle leaks or improper resource cleanup"
      ]
    }
  ]
}
