commands:
- command: 'kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o jsonpath=''Application Name: {.metadata.name}, Sync Status:
    {.status.sync.status}, Health Status: {.status.health.status}, Message: {.status.conditions[].message}'''
  doc_links: '

    '
  explanation: This command retrieves information about a specific application in
    a Kubernetes cluster, including its name, synchronization status, health status,
    and any relevant messages, using the ArgoCD API. The information is specified
    by the variables ${APPLICATION}, ${APPLICATION_APP_NAMESPACE}, and ${CONTEXT}.
  multi_line_details: "\n# This command retrieves specific information about an Argo\
    \ CD application in a Kubernetes cluster.\n# It uses the kubectl tool to interact\
    \ with the cluster.\n\n# Set the variables for the application name, namespace,\
    \ and context.\nAPPLICATION=myapp\nAPPLICATION_APP_NAMESPACE=myapp-namespace\n\
    CONTEXT=my-kubernetes-context\n\n# Use kubectl to get the application information\
    \ and format it using jsonpath.\nkubectl get applications.argoproj.io ${APPLICATION}\
    \ -n ${APPLICATION_APP_NAMESPACE} --context ${CONTEXT} \\\n  -o jsonpath='Application\
    \ Name: {.metadata.name}, Sync Status: {.status.sync.status}, Health Status: {.status.health.status},\
    \ Message: {.status.conditions[].message}'\n\n\nBreaking the command into multiple\
    \ lines with comments provides better context and explanation for newer or less\
    \ experienced devops engineers."
  name: fetch_argocd_application_sync_status_health_for_application
  when_is_it_useful: '1. Troubleshooting an application experiencing performance issues
    or outages in a Kubernetes cluster

    2. Investigating and resolving CrashLoopBackoff events for specific applications
    in the Kubernetes cluster

    3. Monitoring the health and status of critical applications running in the Kubernetes
    cluster

    4. Performing routine maintenance or updates on specific applications deployed
    in the Kubernetes cluster

    5. Investigating and resolving synchronization issues for applications managed
    by ArgoCD in the Kubernetes cluster.'
- command: 'kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o jsonpath=''Application Name: {.metadata.name}, Sync Status:
    {.status.sync.status}, Health Status: {.status.health.status}, Message: {.status.conditions[].message}'''
  doc_links: '

    '
  explanation: This command retrieves information about a specific application in
    a Kubernetes cluster, including its name, synchronization status, health status,
    and any relevant messages, using the ArgoCD API. The information is specified
    by the variables ${APPLICATION}, ${APPLICATION_APP_NAMESPACE}, and ${CONTEXT}.
  multi_line_details: "\n# This command retrieves specific information about an Argo\
    \ CD application in a Kubernetes cluster.\n# It uses the kubectl tool to interact\
    \ with the cluster.\n\n# Set the variables for the application name, namespace,\
    \ and context.\nAPPLICATION=myapp\nAPPLICATION_APP_NAMESPACE=myapp-namespace\n\
    CONTEXT=my-kubernetes-context\n\n# Use kubectl to get the application information\
    \ and format it using jsonpath.\nkubectl get applications.argoproj.io ${APPLICATION}\
    \ -n ${APPLICATION_APP_NAMESPACE} --context ${CONTEXT} \\\n  -o jsonpath='Application\
    \ Name: {.metadata.name}, Sync Status: {.status.sync.status}, Health Status: {.status.health.status},\
    \ Message: {.status.conditions[].message}'\n\n\nBreaking the command into multiple\
    \ lines with comments provides better context and explanation for newer or less\
    \ experienced devops engineers."
  name: fetch_argocd_application_sync_status_health_for_application
  when_is_it_useful: '1. Troubleshooting an application experiencing performance issues
    or outages in a Kubernetes cluster

    2. Investigating and resolving CrashLoopBackoff events for specific applications
    in the Kubernetes cluster

    3. Monitoring the health and status of critical applications running in the Kubernetes
    cluster

    4. Performing routine maintenance or updates on specific applications deployed
    in the Kubernetes cluster

    5. Investigating and resolving synchronization issues for applications managed
    by ArgoCD in the Kubernetes cluster.'
- command: 'kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o json | jq -r ''"Application Name: " + .metadata.name +
    "\nApplication Namespace: "+ .metadata.namespace + "\nLast Sync Start Time: "
    + .status.operationState.finishedAt + "\nLast Sync Finish Time: " + .status.operationState.startedAt
    + "\nLast Sync Status: " + .status.operationState.phase + "\nLast Sync Message:
    " + .status.operationState.message'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [ArgoCD](https://argo-cd.readthedocs.io/en/stable/){:target="_blank"}

    - [JSON output using jq](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about a specific
    application deployed with ArgoCD, such as its name, namespace, and details about
    its last synchronization, and formats the output in JSON using jq.
  multi_line_details: "\n# Set the variables for the application name, application\
    \ app namespace, and context\nAPPLICATION=\"example-application\"\nAPPLICATION_APP_NAMESPACE=\"\
    example-namespace\"\nCONTEXT=\"example-context\"\n\n# Get the application details\
    \ in JSON format and use jq to parse and format the output\nkubectl get applications.argoproj.io\
    \ ${APPLICATION} \\\n  -n ${APPLICATION_APP_NAMESPACE} \\\n  --context ${CONTEXT}\
    \ \\\n  -o json | jq -r '\"Application Name: \" + .metadata.name + \n  \"\\nApplication\
    \ Namespace: \"+ .metadata.namespace + \n  \"\\nLast Sync Start Time: \" + .status.operationState.finishedAt\
    \ + \n  \"\\nLast Sync Finish Time: \" + .status.operationState.startedAt + \n\
    \  \"\\nLast Sync Status: \" + .status.operationState.phase + \n  \"\\nLast Sync\
    \ Message: \" + .status.operationState.message'\n\n\nBy breaking down the command\
    \ into multiple lines and adding comments, newer or less experienced devops engineers\
    \ can better understand what each part of the command does. This helps to improve\
    \ readability and comprehension, making it easier for them to learn and work with\
    \ the command."
  name: fetch_argocd_application_last_sync_operation_details_for_application
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: DevOps
    or SREs may use this command to gather information about a specific application
    deployed with ArgoCD in order to identify potential issues causing the CrashLoopBackoff
    events.


    2. Investigating deployment synchronization issues: If an application deployment
    is not synchronizing properly with ArgoCD, DevOps or SREs can use this command
    to retrieve details about the last synchronization and identify any discrepancies.


    3. Monitoring application status: DevOps or SREs may use this command to regularly
    check the status of applications deployed with ArgoCD, ensuring they are running
    smoothly and have the correct configuration.


    4. Auditing application deployments: This command can be used to audit and track
    changes in application deployments managed by ArgoCD, providing valuable insights
    for compliance and security purposes.


    5. Automating reporting and alerting: DevOps or SREs can use this command to gather
    information about ArgoCD-managed applications and automate reporting or alerting
    mechanisms based on specific criteria or thresholds.'
- command: 'kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o json | jq -r ''"Application Name: " + .metadata.name +
    "\nApplication Namespace: "+ .metadata.namespace + "\nLast Sync Start Time: "
    + .status.operationState.finishedAt + "\nLast Sync Finish Time: " + .status.operationState.startedAt
    + "\nLast Sync Status: " + .status.operationState.phase + "\nLast Sync Message:
    " + .status.operationState.message'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [ArgoCD](https://argo-cd.readthedocs.io/en/stable/){:target="_blank"}

    - [JSON output using jq](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about a specific
    application deployed with ArgoCD, such as its name, namespace, and details about
    its last synchronization, and formats the output in JSON using jq.
  multi_line_details: "\n# Set the variables for the application name, application\
    \ app namespace, and context\nAPPLICATION=\"example-application\"\nAPPLICATION_APP_NAMESPACE=\"\
    example-namespace\"\nCONTEXT=\"example-context\"\n\n# Get the application details\
    \ in JSON format and use jq to parse and format the output\nkubectl get applications.argoproj.io\
    \ ${APPLICATION} \\\n  -n ${APPLICATION_APP_NAMESPACE} \\\n  --context ${CONTEXT}\
    \ \\\n  -o json | jq -r '\"Application Name: \" + .metadata.name + \n  \"\\nApplication\
    \ Namespace: \"+ .metadata.namespace + \n  \"\\nLast Sync Start Time: \" + .status.operationState.finishedAt\
    \ + \n  \"\\nLast Sync Finish Time: \" + .status.operationState.startedAt + \n\
    \  \"\\nLast Sync Status: \" + .status.operationState.phase + \n  \"\\nLast Sync\
    \ Message: \" + .status.operationState.message'\n\n\nBy breaking down the command\
    \ into multiple lines and adding comments, newer or less experienced devops engineers\
    \ can better understand what each part of the command does. This helps to improve\
    \ readability and comprehension, making it easier for them to learn and work with\
    \ the command."
  name: fetch_argocd_application_last_sync_operation_details_for_application
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: DevOps
    or SREs may use this command to gather information about a specific application
    deployed with ArgoCD in order to identify potential issues causing the CrashLoopBackoff
    events.


    2. Investigating deployment synchronization issues: If an application deployment
    is not synchronizing properly with ArgoCD, DevOps or SREs can use this command
    to retrieve details about the last synchronization and identify any discrepancies.


    3. Monitoring application status: DevOps or SREs may use this command to regularly
    check the status of applications deployed with ArgoCD, ensuring they are running
    smoothly and have the correct configuration.


    4. Auditing application deployments: This command can be used to audit and track
    changes in application deployments managed by ArgoCD, providing valuable insights
    for compliance and security purposes.


    5. Automating reporting and alerting: DevOps or SREs can use this command to gather
    information about ArgoCD-managed applications and automate reporting or alerting
    mechanisms based on specific criteria or thresholds.'
- command: kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o json | jq -r '[.status.resources[] | select(.health.status
    != null) | select(.health.status != "Healthy") | {name,kind,namespace,health}]'
  doc_links: '

    - [Argo CD Documentation](https://argoproj.github.io/argo-cd/){:target="_blank"}

    - [kubectl Get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [JSON Processing with jq](https://stedolan.github.io/jq/tutorial/){:target="_blank"}'
  explanation: This command retrieves the status of an application in a specified
    namespace using Argo CD, filtering for resources that are not healthy and displaying
    their name, kind, namespace, and health status in JSON format. The results are
    then reformatted using jq to display only the relevant information.
  multi_line_details: "\n# This command retrieves the status of a specific application\
    \ in a given namespace using kubectl and jq\n# Replace ${APPLICATION} with the\
    \ name of the application you want to retrieve\n# Replace ${APPLICATION_APP_NAMESPACE}\
    \ with the namespace where the application resides\n# Replace ${CONTEXT} with\
    \ the desired Kubernetes context\n\n# First, use kubectl to get the details of\
    \ the specified application in JSON format\nkubectl get applications.argoproj.io\
    \ ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE} --context ${CONTEXT} -o json\
    \ \\\n  # Pipe the output to jq (a command-line JSON processor) to filter the\
    \ status of resources that are not healthy\n  | jq -r '[.status.resources[] \n\
    \           | select(.health.status != null) \n           | select(.health.status\
    \ != \"Healthy\") \n           | {name,kind,namespace,health}]'\n"
  name: fetch_unhealthy_argocd_application_resources_for_application
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or Site Reliability Engineer might use this command to identify unhealthy resources
    in a specific namespace, allowing them to determine the cause of the CrashLoopBackoff
    and take appropriate action to rectify the issue.


    2. Monitoring application health in a multi-tenant cluster: When managing multiple
    applications within a single Kubernetes cluster, DevOps or SREs may utilize this
    command to regularly check the health status of resources in different namespaces,
    enabling them to proactively address any issues that arise.


    3. Performing post-deployment validation: After deploying a new version of an
    application using Argo CD, a DevOps or SRE might use this command to verify the
    health of the resources in the namespace, ensuring that the deployment was successful
    and that all components are functioning as expected.


    4. Investigating intermittent performance issues: In the event of sporadic performance
    problems with a specific application, a DevOps or Site Reliability Engineer may
    leverage this command to assess the health status of resources in the relevant
    namespace, aiding in the identification of potential causes for the fluctuations
    in performance.


    5. Ensuring high availability and reliability of critical services: For essential
    services running on Kubernetes, such as databases or caching systems, DevOps or
    SREs can employ this command to monitor the health of resources in their respective
    namespaces, allowing them to maintain the reliability and availability of these
    crucial components.'
- command: kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o json | jq -r '[.status.resources[] | select(.health.status
    != null) | select(.health.status != "Healthy") | {name,kind,namespace,health}]'
  doc_links: '

    - [Argo CD Documentation](https://argoproj.github.io/argo-cd/){:target="_blank"}

    - [kubectl Get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [JSON Processing with jq](https://stedolan.github.io/jq/tutorial/){:target="_blank"}'
  explanation: This command retrieves the status of an application in a specified
    namespace using Argo CD, filtering for resources that are not healthy and displaying
    their name, kind, namespace, and health status in JSON format. The results are
    then reformatted using jq to display only the relevant information.
  multi_line_details: "\n# This command retrieves the status of a specific application\
    \ in a given namespace using kubectl and jq\n# Replace ${APPLICATION} with the\
    \ name of the application you want to retrieve\n# Replace ${APPLICATION_APP_NAMESPACE}\
    \ with the namespace where the application resides\n# Replace ${CONTEXT} with\
    \ the desired Kubernetes context\n\n# First, use kubectl to get the details of\
    \ the specified application in JSON format\nkubectl get applications.argoproj.io\
    \ ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE} --context ${CONTEXT} -o json\
    \ \\\n  # Pipe the output to jq (a command-line JSON processor) to filter the\
    \ status of resources that are not healthy\n  | jq -r '[.status.resources[] \n\
    \           | select(.health.status != null) \n           | select(.health.status\
    \ != \"Healthy\") \n           | {name,kind,namespace,health}]'\n"
  name: fetch_unhealthy_argocd_application_resources_for_application
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or Site Reliability Engineer might use this command to identify unhealthy resources
    in a specific namespace, allowing them to determine the cause of the CrashLoopBackoff
    and take appropriate action to rectify the issue.


    2. Monitoring application health in a multi-tenant cluster: When managing multiple
    applications within a single Kubernetes cluster, DevOps or SREs may utilize this
    command to regularly check the health status of resources in different namespaces,
    enabling them to proactively address any issues that arise.


    3. Performing post-deployment validation: After deploying a new version of an
    application using Argo CD, a DevOps or SRE might use this command to verify the
    health of the resources in the namespace, ensuring that the deployment was successful
    and that all components are functioning as expected.


    4. Investigating intermittent performance issues: In the event of sporadic performance
    problems with a specific application, a DevOps or Site Reliability Engineer may
    leverage this command to assess the health status of resources in the relevant
    namespace, aiding in the identification of potential causes for the fluctuations
    in performance.


    5. Ensuring high availability and reliability of critical services: For essential
    services running on Kubernetes, such as databases or caching systems, DevOps or
    SREs can employ this command to monitor the health of resources in their respective
    namespaces, allowing them to maintain the reliability and availability of these
    crucial components.'
- command: 'for deployment_name in $(kubectl get deployments -l argocd.argoproj.io/instance=${APPLICATION_TARGET_NAMESPACE}_${APPLICATION}
    -o=custom-columns=NAME:.metadata.name --no-headers -n ${APPLICATION_TARGET_NAMESPACE});
    do echo "\nDEPLOYMENT NAME: $deployment_name \n" && kubectl logs deployment/$deployment_name
    --tail=50 -n ${APPLICATION_TARGET_NAMESPACE} | grep -E ''${ERROR_PATTERN}''; done'
  doc_links: '

    - [Kubernetes documentation on managing deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubectl documentation on retrieving logs](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}'
  explanation: This command retrieves the names of all deployments in a specific namespace
    and then prints out the logs for each deployment. It also includes a filtering
    feature to only display logs that match a certain error pattern.
  multi_line_details: "\n# Loop through all the deployments with a specific label\
    \ matching the target namespace and application\nfor deployment_name in $(kubectl\
    \ get deployments -l argocd.argoproj.io/instance=${APPLICATION_TARGET_NAMESPACE}_${APPLICATION}\
    \ -o=custom-columns=NAME:.metadata.name --no-headers -n ${APPLICATION_TARGET_NAMESPACE});\
    \ do \n    # Print the current deployment name\n    echo \"\\nDEPLOYMENT NAME:\
    \ $deployment_name \\n\" \n    # Display the last 50 lines of logs for the current\
    \ deployment and filter for any errors based on the defined pattern\n    kubectl\
    \ logs deployment/$deployment_name --tail=50 -n ${APPLICATION_TARGET_NAMESPACE}\
    \ | grep -E '${ERROR_PATTERN}'\ndone\n\n\nThis multi-line command will help in\
    \ understanding the purpose of each step and make it easier to troubleshoot and\
    \ modify the command as needed."
  name: scan_for_errors_in_pod_logs_related_to_argocd_application_application
  when_is_it_useful: '1. Investigating sudden application crashes in a Kubernetes
    cluster and identifying the root cause of the CrashLoopBackoff events.


    2. Monitoring the health and performance of multiple deployments within a specific
    namespace and troubleshooting any errors or issues that arise.


    3. Troubleshooting and diagnosing issues related to application errors, spikes
    in resource consumption, or unexpected behavior within Kubernetes deployments.


    4. Analyzing and debugging log data to identify patterns or trends related to
    specific errors or issues across multiple deployments in a namespace.


    5. Proactively monitoring and investigating potential security or compliance-related
    concerns within Kubernetes deployments by analyzing logs for any alarming patterns
    or anomalies.'
- command: 'for deployment_name in $(kubectl get deployments -l argocd.argoproj.io/instance=${APPLICATION_TARGET_NAMESPACE}_${APPLICATION}
    -o=custom-columns=NAME:.metadata.name --no-headers -n ${APPLICATION_TARGET_NAMESPACE});
    do echo "\nDEPLOYMENT NAME: $deployment_name \n" && kubectl logs deployment/$deployment_name
    --tail=50 -n ${APPLICATION_TARGET_NAMESPACE} | grep -E ''${ERROR_PATTERN}''; done'
  doc_links: '

    - [Kubernetes documentation on managing deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubectl documentation on retrieving logs](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}'
  explanation: This command retrieves the names of all deployments in a specific namespace
    and then prints out the logs for each deployment. It also includes a filtering
    feature to only display logs that match a certain error pattern.
  multi_line_details: "\n# Loop through all the deployments with a specific label\
    \ matching the target namespace and application\nfor deployment_name in $(kubectl\
    \ get deployments -l argocd.argoproj.io/instance=${APPLICATION_TARGET_NAMESPACE}_${APPLICATION}\
    \ -o=custom-columns=NAME:.metadata.name --no-headers -n ${APPLICATION_TARGET_NAMESPACE});\
    \ do \n    # Print the current deployment name\n    echo \"\\nDEPLOYMENT NAME:\
    \ $deployment_name \\n\" \n    # Display the last 50 lines of logs for the current\
    \ deployment and filter for any errors based on the defined pattern\n    kubectl\
    \ logs deployment/$deployment_name --tail=50 -n ${APPLICATION_TARGET_NAMESPACE}\
    \ | grep -E '${ERROR_PATTERN}'\ndone\n\n\nThis multi-line command will help in\
    \ understanding the purpose of each step and make it easier to troubleshoot and\
    \ modify the command as needed."
  name: scan_for_errors_in_pod_logs_related_to_argocd_application_application
  when_is_it_useful: '1. Investigating sudden application crashes in a Kubernetes
    cluster and identifying the root cause of the CrashLoopBackoff events.


    2. Monitoring the health and performance of multiple deployments within a specific
    namespace and troubleshooting any errors or issues that arise.


    3. Troubleshooting and diagnosing issues related to application errors, spikes
    in resource consumption, or unexpected behavior within Kubernetes deployments.


    4. Analyzing and debugging log data to identify patterns or trends related to
    specific errors or issues across multiple deployments in a namespace.


    5. Proactively monitoring and investigating potential security or compliance-related
    concerns within Kubernetes deployments by analyzing logs for any alarming patterns
    or anomalies.'
- command: kubectl describe applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Documentation: Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation: kube-config file](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}'
  explanation: This command provides a detailed description of an application called
    ${APPLICATION} within the namespace ${APPLICATION_APP_NAMESPACE} using the Kubernetes
    cluster defined by ${CONTEXT}. It can be used to troubleshoot and understand the
    configuration and status of the application.
  multi_line_details: "\n# Describe the ArgoCD application by using the kubectl command\n\
    # Replace ${APPLICATION} with the name of the specific ArgoCD application\n# Replace\
    \ ${APPLICATION_APP_NAMESPACE} with the namespace where the application is located\n\
    # Replace ${CONTEXT} with the Kubernetes context where the application is running\n\
    \nkubectl describe applications.argoproj.io ${APPLICATION} \\ # Use the describe\
    \ command to get detailed information about the specified ArgoCD application\n\
    \  -n ${APPLICATION_APP_NAMESPACE} \\ # Specify the namespace of the application\
    \ using the -n flag\n  --context ${CONTEXT} # Use the --context flag to specify\
    \ the Kubernetes context where the application is running\n"
  name: fully_describe_argocd_application_application
  when_is_it_useful: '1. Investigating a Kubernetes CrashLoopBackoff event for the
    ${APPLICATION} within the ${APPLICATION_APP_NAMESPACE} namespace to identify the
    root cause of the issue.

    2. Checking the status and configuration of the ${APPLICATION} after a recent
    deployment or update to ensure it is running as expected.

    3. Troubleshooting performance issues with the ${APPLICATION} by examining its
    configuration and current status in the Kubernetes cluster.

    4. Verifying that the resources and dependencies required by the ${APPLICATION}
    are correctly configured and accessible within the Kubernetes cluster.

    5. Understanding the overall health and status of the ${APPLICATION} within the
    Kubernetes cluster to proactively identify any potential issues before they impact
    users or services.'
- command: kubectl describe applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Documentation: Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation: kube-config file](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}'
  explanation: This command provides a detailed description of an application called
    ${APPLICATION} within the namespace ${APPLICATION_APP_NAMESPACE} using the Kubernetes
    cluster defined by ${CONTEXT}. It can be used to troubleshoot and understand the
    configuration and status of the application.
  multi_line_details: "\n# Describe the ArgoCD application by using the kubectl command\n\
    # Replace ${APPLICATION} with the name of the specific ArgoCD application\n# Replace\
    \ ${APPLICATION_APP_NAMESPACE} with the namespace where the application is located\n\
    # Replace ${CONTEXT} with the Kubernetes context where the application is running\n\
    \nkubectl describe applications.argoproj.io ${APPLICATION} \\ # Use the describe\
    \ command to get detailed information about the specified ArgoCD application\n\
    \  -n ${APPLICATION_APP_NAMESPACE} \\ # Specify the namespace of the application\
    \ using the -n flag\n  --context ${CONTEXT} # Use the --context flag to specify\
    \ the Kubernetes context where the application is running\n"
  name: fully_describe_argocd_application_application
  when_is_it_useful: '1. Investigating a Kubernetes CrashLoopBackoff event for the
    ${APPLICATION} within the ${APPLICATION_APP_NAMESPACE} namespace to identify the
    root cause of the issue.

    2. Checking the status and configuration of the ${APPLICATION} after a recent
    deployment or update to ensure it is running as expected.

    3. Troubleshooting performance issues with the ${APPLICATION} by examining its
    configuration and current status in the Kubernetes cluster.

    4. Verifying that the resources and dependencies required by the ${APPLICATION}
    are correctly configured and accessible within the Kubernetes cluster.

    5. Understanding the overall health and status of the ${APPLICATION} within the
    Kubernetes cluster to proactively identify any potential issues before they impact
    users or services.'
