commands:
- command: 'kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o jsonpath=''Application Name: {.metadata.name}, Sync Status:
    {.status.sync.status}, Health Status: {.status.health.status}, Message: {.status.conditions[].message}'''
  doc_links: '- [Kubernetes Documentation on the `kubectl get` Command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [JSONPath Overview and Reference Guide](https://goessner.net/articles/JsonPath/){:target="_blank"}'
  explanation: '


    This command, kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o jsonpath=''Application Name: {.metadata.name}, Sync Status:
    {

    .status.sync.status}, Health Status: {.status.health.status}, Message: {.status.conditions[].message}'',
    allows you to retrieve information about a specific application from the Kubernetes
    cluster. The ${APPLICATION} argument specifies the application name, the ${APPLICATION_APP_NAMESPACE}
    argument specifies which namespace it should look in for that application, and
    the --context ${CONTEXT} argument sets the context to use when making the request.
    The -o jsonpath argument is used to output the response data in the form of a
    JSON-formatted string, with the data stored in fields labeled ''Application Name'',
    ''Sync Status'', ''Health Status'', and ''Message''. All of this combined information
    will give you a comprehensive description of your application on the Kubernetes
    cluster.'
  multi_line_details: "\n\n# This command checks for information of the application\
    \ with name $APPLICATION based on the given context and namespace. \n# The output\
    \ is returned in jsonpath format.\n\n# First step, retrieve the information from\
    \ Kubernetes\nkubectl get applications.argoproj.io ${APPLICATION} \\\n-n ${APPLICATION_APP_NAMESPACE}\
    \ \\\n--context ${CONTEXT}\n\n# Second step, provide desired output format using\
    \ -o jsonpatch option\nkubectl get applications.argoproj.io ${APPLICATION} \\\n\
    -n ${APPLICATION_APP_NAMESPACE} \\\n--context ${CONTEXT} \\\n-o jsonpath='Application\
    \ Name: {.metadata.name}, Sync Status: {.status.sync.status}, Health Status: {.status.health.status},\
    \ Message: {.status.conditions[].message}'"
  name: fetch_argocd_application_sync_status_health
- command: 'kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o json | jq -r ''"Application Name: " + .metadata.name +
    "

    Application Namespace: "+ .metadata.namespace + "

    Last Sync Start Time: " + .status.operationState.finishedAt + "

    Last Sync Finish Time: " + .status.operationState.startedAt + "

    Last Sync Status: " + .status.operationState.phase + "

    Last Sync Message: " + .status.operationState.message'''
  doc_links: '- [Kubernetes Documentation - kubectl Overview](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}'
  explanation: "\n\nThis command is using the Kubernetes command line tool \"kubectl\"\
    \ to get information on an application created with Argoproj. In your command,\
    \ you specified that this application exists within a specified namespace (APPLICATION_APP_NAMESPACE)\
    \ and context (CONTEXT). Using the json output of the command, you are then piping\
    \ it through a \"jq\" filter which formats it into the following output: \nApplication\
    \ Name: [The name of your application]\nApplication Namespace: [The namescope\
    \ of your application]\nLast Sync Start Time: [When the synchronization of your\
    \ app began]\nLast Sync Finish Time: [When the synchronization of your app ended]\n\
    Last Sync Status: [Whether the synchronization was successful or not]\nLast Sync\
    \ Message: [Any additional messages related to the synchronization]"
  multi_line_details: "\n#This command retrieves an application (named ${APPLICATION})\
    \ in ${APPLICATION_APP_NAMESPACE} using the specified context (${CONTEXT}) and\
    \ provides its name, namespace, last sync start and finish times & status & message\
    \ in a JSON format.\n#The command is then using jq to output the information into\
    \ human-readable strings:\nkubectl get applications.argoproj.io ${APPLICATION}\
    \ -n ${APPLICATION_APP_NAMESPACE} --context ${CONTEXT} -o json \\ \n\t| jq -r\
    \ '\"Application Name: \" + .metadata.name + \"\\n\n\tApplication Namespace: \"\
    + .metadata.namespace + \"\\n\n\tLast Sync Start Time: \" + .status.operationState.finishedAt\
    \ + \"\\n\n\tLast Sync Finish Time: \" + .status.operationState.startedAt + \"\
    \\n\n\tLast Sync Status: \" + .status.operationState.phase + \"\\n\n\tLast Sync\
    \ Message: \" + .status.operationState.message'"
  name: fetch_argocd_application_last_sync_operation_details
- command: kubectl get applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT} -o json | jq -r '[.status.resources[] | select(.health.status
    != null) | select(.health.status != "Healthy") | {name,kind,namespace,health}]'
  doc_links: '- [Kubernetes Command-Line Tool Reference](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Objects Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: '


    This command allows you to view the applications (running in Kubernetes) from
    a specified namespace on a given context. It produces a JSON output giving a list
    of any resources that are not healthy or have a null health status. The name,
    kind and namespace of each unhealthy resource is provided in the output. This
    can be useful for quickly identifying potential issues or ensuring that all resources
    within an application are running properly.'
  multi_line_details: "\n\n# Get application resource from argoproj.io\nkubectl get\
    \ applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE} \\\n\
    \  # Specify the context to execute the command in\n  --context ${CONTEXT} \\\n\
    \  # Output the application details in JSON format for us to parse\n  -o json\
    \ \\\n  # Pass the output into jq, a powerful tool for filtering and manipulating\
    \ data\n  | jq -r '[.status.resources[] \\\n      # Filter only the resources\
    \ with an associated heath status\n      | select(.health.status != null) \\\n\
    \        # Further filter out those that are Healthy\n        | select(.health.status\
    \ != \"Healthy\") \\\n          # Select certain values to display as a result\n\
    \          | {name,kind,namespace,health}]'"
  name: fetch_unhealthy_argocd_application_resources
- command: "for deployment_name in $(kubectl get deployments -l argocd.argoproj.io/instance=${APPLICATION_TARGET_NAMESPACE}_${APPLICATION}\
    \ -o=custom-columns=NAME:.metadata.name --no-headers -n ${APPLICATION_TARGET_NAMESPACE});\
    \ do echo \"\nDEPLOYMENT NAME: $deployment_name \n\" && kubectl logs deployment/$deployment_name\
    \ --tail=50 -n ${APPLICATION_TARGET_NAMESPACE} | grep -E '${ERROR_PATTERN}'; done"
  doc_links: '- [Kubectl get deployments command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-kube-deployment){:target="_blank"}

    - [kubectl logs command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Grep command](https://www.tutorialspoint.com/unix_commands/grep.htm){:target="_blank"}'
  explanation: '


    This command allows you to access information about deployments of a specific
    application on Kubernetes. It can be used to check for error messages related
    to that application by finding any messages containing the given ERROR_PATTERN
    string. After identifying each deployment belonging to that application, the command
    prints out the deployment name then looks at the past 50 log lines from the deployment
    for any errors or warnings. This provides a useful way to troubleshoot applications
    running on Kubernetes and locate errors or warnings quickly.'
  multi_line_details: "\n\n#This command is used to collect the logs from a deployment\
    \ and check if it contains a certain string pattern (example: an error message).\n\
    \n#Fetch all deployments with label argocd.argoproj.io/instance as defined by\
    \ the APLICATION_TARGET_NAMESPACE & APPLICATION variables and store each name\
    \ in the deployment_name variable\nfor deployment_name in $(kubectl get deployments\
    \ -l argocd.argoproj.io/instance=${APPLICATION_TARGET_NAMESPACE}_${APPLICATION}\
    \ -o=custom-columns=NAME:.metadata.name --no-headers -n ${APPLICATION_TARGET_NAMESPACE});\
    \ \n\ndo \n    #Print each of the deployment names fetched in the step above\n\
    \    echo \"DEPLOYMENT NAME: $deployment_name \n\" \n    #Retrieve the last 50\
    \ entries of the logs for that name deployment\n    kubectl logs deployment/$deployment_name\
    \ --tail=50 -n ${APPLICATION_TARGET_NAMESPACE} | \n    \n    #Grep through it\
    \ to find the ERROR_PATTERN as defined above\n    grep -E '${ERROR_PATTERN}';\
    \ \n\ndone"
  name: scan_for_errors_in_pod_logs_related_to_argocd_application_deployments
- command: kubectl describe applications.argoproj.io ${APPLICATION} -n ${APPLICATION_APP_NAMESPACE}
    --context ${CONTEXT}
  doc_links: '- [Kubernetes Documentation on ''kubectl descibe'' command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#describe){:target="_blank"}

    - [Kubernetes Documentation on Kubernetes contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: '


    This command is used to view information about a specific Argo application in
    the Kubernetes cluster. In this command, "kubectl" is a tool used to control and
    manage applications in the Kubernetes cluster. "describe" is the action being
    taken on the Argo application defined by the ${APPLICATION} parameter. The application''s
    namespace is also specified by the ${APPLICATION_APP_NAMESPACE} parameter. The
    command will be executed in the context defined by the ${CONTEXT} parameter.  With
    this command, you can view detailed information regarding the status and configuration
    of the specified Argo application.'
  multi_line_details: "\n\n# In this multi-line command we are describing an Argo\
    \ Application from Kubernetes. \n# The context flag allows kubectl to use a context\
    \ stored in the ${KUBECONFIG} file.\n# If not specified, it will default to the\
    \ current context.\nKUBECONFIG=${KUBECONFIG} # Optional. Needed if the kubeconfig\
    \ file is different from the default path. \nCONTEXT=${CONTEXT} # Required. Specifies\
    \ which context from the KUBECONFIG to be used. \nAPPLICATION=${APPLICATION} #\
    \ Required. Specifues the application name of the Argo Application to be described.\
    \ \nAPPLICATION_APP_NAMESPACE=${APPLICATION_APP_NAMESPACE} #Required. Specifies\
    \ the namespace the Argo Application belongs to.\n\nkubectl \\\n   --context ${CONTEXT}\
    \ \\\n   describe applications.argoproj.io ${APPLICATION} \\\n   -n ${APPLICATION_APP_NAMESPACE}"
  name: fully_describe_argocd_application
