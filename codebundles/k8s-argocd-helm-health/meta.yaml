commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nSync Status:\t\t" + .status.sync.status + "\nHealth Status:\t\t" + .status.health.status'
  doc_links: '

    - [Kubernetes Documentation on kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation on Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation on Configuring kubectl](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    in the specified namespace and context, then uses the 'jq' tool to format the
    output in a human-readable way, including the resource name, sync status, and
    health status.
  multi_line_details: '# Use kubectl command to get the specified resource in the
    given namespace and context

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json |


    # Pipe the output of the previous command to jq command to filter and format the
    json response

    jq -r ''.items[] | select(.spec.source.helm != null) |


    # Extract and format the desired fields from the json response

    "\nName:\t\t\t" + .metadata.name +

    "\nSync Status:\t\t" + .status.sync.status +

    "\nHealth Status:\t\t" + .status.health.status'''
  name: fetch_all_available_argocd_helm_releases
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nTarget Revision:\t" + .spec.source.targetRevision + "\nAttempted Revision:\t"
    + .status.sync.revision + "\nSync Status:\t\t" + .status.sync.status + "\nOperational
    State:\t" + .status.operationState.message'
  doc_links: '

    '
  explanation: This command retrieves information about a specific Kubernetes resource
    in a specific namespace and context, filtering for resources related to Helm charts
    and displaying their name, target revision, attempted revision, sync status, and
    operational state using a JSON output format.
  multi_line_details: '```bash

    # Set the resource name to be fetched

    RESOURCE_NAME=pods


    # Set the namespace to look for the resource

    NAMESPACE=default


    # Set the context to specify which cluster to work with

    CONTEXT=cluster-1


    # Use kubectl to get the specified resource in the specified namespace and context,
    output as JSON

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json \


    # Pipe the output into jq to filter and format the data

    | jq -r ''.items[] | select(.spec.source.helm != null) |


    # Select specific fields and format them with new lines and tabs

    "\nName:\t\t\t" + .metadata.name +

    "\nTarget Revision:\t" + .spec.source.targetRevision +

    "\nAttempted Revision:\t" + .status.sync.revision +

    "\nSync Status:\t\t" + .status.sync.status +

    "\nOperational State:\t" + .status.operationState.message''

    ```

    This multi-line command is broken down into separate steps with comments explaining
    each part of the command. It helps new users understand the purpose and usage
    of each cli command.'
  name: fetch_installed_argocd_helm_release_versions
