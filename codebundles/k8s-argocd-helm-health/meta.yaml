commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nSync Status:\t\t" + .status.sync.status + "\nHealth Status:\t\t" + .status.health.status'
  doc_links: '

    - [Kubernetes Documentation on kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation on Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation on Configuring kubectl](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    in the specified namespace and context, then uses the 'jq' tool to format the
    output in a human-readable way, including the resource name, sync status, and
    health status.
  multi_line_details: '# This section is used to get the specified resource in JSON
    format and then filter it using jq.

    json_output=$(kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
    -o=json | jq -r ''.items[] | select(.spec.source.helm != null)'')


    # This section is used to extract and display specific fields from the filtered
    JSON output.

    parsed_output=$(echo $json_output | jq -r ''"\nName:\t\t\t" + .metadata.name +
    "\nSync Status:\t\t" + .status.sync.status + "\nHealth Status:\t\t" + .status.health.status'')


    # Printing the parsed output

    echo $parsed_output'
  name: fetch_all_available_argocd_helm_releases
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nTarget Revision:\t" + .spec.source.targetRevision + "\nAttempted Revision:\t"
    + .status.sync.revision + "\nSync Status:\t\t" + .status.sync.status + "\nOperational
    State:\t" + .status.operationState.message'
  doc_links: '

    '
  explanation: This command retrieves information about a specific Kubernetes resource
    in a specific namespace and context, filtering for resources related to Helm charts
    and displaying their name, target revision, attempted revision, sync status, and
    operational state using a JSON output format.
  multi_line_details: "#!/bin/bash\n\n# This command retrieves the specified Kubernetes\
    \ resource in the specified namespace and context using `kubectl`\n# It then formats\
    \ the output using `jq` to display specific fields related to Helm releases\n\
    # The fields displayed include Name, Target Revision, Attempted Revision, Sync\
    \ Status, and Operational State\n\nkubectl get ${RESOURCE_NAME} -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o=json | \\\n  jq -r '.items[] | select(.spec.source.helm\
    \ != null) | \"\\nName:\\t\\t\\t\" + .metadata.name + \"\\nTarget Revision:\\\
    t\" + .spec.source.targetRevision + \"\\nAttempted Revision:\\t\" + .status.sync.revision\
    \ + \"\\nSync Status:\\t\\t\" + .status.sync.status + \"\\nOperational State:\\\
    t\" + .status.operationState.message'\n"
  name: fetch_installed_argocd_helm_release_versions
