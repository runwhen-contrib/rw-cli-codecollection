commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nSync Status:\t\t" + .status.sync.status + "\nHealth Status:\t\t" + .status.health.status'
  doc_links: '

    - [Kubernetes Documentation on kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation on Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation on Configuring kubectl](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    in the specified namespace and context, then uses the 'jq' tool to format the
    output in a human-readable way, including the resource name, sync status, and
    health status.
  multi_line_details: '```bash

    # Set the resource name, namespace, and context

    RESOURCE_NAME=example

    NAMESPACE=default

    CONTEXT=my-context


    # Get the resource in JSON format and pipe it to jq to process the data

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json | jq
    -r ''.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nSync Status:\t\t" + .status.sync.status + "\nHealth Status:\t\t" + .status.health.status''

    ```

    This command retrieves a specific Kubernetes resource (${RESOURCE_NAME}) in the
    specified namespace (${NAMESPACE}) and context (${CONTEXT}). It then processes
    the data using `jq` to filter out items with Helm as the source, and formats the
    output to display the resource name, sync status, and health status.'
  name: fetch_all_available_argocd_helm_releases
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nTarget Revision:\t" + .spec.source.targetRevision + "\nAttempted Revision:\t"
    + .status.sync.revision + "\nSync Status:\t\t" + .status.sync.status + "\nOperational
    State:\t" + .status.operationState.message'
  doc_links: '

    '
  explanation: This command retrieves information about a specific Kubernetes resource
    in a specific namespace and context, filtering for resources related to Helm charts
    and displaying their name, target revision, attempted revision, sync status, and
    operational state using a JSON output format.
  multi_line_details: '```bash

    # Description: Retrieve specific information for a Kubernetes resource in the
    specified namespace and context, then format it using jq.

    # Define variable for resource name

    RESOURCE_NAME=example

    # Define variable for namespace

    NAMESPACE=default

    # Define variable for context

    CONTEXT=cluster-1

    # Get resource details in JSON format and format the output using jq

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json | jq
    -r ''.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nTarget Revision:\t" + .spec.source.targetRevision + "\nAttempted Revision:\t"
    + .status.sync.revision + "\nSync Status:\t\t" + .status.sync.status + "\nOperational
    State:\t" + .status.operationState.message''

    ```'
  name: fetch_installed_argocd_helm_release_versions
