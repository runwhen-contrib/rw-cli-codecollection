commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nSync Status:\t\t" + .status.sync.status + "\nHealth Status:\t\t" + .status.health.status'
  doc_links: '

    - [Kubernetes Documentation on kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation on Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation on Configuring kubectl](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    in the specified namespace and context, then uses the 'jq' tool to format the
    output in a human-readable way, including the resource name, sync status, and
    health status.
  multi_line_details: "# Assigning variables for easier understanding and maintainability\n\
    RESOURCE_NAME=deployment\nNAMESPACE=default\nCONTEXT=production\n\n# Retrieving\
    \ the JSON output of the specified Kubernetes resource\nkubectl get ${RESOURCE_NAME}\
    \ -n ${NAMESPACE} --context ${CONTEXT} -o=json \\\n\n# Processing the JSON output\
    \ using jq to filter and format the data\n| jq -r '.items[] | select(.spec.source.helm\
    \ != null) | \n\"\\nName:\\t\\t\\t\" + .metadata.name + \n\"\\nSync Status:\\\
    t\\t\" + .status.sync.status + \n\"\\nHealth Status:\\t\\t\" + .status.health.status'"
  name: fetch_all_available_argocd_helm_releases
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nTarget Revision:\t" + .spec.source.targetRevision + "\nAttempted Revision:\t"
    + .status.sync.revision + "\nSync Status:\t\t" + .status.sync.status + "\nOperational
    State:\t" + .status.operationState.message'
  doc_links: '

    '
  explanation: This command retrieves information about a specific Kubernetes resource
    in a specific namespace and context, filtering for resources related to Helm charts
    and displaying their name, target revision, attempted revision, sync status, and
    operational state using a JSON output format.
  multi_line_details: "#!/bin/bash\n\n# Set the variables for resource name, namespace,\
    \ and context\nRESOURCE_NAME=\"your_resource_name\"\nNAMESPACE=\"your_namespace\"\
    \nCONTEXT=\"your_context\"\n\n# Use kubectl to get the specified resource in the\
    \ specified namespace and context,\n# then format the output as JSON and pipe\
    \ it into jq\nkubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}\
    \ -o=json | \\\n\n# Use jq to parse the JSON output and extract the desired information\n\
    jq -r '.items[] | \n    select(.spec.source.helm != null) | \n    \"\\nName:\\\
    t\\t\\t\" + .metadata.name + \n    \"\\nTarget Revision:\\t\" + .spec.source.targetRevision\
    \ + \n    \"\\nAttempted Revision:\\t\" + .status.sync.revision + \n    \"\\nSync\
    \ Status:\\t\\t\" + .status.sync.status + \n    \"\\nOperational State:\\t\" +\
    \ .status.operationState.message'"
  name: fetch_installed_argocd_helm_release_versions
