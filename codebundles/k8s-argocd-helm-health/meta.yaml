commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nSync Status:\t\t" + .status.sync.status + "\nHealth Status:\t\t" + .status.health.status'
  doc_links: '

    - [Kubectl Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [JQ Documentation](https://stedolan.github.io/jq/){:target="_blank"}

    - [Helm Documentation](https://v2.helm.sh/docs/){:target="_blank"}'
  explanation: '


    This command uses the kubectl command, which is used to manage resources in Kubernetes.
    It gets a specific resource from the Kubernetes cluster, located in the namespace
    specified. The specific resource type is provided by the variable RESOURCE_NAME.
    Then, it specifies the context of the Kubernetes cluster, using the CONTEXT parameter.


    It then outputs the data in JSON format and passes it to the jq tool, which is
    used to extract specific information from a json file. In this case, it filters
    the results to only show the names and sync/health status of Helm charts, and
    outputs the result into a readable format.'
  multi_line_details: "\n\n# This command is used to get information about a particular\
    \ Kubernetes resource in a given Namespace and Context. \nkubectl # Command used\
    \ to interact with the Kubernetes API (Application Programming Interface)\nget\
    \ ${RESOURCE_NAME} # The 'get' command will retrieve information about the specified\
    \ Kubernetes RESOURCE_NAME. \n-n ${NAMESPACE} # This flag specifies which Namespace\
    \ to use when querying the Kubernetes Cluster.\n--context ${CONTEXT} # The 'context'\
    \ flag retrieves the Kubernetes cluster information associated with the specified\
    \ CONTEXT.\n\n# The output format (-o) of the response from the Kubernetes cluster\
    \ will be changed to JSON using the '-o=json' flag.\n|  # This symbol passes the\
    \ output from the command on the left into the command on the right\njq -r '.items[]\
    \ | select(.spec.source.helm != null) | \"\\nName:\\t\\t\\t\" + .metadata.name\
    \ + \"\\nSync Status:\\t\\t\" + .status.sync.status + \"\\nHealth Status:\\t\\\
    t\" + .status.health.status' # jq (short for \"JSON Query\") is a command line\
    \ utility that can filter, transform, and reshape JSON data. Flags are used to\
    \ define how jq should further refine the output returned from the Kubernetes\
    \ cluster by filtering out only objects (.items[]) that have a 'spec.source.helm'\
    \ property that does not equal null, and then transforming and formatting the\
    \ remaining data into a readable string."
  name: fetch_all_available_argocd_helm_releases
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json
    | jq -r '.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nTarget Revision:\t" + .spec.source.targetRevision + "\nAttempted Revision:\t"
    + .status.sync.revision + "\nSync Status:\t\t" + .status.sync.status + "\nOperational
    State:\t" + .status.operationState.message'
  doc_links: '

    - [Kubernetes Documentation - kubectl overview](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Reference - Resource Kinds](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/#resource){:target="_blank"}

    - [Kubernetes Concepts - Namespaces](https://kubernetes.io/docs/tasks/administer-cluster/namespaces-walkthrough/){:target="_blank"}

    - [Kubernetes Docs - Working with Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#set-the-kubeconfig-context){:target="_blank"}

    - [Kubernetes Docs - jq Installation](https://stedolan.github.io/jq/download/){:target="_blank"}

    - [jq Manual - select()](https://stedolan.github.io/jq/manual/#selectselect){:target="_blank"}'
  explanation: '


    This command will retrieve information about the Helm-managed resource with name
    ${RESOURCE_NAME} in namespace ${NAMESPACE}, using the context ${CONTEXT}. It will
    return the Name, Target Revision (the revision which is desired to be achieved),
    Attempted Revision (the revision that was attempted at last sync operation) and
    the Sync Status of the resource (if the resource is considered to be out of sync).
    This information will be provided in json format. Additionally, any appropriate
    error messages will be returned if the operational state of the resource is not
    valid.'
  multi_line_details: '


    # Command to get Helm releases in a particular namespace, context, and output
    them as custom JSON format

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o=json  # Run
    ''kubectl get'' to get Helm-managed resources in the given namespace and context
    in a JSON format

    | jq -r ''.items[] | select(.spec.source.helm != null) | "\nName:\t\t\t" + .metadata.name
    + "\nTarget Revision:\t" + .spec.source.targetRevision + "\nAttempted Revision:\t"
    + .status.sync.revision + "\nSync Status:\t\t" + .status.sync.status + "\nOperational
    State:\t" + .status.operationState.message''  # Pipe the command into ''jq'',
    to filter out items with a Helm spec, and print out the information for each item
    in the format specified'
  name: fetch_installed_argocd_helm_release_versions
