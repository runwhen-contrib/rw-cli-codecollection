commands:
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/liveness
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [curl command](https://curl.se/docs/manpage.html){:target="_blank"}

    - [specific statefulset](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [namespace in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [liveness probe in Kubernetes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/){:target="_blank"}

    - [SSL certificate validation in curl](https://curl.se/docs/sslcerts.html){:target="_blank"}

    - [curl --max-time flag](https://curl.se/docs/manpage.html#--max-time){:target="_blank"}'
  explanation: This command uses kubectl to execute a curl command on a specific statefulset
    in a given namespace, checking the liveness of an application running at the specified
    localhost endpoint. The "-k" flag ignores SSL certificate validation and the "--max-time
    10" flag sets a maximum time for the request to complete.
  multi_line_details: "\n# Set the k8s context to be used for the command\nCONTEXT=${CONTEXT}\n\
    \n# Set the namespace where the statefulset is running\nNAMESPACE=${NAMESPACE}\n\
    \n# Set the name of the statefulset you want to execute the command in\nSTATEFULSET_NAME=${STATEFULSET_NAME}\n\
    \n# Use kubectl exec to run a command inside a Kubernetes pod\n# The command will\
    \ be run inside the specified statefulset and namespace\n# The command being executed\
    \ is a curl request to check the liveness of an API endpoint\n# -k flag is used\
    \ to allow insecure SSL connections\n# --max-time 10 sets the maximum time for\
    \ the request to complete\nkubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT}\
    \ -n ${NAMESPACE} -- \\\n  curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/liveness\n"
  name: check_artifactory_liveness_and_readiness_endpoints_in_namespace
  when_is_it_useful: '1. Troubleshooting a Kubernetes CrashLoopBackoff event: A DevOps
    or Site Reliability Engineer might use this command to check the liveness of an
    application running in a specific statefulset to determine if it is causing the
    CrashLoopBackoff event.


    2. Investigating high latency or errors in an application: The engineer may use
    this command to check the response time and health of an application running in
    Kubernetes, to diagnose any potential issues causing high latency or errors.


    3. Monitoring the health of a specific service or application in Kubernetes: This
    command can be used to regularly monitor the liveness of a critical service or
    application deployed in a Kubernetes cluster to ensure it is functioning properly.


    4. Conducting routine health checks during deployment or updates: When rolling
    out new changes or updates to an application in Kubernetes, the engineer may use
    this command to perform health checks and ensure the new version is healthy before
    making it live.


    5. Verifying the proper functioning of SSL certificates in a Kubernetes environment:
    The "-k" flag in the command can be used to ignore SSL certificate validation,
    allowing the engineer to test and verify the functionality of SSL certificates
    in a Kubernetes environment.'
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/liveness
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [curl command](https://curl.se/docs/manpage.html){:target="_blank"}

    - [specific statefulset](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [namespace in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [liveness probe in Kubernetes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/){:target="_blank"}

    - [SSL certificate validation in curl](https://curl.se/docs/sslcerts.html){:target="_blank"}

    - [curl --max-time flag](https://curl.se/docs/manpage.html#--max-time){:target="_blank"}'
  explanation: This command uses kubectl to execute a curl command on a specific statefulset
    in a given namespace, checking the liveness of an application running at the specified
    localhost endpoint. The "-k" flag ignores SSL certificate validation and the "--max-time
    10" flag sets a maximum time for the request to complete.
  multi_line_details: "\n# Set the k8s context to be used for the command\nCONTEXT=${CONTEXT}\n\
    \n# Set the namespace where the statefulset is running\nNAMESPACE=${NAMESPACE}\n\
    \n# Set the name of the statefulset you want to execute the command in\nSTATEFULSET_NAME=${STATEFULSET_NAME}\n\
    \n# Use kubectl exec to run a command inside a Kubernetes pod\n# The command will\
    \ be run inside the specified statefulset and namespace\n# The command being executed\
    \ is a curl request to check the liveness of an API endpoint\n# -k flag is used\
    \ to allow insecure SSL connections\n# --max-time 10 sets the maximum time for\
    \ the request to complete\nkubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT}\
    \ -n ${NAMESPACE} -- \\\n  curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/liveness\n"
  name: check_artifactory_liveness_and_readiness_endpoints_in_namespace
  when_is_it_useful: '1. Troubleshooting a Kubernetes CrashLoopBackoff event: A DevOps
    or Site Reliability Engineer might use this command to check the liveness of an
    application running in a specific statefulset to determine if it is causing the
    CrashLoopBackoff event.


    2. Investigating high latency or errors in an application: The engineer may use
    this command to check the response time and health of an application running in
    Kubernetes, to diagnose any potential issues causing high latency or errors.


    3. Monitoring the health of a specific service or application in Kubernetes: This
    command can be used to regularly monitor the liveness of a critical service or
    application deployed in a Kubernetes cluster to ensure it is functioning properly.


    4. Conducting routine health checks during deployment or updates: When rolling
    out new changes or updates to an application in Kubernetes, the engineer may use
    this command to perform health checks and ensure the new version is healthy before
    making it live.


    5. Verifying the proper functioning of SSL certificates in a Kubernetes environment:
    The "-k" flag in the command can be used to ignore SSL certificate validation,
    allowing the engineer to test and verify the functionality of SSL certificates
    in a Kubernetes environment.'
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/readiness
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Curl command in Linux](https://linuxize.com/post/curl-command-examples/){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Artifactory API documentation](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API){:target="_blank"}'
  explanation: This command is using kubectl to execute a curl request on a specific
    statefulset in a Kubernetes context and namespace, checking the readiness of an
    artifactory API endpoint with a maximum timeout of 10 seconds.
  multi_line_details: "\n# The 'kubectl exec' command allows us to execute a command\
    \ inside a running container in a Kubernetes pod.\n# We specify the statefulset,\
    \ context, and namespace using variables for flexibility and reusability.\n\n\
    kubectl exec statefulset/${STATEFULSET_NAME} \\ \n  --context=${CONTEXT} \\\n\
    \  -n ${NAMESPACE} \\\n  -- curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/readiness\n\
    \n\nIn this command, we're using `curl` to send an HTTP request to a local service\
    \ at `http://localhost:8091/artifactory/api/v1/system/readiness` with a maximum\
    \ timeout of 10 seconds. This can be useful for checking the readiness of an Artifactory\
    \ or similar service running within a Kubernetes cluster."
  name: check_artifactory_liveness_and_readiness_endpoints_in_namespace
  when_is_it_useful: '1. Monitoring and troubleshooting the health and performance
    of a Kubernetes statefulset hosting an artifactory API endpoint.

    2. Investigating and resolving issues related to network connectivity or DNS resolution
    within the Kubernetes cluster that may be affecting the readiness of the artifactory
    API endpoint.

    3. Identifying and mitigating potential resource constraints or bottlenecks in
    the Kubernetes environment that could be causing the artifactory API endpoint
    to become unresponsive.

    4. Implementing automated alerting and remediation processes to proactively detect
    and address any future readiness issues with the artifactory API endpoint.

    5. Collaborating with developers to optimize the performance and resilience of
    the artifactory API endpoint, potentially through changes to the underlying Kubernetes
    deployment configuration or resource allocation.'
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/readiness
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Curl command in Linux](https://linuxize.com/post/curl-command-examples/){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Artifactory API documentation](https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API){:target="_blank"}'
  explanation: This command is using kubectl to execute a curl request on a specific
    statefulset in a Kubernetes context and namespace, checking the readiness of an
    artifactory API endpoint with a maximum timeout of 10 seconds.
  multi_line_details: "\n# The 'kubectl exec' command allows us to execute a command\
    \ inside a running container in a Kubernetes pod.\n# We specify the statefulset,\
    \ context, and namespace using variables for flexibility and reusability.\n\n\
    kubectl exec statefulset/${STATEFULSET_NAME} \\ \n  --context=${CONTEXT} \\\n\
    \  -n ${NAMESPACE} \\\n  -- curl -k --max-time 10 http://localhost:8091/artifactory/api/v1/system/readiness\n\
    \n\nIn this command, we're using `curl` to send an HTTP request to a local service\
    \ at `http://localhost:8091/artifactory/api/v1/system/readiness` with a maximum\
    \ timeout of 10 seconds. This can be useful for checking the readiness of an Artifactory\
    \ or similar service running within a Kubernetes cluster."
  name: check_artifactory_liveness_and_readiness_endpoints_in_namespace
  when_is_it_useful: '1. Monitoring and troubleshooting the health and performance
    of a Kubernetes statefulset hosting an artifactory API endpoint.

    2. Investigating and resolving issues related to network connectivity or DNS resolution
    within the Kubernetes cluster that may be affecting the readiness of the artifactory
    API endpoint.

    3. Identifying and mitigating potential resource constraints or bottlenecks in
    the Kubernetes environment that could be causing the artifactory API endpoint
    to become unresponsive.

    4. Implementing automated alerting and remediation processes to proactively detect
    and address any future readiness issues with the artifactory API endpoint.

    5. Collaborating with developers to optimize the performance and resilience of
    the artifactory API endpoint, potentially through changes to the underlying Kubernetes
    deployment configuration or resource allocation.'
