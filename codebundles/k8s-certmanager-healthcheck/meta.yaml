commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    - [cert-manager documentation](https://cert-manager.io/docs/){:target="_blank"}

    - [SSL certificate status in Kubernetes](https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets){:target="_blank"}'
  explanation: This command retrieves the status of SSL certificates managed by cert-manager,
    filtering for only the ones that are ready and have a renewal time before the
    current time. It then outputs the namespace, URL, renewal time, and expiration
    time of each certificate in JSON format.
  multi_line_details: "# This command gets the certificates from cert-manager.io.\
    \ \n# It filters the certificates that are ready, have a renewalTime, and are\
    \ expired.\nkubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}\
    \ -ojson | \\\n    jq -r --arg now \"$(date +%Y-%m-%dT%H:%M:%SZ)\" '.items[] |\
    \ select(.status.conditions[] | select(.type == \"Ready\" and .status == \"True\"\
    )) | select(.status.renewalTime) | select((.status.notAfter | strptime(\"%Y-%m-%dT%H:%M:%SZ\"\
    ) | mktime) <= ($now | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime)) | \"Namespace:\"\
    \ + .metadata.namespace + \" URL:\" + .spec.dnsNames[0] + \" Renews:\" + .status.renewalTime\
    \ + \" Expires:\" + .status.notAfter'"
  name: get_namespace_certificate_summary_for_namespace_namespace
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)\n------------"'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [certificate requests](https://kubernetes.io/docs/concepts/cluster-administration/certificates/){:target="_blank"}

    - [specific context and namespace](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [jq](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve certificate requests from a specific
    context and namespace, then uses jq to filter the results and format them into
    a human-readable list showing the status and details of each certificate request.
  multi_line_details: "```bash\n# This command retrieves Certificate Requests from\
    \ cert-manager.io and filters them based on their status, then formats the output\
    \ using jq\n\n# Fetch Certificate Requests in JSON format\nkubectl get certificaterequests.cert-manager.io\
    \ --context=${CONTEXT} -n ${NAMESPACE} -o json | \\ \n# Use jq to process and\
    \ filter the JSON data\njq -r '.items[] | select(.status.conditions[] | select(.type\
    \ == \"Ready\" and .status != \"True\")) | {certRequest: .metadata.name, certificate:\
    \ (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:\
    \ (.status.conditions[] | select(.type == \"Ready\")).status, readyMessage: (.status.conditions[]\
    \ | select(.type == \"Ready\")).message, approvedStatus: (.status.conditions[]\
    \ | select(.type == \"Approved\")).status, approvedMessage: (.status.conditions[]\
    \ | select(.type == \"Approved\")).message} | \"\\nCertificateRequest: \\(.certRequest)\"\
    , \"Certificate: \\(.certificate)\", \"Issuer: \\(.issuer)\", \"Ready Status:\
    \ \\(.readyStatus)\", \"Ready Message: \\(.readyMessage)\", \"Approved Status:\
    \ \\(.approvedStatus)\", \"Approved Message: \\(.approvedMessage)\\n------------\"\
    '\n```"
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace
