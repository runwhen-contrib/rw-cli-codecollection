commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    - [cert-manager documentation](https://cert-manager.io/docs/){:target="_blank"}

    - [SSL certificate status in Kubernetes](https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets){:target="_blank"}'
  explanation: This command retrieves the status of SSL certificates managed by cert-manager,
    filtering for only the ones that are ready and have a renewal time before the
    current time. It then outputs the namespace, URL, renewal time, and expiration
    time of each certificate in JSON format.
  multi_line_details: "\n# Set the variables for context and namespace\nCONTEXT=my-context\n\
    NAMESPACE=my-namespace\n\n# Use kubectl to get the certificates from cert-manager.io\
    \ in JSON format\n# and pass it to jq to filter and format the output\nkubectl\
    \ get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE} -ojson\
    \ | \\\n  jq -r --arg now \"$(date +%Y-%m-%dT%H:%M:%SZ)\" '.items[] | \n  # Select\
    \ only certificates with ready status and renewal time\n  select(.status.conditions[]\
    \ | select(.type == \"Ready\" and .status == \"True\")) | \n  select(.status.renewalTime)\
    \ |\n  # Select only certificates that are expired or expiring\n  select((.status.notAfter\
    \ | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime) <= \n  ($now | strptime(\"%Y-%m-%dT%H:%M:%SZ\"\
    ) | mktime)) |\n  # Format the output to display namespace, URL, renewal time,\
    \ and expiration time\n  \"Namespace:\" + .metadata.namespace + \" URL:\" + .spec.dnsNames[0]\
    \ + \n  \" Renews:\" + .status.renewalTime + \" Expires:\" + .status.notAfter'\n\
    \n\nThis multi-line command not only sets the context and namespace, but also\
    \ breaks down the kubectl and jq commands into separate lines with comments to\
    \ explain what each part of the command does. This should help newer or less experienced\
    \ devops engineers understand and modify the command as needed."
  name: get_namespace_certificate_summary_for_namespace_namespace
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)\n------------"'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [certificate requests](https://kubernetes.io/docs/concepts/cluster-administration/certificates/){:target="_blank"}

    - [specific context and namespace](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [jq](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve certificate requests from a specific
    context and namespace, then uses jq to filter the results and format them into
    a human-readable list showing the status and details of each certificate request.
  multi_line_details: "\n# Set the context and namespace for the kubectl command\n\
    CONTEXT=my-context\nNAMESPACE=my-namespace\n\n# Use kubectl to get certificaterequests\
    \ in the specific context and namespace, then use jq to parse the output and filter\
    \ only the necessary information\nkubectl get certificaterequests.cert-manager.io\
    \ --context=${CONTEXT} -n ${NAMESPACE} -o json | \\\njq -r '.items[] | \nselect(.status.conditions[]\
    \ | select(.type == \"Ready\" and .status != \"True\")) | \n{\n  certRequest:\
    \ .metadata.name,\n  certificate: (.metadata.ownerReferences[].name),\n  issuer:\
    \ .spec.issuerRef.name,\n  readyStatus: (.status.conditions[] | select(.type ==\
    \ \"Ready\")).status,\n  readyMessage: (.status.conditions[] | select(.type ==\
    \ \"Ready\")).message,\n  approvedStatus: (.status.conditions[] | select(.type\
    \ == \"Approved\")).status,\n  approvedMessage: (.status.conditions[] | select(.type\
    \ == \"Approved\")).message\n} | \n\"\\nCertificateRequest: \\(.certRequest)\"\
    , \n\"Certificate: \\(.certificate)\",\n\"Issuer: \\(.issuer)\",\n\"Ready Status:\
    \ \\(.readyStatus)\",\n\"Ready Message: \\(.readyMessage)\",\n\"Approved Status:\
    \ \\(.approvedStatus)\",\n\"Approved Message: \\(.approvedMessage)\\n------------\"\
    '\n\nThis multi-line command breaks down the process into steps and includes comments\
    \ to provide a better understanding of each part of the command. This can be helpful\
    \ for newer or less experienced DevOps engineers who may not be familiar with\
    \ each component of the original single-line command."
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace
