commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    - [Kubectl reference page](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [Cert-manager reference page](https://docs.cert-manager.io/en/latest/){:target="_blank"}

    - [date command reference page](https://linux.die.net/man/1/date){:target="_blank"}

    - [jq reference page](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: '


    This command uses the kubectl command line tool to list all of the certificates
    in the given context and namespace. It then filters these certificates to only
    include those with a status of "Ready" and that will expire before a given date.
    Once it has filtered the certificates, it will print out their details including
    the namespace they reside in, the domain name(s), when they will need to be renewed,
    and when they will expire.'
  multi_line_details: '


    # This command is used to list cert-manager certificates (i.e., certificates requested
    and managed using cert-manager) in a Kubernetes cluster.

    # The --context option sets the specific cluster context that will be used to
    list the certificates

    CONTEXT="${CONTEXT}"


    # The -n option sets the namespace in which the certificate are being requested

    NAMESPACE="${NAMESPACE}"


    # Get all the Certificates in JSON format from the specified namespace

    CERTIFICATES_JSON=$(kubectl get certificates.cert-manager.io --context=${CONTEXT}
    -n ${NAMESPACE} -ojson)


    # Use jq to filter the output and select the right values for our needs

    RESULT=$(echo "${CERTIFICATES_JSON}" | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)"
    ''.items[] | select(.status.conditions[] | select(.type == "Ready" and .status
    == "True")) | select(.status.renewalTime) | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ")
    | mktime) <= ($now | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:"
    + .metadata.namespace + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime
    + " Expires:" + .status.notAfter'')


    # Echo the final result

    echo "${RESULT}"'
  name: get_namespace_certificate_summary_for_namespace_namespace
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)\n------------"'''
  doc_links: '

    - [Kubernetes Documentation for kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation for Certificate Request](https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/#create-a-certificate-signing-request-csr){:target="_blank"}

    - [JSON description](https://www.json.org/){:target="_blank"}

    - [jq website](https://stedolan.github.io/jq/){:target="_blank"}'
  explanation: '


    This command is used to display all certificate requests associated with a specific
    issuer in Kubernetes. It uses the kubectl command to get certificaterequests associated
    with the context, namespace, and .json file, and then uses the jq tool to filter
    those results according to precise criteria, such as type, status, and message
    content. The output of the command will return detailed information about each
    certificate request, including the name, associated certificate, issuer reference,
    readiness and approval statuses, and any additional messages related to that status.'
  multi_line_details: "\n\n# This command will print out a list of all CertificateRequests\
    \ related to\n# Cert-Manager in the given context and namespace, as well as their\
    \ associated\n# owners, issuers, and any statuses. \nkubectl get certificaterequests.cert-manager.io\
    \ \\\n    --context=${CONTEXT} \\                 # The kubernetes context where\
    \ this operation will happen\n    -n ${NAMESPACE} \\                      # The\
    \ namespace within that context \n    -o json | jq -r '.items[] |            #\
    \ Use the output from kubectl, pass it through jq \n                       select(.status.conditions[]\
    \ | \n                              select(.type == \"Ready\" and .status != \"\
    True\")) | \n                       {certRequest: .metadata.name, \n         \
    \               certificate: (.metadata.ownerReferences[].name), \n          \
    \              issuer: .spec.issuerRef.name, \n                        readyStatus:\
    \ (.status.conditions[] | select(.type == \"Ready\")).status, \n             \
    \           readyMessage: (.status.conditions[] | select(.type == \"Ready\")).message,\
    \ \n                        approvedStatus: (.status.conditions[] | select(.type\
    \ == \"Approved\")).status, \n                        approvedMessage: (.status.conditions[]\
    \ | select(.type == \"Approved\")).message} |        # Extract relevant pieces\
    \ of data\n                        \"\\nCertificateRequest: \\(.certRequest)\"\
    , \n                        \"Certificate: \\(.certificate)\", \n            \
    \            \"Issuer: \\(.issuer)\", \n                        \"Ready Status:\
    \ \\(.readyStatus)\", \n                        \"Ready Message: \\(.readyMessage)\"\
    , \n                        \"Approved Status: \\(.approvedStatus)\", \n     \
    \                   \"Approved Message: \\(.approvedMessage)\\n------------\"\
    ' # Output the data \n                        # in a human readable format"
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace
