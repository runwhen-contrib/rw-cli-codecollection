commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r '.items[] | select(.status.conditions[] | select(.type == "Ready"
    and .status == "True")) | select(.status.renewalTime) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '- [Kubernetes Documentation - Kubectl Reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands/){:target="_blank"}

    - [Kubernetes Documentation - Certificate Manager Configuration and Installation](https://cert-manager.io/docs/configuration/){:target="_blank"}

    - [JSONPath Syntax Documentation](https://goessner.net/articles/JsonPath/){:target="_blank"}'
  explanation: " \n\nThis command will query a Certificate Manager in a Kubernetes\
    \ environment, looking for certificates that are ready and active, and then output\
    \ information about them. It will output the namespace, the domain name it's associated\
    \ with, when it needs to be renewed, and when it expires. This is useful information\
    \ when deploying applications on the Kubernetes cluster that require secure TLS/SSL\
    \ certificates."
  multi_line_details: "\n# Get the certificate from cert-manager.io in the specified\
    \ context and namespace:\nkubectl get certificates.cert-manager.io \\ \n    --context=${CONTEXT}\
    \ \\\n    -n ${NAMESPACE} \\\n    -ojson \n\n# Filter for Ready certificate that\
    \ have a time to renewal set (renewalTime)\njq -r '.items[] | select(.status.conditions[]\
    \ | select(.type == \"Ready\" and .status == \"True\")) | select(.status.renewalTime)\
    \ | \"Namespace:\" + .metadata.namespace + \" URL:\" + .spec.dnsNames[0] + \"\
    \ Renews:\" + .status.renewalTime + \" Expires:\" + .status.notAfter'"
  name: get_namespace_certificate_summary
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "---\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)"'''
  doc_links: '- [Kubernetes getting started guide](https://kubernetes.io/docs/tutorials/kubernetes-basics/){:target="_blank"}

    - [Kubectl command reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [Kubernetes Contexts reference](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#use-contexts-in-a-kubeconfig-file){:target="_blank"}

    - [Cert Manager Installation guide](https://docs.cert-manager.io/en/latest/getting-started/install/k8s.html){:target="_blank"}

    - [JQ utility documentation](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: '


    This command uses the `kubectl` tool to get information from a CertificateRequest
    object in Kubernetes. This information is filtered based on the specified parameters
    such as the context and namespace - in this case `${CONTEXT}` and `${NAMESPACE}`.
    The output from `kubectl` is then piped to the `jq` command which selects items
    from the response based on whether the ''Ready'' or ''Approved'' conditions have
    a status of ''True''. Finally, the command prints out each item''s name, certificate,
    issuer, ready status, ready message, approved status, and approved message.'
  multi_line_details: "\n\n# Convert one-line command into a multi-line command adding\
    \ verbose comments to educate new users of Kubernetes and related cli commands.\n\
    # This command is used to get certificate requests from the Cert-manager system\
    \ \n\n# First, we need to specify the context and namespace to use with the kubectl\
    \ command \nCONTEXT=${CONTEXT}\nNAMESPACE=${NAMESPACE}\n\n# Now we can execute\
    \ our kubectl command \nkubectl get certificaterequests.cert-manager.io \\\n \
    \   --context=${CONTEXT} \\\n    -n ${NAMESPACE} \\\n    -o json\n\n# Pipe this\
    \ output to `jq` in order to filter the JSON output for relevant data\njq -r '.items[]\
    \ | select(.status.conditions[] | select(.type == \"Ready\" and .status != \"\
    True\")) | {certRequest: .metadata.name, certificate: (.metadata.ownerReferences[].name),\
    \ issuer: .spec.issuerRef.name, readyStatus: (.status.conditions[] | select(.type\
    \ == \"Ready\")).status, readyMessage: (.status.conditions[] | select(.type ==\
    \ \"Ready\")).message, approvedStatus: (.status.conditions[] | select(.type ==\
    \ \"Approved\")).status, approvedMessage: (.status.conditions[] | select(.type\
    \ == \"Approved\")).message} | \"---\\nCertificateRequest: \\(.certRequest)\"\
    , \"Certificate: \\(.certificate)\", \"Issuer: \\(.issuer)\", \"Ready Status:\
    \ \\(.readyStatus)\", \"Ready Message: \\(.readyMessage)\", \"Approved Status:\
    \ \\(.approvedStatus)\", \"Approved Message: \\(.approvedMessage)\"'"
  name: find_failed_certificate_requests_and_identify_issues
