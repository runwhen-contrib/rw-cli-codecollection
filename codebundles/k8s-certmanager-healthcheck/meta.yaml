commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    - [Kubectl reference page](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [Cert-manager reference page](https://docs.cert-manager.io/en/latest/){:target="_blank"}

    - [date command reference page](https://linux.die.net/man/1/date){:target="_blank"}

    - [jq reference page](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: '


    This command uses the kubectl command line tool to list all of the certificates
    in the given context and namespace. It then filters these certificates to only
    include those with a status of "Ready" and that will expire before a given date.
    Once it has filtered the certificates, it will print out their details including
    the namespace they reside in, the domain name(s), when they will need to be renewed,
    and when they will expire.'
  multi_line_details: '


    # This command is used to list cert-manager certificates (i.e., certificates requested
    and managed using cert-manager) in a Kubernetes cluster.

    # The --context option sets the specific cluster context that will be used to
    list the certificates

    CONTEXT="${CONTEXT}"


    # The -n option sets the namespace in which the certificate are being requested

    NAMESPACE="${NAMESPACE}"


    # Get all the Certificates in JSON format from the specified namespace

    CERTIFICATES_JSON=$(kubectl get certificates.cert-manager.io --context=${CONTEXT}
    -n ${NAMESPACE} -ojson)


    # Use jq to filter the output and select the right values for our needs

    RESULT=$(echo "${CERTIFICATES_JSON}" | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)"
    ''.items[] | select(.status.conditions[] | select(.type == "Ready" and .status
    == "True")) | select(.status.renewalTime) | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ")
    | mktime) <= ($now | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:"
    + .metadata.namespace + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime
    + " Expires:" + .status.notAfter'')


    # Echo the final result

    echo "${RESULT}"'
  name: get_namespace_certificate_summary_for_namespace_namespace_
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "---\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)"'''
  doc_links: '

    - [Kubernetes getting started guide](https://kubernetes.io/docs/tutorials/kubernetes-basics/){:target="_blank"}

    - [Kubectl command reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [Kubernetes Contexts reference](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#use-contexts-in-a-kubeconfig-file){:target="_blank"}

    - [Cert Manager Installation guide](https://docs.cert-manager.io/en/latest/getting-started/install/k8s.html){:target="_blank"}

    - [JQ utility documentation](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: '


    This command uses the `kubectl` tool to get information from a CertificateRequest
    object in Kubernetes. This information is filtered based on the specified parameters
    such as the context and namespace - in this case `${CONTEXT}` and `${NAMESPACE}`.
    The output from `kubectl` is then piped to the `jq` command which selects items
    from the response based on whether the ''Ready'' or ''Approved'' conditions have
    a status of ''True''. Finally, the command prints out each item''s name, certificate,
    issuer, ready status, ready message, approved status, and approved message.'
  multi_line_details: "\n\n# Convert one-line command into a multi-line command adding\
    \ verbose comments to educate new users of Kubernetes and related cli commands.\n\
    # This command is used to get certificate requests from the Cert-manager system\
    \ \n\n# First, we need to specify the context and namespace to use with the kubectl\
    \ command \nCONTEXT=${CONTEXT}\nNAMESPACE=${NAMESPACE}\n\n# Now we can execute\
    \ our kubectl command \nkubectl get certificaterequests.cert-manager.io \\\n \
    \   --context=${CONTEXT} \\\n    -n ${NAMESPACE} \\\n    -o json\n\n# Pipe this\
    \ output to `jq` in order to filter the JSON output for relevant data\njq -r '.items[]\
    \ | select(.status.conditions[] | select(.type == \"Ready\" and .status != \"\
    True\")) | {certRequest: .metadata.name, certificate: (.metadata.ownerReferences[].name),\
    \ issuer: .spec.issuerRef.name, readyStatus: (.status.conditions[] | select(.type\
    \ == \"Ready\")).status, readyMessage: (.status.conditions[] | select(.type ==\
    \ \"Ready\")).message, approvedStatus: (.status.conditions[] | select(.type ==\
    \ \"Approved\")).status, approvedMessage: (.status.conditions[] | select(.type\
    \ == \"Approved\")).message} | \"---\\nCertificateRequest: \\(.certRequest)\"\
    , \"Certificate: \\(.certificate)\", \"Issuer: \\(.issuer)\", \"Ready Status:\
    \ \\(.readyStatus)\", \"Ready Message: \\(.readyMessage)\", \"Approved Status:\
    \ \\(.approvedStatus)\", \"Approved Message: \\(.approvedMessage)\"'"
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace_
