commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    - [Cert-manager documentation](https://cert-manager.io/docs/){:target="_blank"}

    - [JSON parsing tutorial](https://www.tutorialspoint.com/python/python_json_processing.htm){:target="_blank"}'
  explanation: This command retrieves certificate information from the cert-manager
    within a specific context and namespace, and uses JSON parsing to select only
    the certificates that are ready for renewal or have expired. It then prints out
    details such as namespace, URL, renewal time, and expiration time for each selected
    certificate.
  multi_line_details: "\n# Assign the current context and namespace to variables for\
    \ easier readability\nCONTEXT=\"your_context_here\"\nNAMESPACE=\"your_namespace_here\"\
    \n\n# Get all certificates from cert-manager in the specified context and namespace\
    \ in JSON format\nkubectl get certificates.cert-manager.io --context=${CONTEXT}\
    \ -n ${NAMESPACE} -ojson \\\n| \n# Use jq to filter and format the output\njq\
    \ -r --arg now \"$(date +%Y-%m-%dT%H:%M:%SZ)\" '\n  .items[] | \n  # Select only\
    \ certificates that are ready\n  select(.status.conditions[] | select(.type ==\
    \ \"Ready\" and .status == \"True\")) | \n  # Select certificates with renewal\
    \ time and expiration date\n  select(.status.renewalTime) | \n  select((.status.notAfter\
    \ | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime) <= ($now | strptime(\"%Y-%m-%dT%H:%M:%SZ\"\
    ) | mktime)) | \n  # Format the output with relevant information\n  \"Namespace:\"\
    \ + .metadata.namespace + \" URL:\" + .spec.dnsNames[0] + \" Renews:\" + .status.renewalTime\
    \ + \" Expires:\" + .status.notAfter'\n\nThis multi-line command uses `kubectl`\
    \ and `jq` to retrieve and format information about certificates from the cert-manager.\
    \ It filters and displays relevant details such as namespace, URL, renewal time,\
    \ and expiration date. The comments provide explanations for each step to help\
    \ newer or less experienced devops engineers understand the command's functionality."
  name: get_namespace_certificate_summary_for_namespace_namespace
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: When
    a pod is in a CrashLoopBackoff state, it indicates that the container in the pod
    is constantly crashing and restarting. As a DevOps or Site Reliability Engineer,
    you would use this command to retrieve certificate information from cert-manager
    to check if any certificates have expired and are causing the CrashLoopBackoff
    events.


    2. Monitoring certificate renewals: As a part of regular maintenance tasks, DevOps
    or Site Reliability Engineers may need to monitor certificate renewals within
    their Kubernetes environment. This command can be used to quickly identify and
    track certificates that are due for renewal or have expired.


    3. Incident response: In the event of a security breach or incident, DevOps or
    Site Reliability Engineers may need to review all active certificates within a
    specific context and namespace to identify potential vulnerabilities. This command
    can help in identifying any expired or vulnerable certificates that need immediate
    attention.


    4. Compliance checks: Organizations often have policies and regulations in place
    regarding the expiration and renewal of certificates. DevOps or Site Reliability
    Engineers may perform regular compliance checks using this command to ensure that
    all certificates are up to date and in compliance with internal and external standards.


    5. Debugging connectivity issues: When troubleshooting connectivity or SSL/TLS
    handshake failures, DevOps or Site Reliability Engineers might use this command
    to gather details about the certificates in use, including their renewal and expiration
    times, to identify any potential causes of the issues.'
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    - [Cert-manager documentation](https://cert-manager.io/docs/){:target="_blank"}

    - [JSON parsing tutorial](https://www.tutorialspoint.com/python/python_json_processing.htm){:target="_blank"}'
  explanation: This command retrieves certificate information from the cert-manager
    within a specific context and namespace, and uses JSON parsing to select only
    the certificates that are ready for renewal or have expired. It then prints out
    details such as namespace, URL, renewal time, and expiration time for each selected
    certificate.
  multi_line_details: "\n# Assign the current context and namespace to variables for\
    \ easier readability\nCONTEXT=\"your_context_here\"\nNAMESPACE=\"your_namespace_here\"\
    \n\n# Get all certificates from cert-manager in the specified context and namespace\
    \ in JSON format\nkubectl get certificates.cert-manager.io --context=${CONTEXT}\
    \ -n ${NAMESPACE} -ojson \\\n| \n# Use jq to filter and format the output\njq\
    \ -r --arg now \"$(date +%Y-%m-%dT%H:%M:%SZ)\" '\n  .items[] | \n  # Select only\
    \ certificates that are ready\n  select(.status.conditions[] | select(.type ==\
    \ \"Ready\" and .status == \"True\")) | \n  # Select certificates with renewal\
    \ time and expiration date\n  select(.status.renewalTime) | \n  select((.status.notAfter\
    \ | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime) <= ($now | strptime(\"%Y-%m-%dT%H:%M:%SZ\"\
    ) | mktime)) | \n  # Format the output with relevant information\n  \"Namespace:\"\
    \ + .metadata.namespace + \" URL:\" + .spec.dnsNames[0] + \" Renews:\" + .status.renewalTime\
    \ + \" Expires:\" + .status.notAfter'\n\nThis multi-line command uses `kubectl`\
    \ and `jq` to retrieve and format information about certificates from the cert-manager.\
    \ It filters and displays relevant details such as namespace, URL, renewal time,\
    \ and expiration date. The comments provide explanations for each step to help\
    \ newer or less experienced devops engineers understand the command's functionality."
  name: get_namespace_certificate_summary_for_namespace_namespace
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: When
    a pod is in a CrashLoopBackoff state, it indicates that the container in the pod
    is constantly crashing and restarting. As a DevOps or Site Reliability Engineer,
    you would use this command to retrieve certificate information from cert-manager
    to check if any certificates have expired and are causing the CrashLoopBackoff
    events.


    2. Monitoring certificate renewals: As a part of regular maintenance tasks, DevOps
    or Site Reliability Engineers may need to monitor certificate renewals within
    their Kubernetes environment. This command can be used to quickly identify and
    track certificates that are due for renewal or have expired.


    3. Incident response: In the event of a security breach or incident, DevOps or
    Site Reliability Engineers may need to review all active certificates within a
    specific context and namespace to identify potential vulnerabilities. This command
    can help in identifying any expired or vulnerable certificates that need immediate
    attention.


    4. Compliance checks: Organizations often have policies and regulations in place
    regarding the expiration and renewal of certificates. DevOps or Site Reliability
    Engineers may perform regular compliance checks using this command to ensure that
    all certificates are up to date and in compliance with internal and external standards.


    5. Debugging connectivity issues: When troubleshooting connectivity or SSL/TLS
    handshake failures, DevOps or Site Reliability Engineers might use this command
    to gather details about the certificates in use, including their renewal and expiration
    times, to identify any potential causes of the issues.'
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)\n------------"'''
  doc_links: '

    '
  explanation: This command retrieves certificate requests from the cert-manager.io
    API for a specific context and namespace, then uses jq to filter and format the
    output in a human-readable way, including information about the certificate request,
    certificate, issuer, readiness status, approval status, and corresponding messages.
  multi_line_details: "\n# Set the context and namespace for the kubectl command\n\
    CONTEXT=my-context\nNAMESPACE=my-namespace\n\n# Get the certificaterequests in\
    \ JSON format using kubectl, filter the results with jq and display relevant information\n\
    kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}\
    \ -o json | \\\n  jq -r '.items[] | select(.status.conditions[] | select(.type\
    \ == \"Ready\" and .status != \"True\")) | { \n    certRequest: .metadata.name,\
    \ \n    certificate: (.metadata.ownerReferences[].name), \n    issuer: .spec.issuerRef.name,\
    \ \n    readyStatus: (.status.conditions[] | select(.type == \"Ready\")).status,\
    \ \n    readyMessage: (.status.conditions[] | select(.type == \"Ready\")).message,\
    \ \n    approvedStatus: (.status.conditions[] | select(.type == \"Approved\")).status,\
    \ \n    approvedMessage: (.status.conditions[] | select(.type == \"Approved\"\
    )).message \n  } | \"\\nCertificateRequest: \\(.certRequest)\", \"Certificate:\
    \ \\(.certificate)\", \"Issuer: \\(.issuer)\", \"Ready Status: \\(.readyStatus)\"\
    , \"Ready Message: \\(.readyMessage)\", \"Approved Status: \\(.approvedStatus)\"\
    , \"Approved Message: \\(.approvedMessage)\\n------------\"'\n\nThis multi-line\
    \ command breaks down the original single-line command and provides comments to\
    \ explain each part of the process for better understanding. It sets the context\
    \ and namespace and then uses kubectl to retrieve certificaterequests in JSON\
    \ format, filters the output with jq to extract specific information, and formats\
    \ the results for display."
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace
  when_is_it_useful: '1. Debugging and diagnosing issues with certificate requests
    in a Kubernetes environment, such as identifying failed or pending certificate
    issuance.

    2. Monitoring and ensuring the health and readiness of certificates managed by
    cert-manager.io in a specific Kubernetes context and namespace.

    3. Troubleshooting CrashLoopBackoff events related to cert-manager.io or certificate
    management in Kubernetes by checking the status of certificate requests.

    4. Investigating and resolving issues with certificate approvals or rejections
    within a specific Kubernetes namespace using data retrieved from the cert-manager.io
    API.

    5. Automating the retrieval and formatting of certificate request information
    for reporting or auditing purposes within a Kubernetes environment.'
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)\n------------"'''
  doc_links: '

    '
  explanation: This command retrieves certificate requests from the cert-manager.io
    API for a specific context and namespace, then uses jq to filter and format the
    output in a human-readable way, including information about the certificate request,
    certificate, issuer, readiness status, approval status, and corresponding messages.
  multi_line_details: "\n# Set the context and namespace for the kubectl command\n\
    CONTEXT=my-context\nNAMESPACE=my-namespace\n\n# Get the certificaterequests in\
    \ JSON format using kubectl, filter the results with jq and display relevant information\n\
    kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}\
    \ -o json | \\\n  jq -r '.items[] | select(.status.conditions[] | select(.type\
    \ == \"Ready\" and .status != \"True\")) | { \n    certRequest: .metadata.name,\
    \ \n    certificate: (.metadata.ownerReferences[].name), \n    issuer: .spec.issuerRef.name,\
    \ \n    readyStatus: (.status.conditions[] | select(.type == \"Ready\")).status,\
    \ \n    readyMessage: (.status.conditions[] | select(.type == \"Ready\")).message,\
    \ \n    approvedStatus: (.status.conditions[] | select(.type == \"Approved\")).status,\
    \ \n    approvedMessage: (.status.conditions[] | select(.type == \"Approved\"\
    )).message \n  } | \"\\nCertificateRequest: \\(.certRequest)\", \"Certificate:\
    \ \\(.certificate)\", \"Issuer: \\(.issuer)\", \"Ready Status: \\(.readyStatus)\"\
    , \"Ready Message: \\(.readyMessage)\", \"Approved Status: \\(.approvedStatus)\"\
    , \"Approved Message: \\(.approvedMessage)\\n------------\"'\n\nThis multi-line\
    \ command breaks down the original single-line command and provides comments to\
    \ explain each part of the process for better understanding. It sets the context\
    \ and namespace and then uses kubectl to retrieve certificaterequests in JSON\
    \ format, filters the output with jq to extract specific information, and formats\
    \ the results for display."
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace
  when_is_it_useful: '1. Debugging and diagnosing issues with certificate requests
    in a Kubernetes environment, such as identifying failed or pending certificate
    issuance.

    2. Monitoring and ensuring the health and readiness of certificates managed by
    cert-manager.io in a specific Kubernetes context and namespace.

    3. Troubleshooting CrashLoopBackoff events related to cert-manager.io or certificate
    management in Kubernetes by checking the status of certificate requests.

    4. Investigating and resolving issues with certificate approvals or rejections
    within a specific Kubernetes namespace using data retrieved from the cert-manager.io
    API.

    5. Automating the retrieval and formatting of certificate request information
    for reporting or auditing purposes within a Kubernetes environment.'
