commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    - [cert-manager documentation](https://cert-manager.io/docs/){:target="_blank"}

    - [SSL certificate status in Kubernetes](https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets){:target="_blank"}'
  explanation: This command retrieves the status of SSL certificates managed by cert-manager,
    filtering for only the ones that are ready and have a renewal time before the
    current time. It then outputs the namespace, URL, renewal time, and expiration
    time of each certificate in JSON format.
  multi_line_details: "```bash\n# Set the context to a specific Kubernetes cluster\n\
    CONTEXT=my-kube-context\n\n# Set the namespace for the resource\nNAMESPACE=my-namespace\n\
    \n# Get the certificates from the cert-manager.io API\n# Use jq to filter and\
    \ format the output\nkubectl get certificates.cert-manager.io --context=${CONTEXT}\
    \ -n ${NAMESPACE} -ojson | \\\n  jq -r --arg now \"$(date +%Y-%m-%dT%H:%M:%SZ)\"\
    \ \\\n    '.items[] |\n     select(.status.conditions[] | select(.type == \"Ready\"\
    \ and .status == \"True\")) |\n     select(.status.renewalTime) |\n     select((.status.notAfter\
    \ | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime) <= ($now | strptime(\"%Y-%m-%dT%H:%M:%SZ\"\
    ) | mktime)) |\n     \"Namespace:\" + .metadata.namespace + \" URL:\" + .spec.dnsNames[0]\
    \ + \" Renews:\" + .status.renewalTime + \" Expires:\" + .status.notAfter'\n```"
  name: get_namespace_certificate_summary_for_namespace_namespace
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)\n------------"'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [certificate requests](https://kubernetes.io/docs/concepts/cluster-administration/certificates/){:target="_blank"}

    - [specific context and namespace](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [jq](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve certificate requests from a specific
    context and namespace, then uses jq to filter the results and format them into
    a human-readable list showing the status and details of each certificate request.
  multi_line_details: "#!/bin/bash\n# This command retrieves and filters certificate\
    \ requests using cert-manager.io and jq to get specific information about each\
    \ request.\n# It uses the kubectl command with the get option to retrieve resources\
    \ of a specific type from the API server.\n# The certificaterequests.cert-manager.io\
    \ is used as the resource type, and the output format is set to json for easy\
    \ processing.\n\nkubectl get certificaterequests.cert-manager.io --context=${CONTEXT}\
    \ -n ${NAMESPACE} -o json | \\\n# This pipes the output of the previous command\
    \ to jq, which is a powerful command-line JSON processor.\n# Here, we use jq to\
    \ filter and process the JSON output from the kubectl command.\njq -r '.items[]\
    \ | select(.status.conditions[] | select(.type == \"Ready\" and .status != \"\
    True\")) | \\\n# This line filters the items to include only those with a \"Ready\"\
    \ condition that is not \"True\", indicating that the certificate request is not\
    \ fully ready.\n{certRequest: .metadata.name, certificate: (.metadata.ownerReferences[].name),\
    \ issuer: .spec.issuerRef.name, readyStatus: (.status.conditions[] | select(.type\
    \ == \"Ready\")).status, readyMessage: (.status.conditions[] | select(.type ==\
    \ \"Ready\")).message, approvedStatus: (.status.conditions[] | select(.type ==\
    \ \"Approved\")).status, approvedMessage: (.status.conditions[] | select(.type\
    \ == \"Approved\")).message} | \\\n# This section constructs a new JSON object\
    \ for each filtered item, including specific fields like certRequest, certificate,\
    \ issuer, readyStatus, readyMessage, approvedStatus, and approvedMessage.\n\"\\\
    nCertificateRequest: \\(.certRequest)\", \"Certificate: \\(.certificate)\", \"\
    Issuer: \\(.issuer)\", \"Ready Status: \\(.readyStatus)\", \"Ready Message: \\\
    (.readyMessage)\", \"Approved Status: \\(.approvedStatus)\", \"Approved Message:\
    \ \\(.approvedMessage)\\n------------\"' \n# Finally, this line formats the extracted\
    \ information into a human-readable format and adds separators between each certificate\
    \ request."
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace
