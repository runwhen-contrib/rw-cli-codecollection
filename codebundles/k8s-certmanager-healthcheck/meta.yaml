commands:
- command: kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}
    -ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" '.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter'
  doc_links: '

    '
  explanation: 'This command is used to retrieve information about certificates managed
    by cert-manager in a Kubernetes cluster. Let me break it down for you:


    - `kubectl`: This is the command-line tool used to interact with Kubernetes clusters.


    - `get certificates.cert-manager.io`: This part of the command tells kubectl to
    retrieve information about resources of type `certificates.cert-manager.io` from
    the Kubernetes cluster.


    - `--context=${CONTEXT}`: This flag specifies the context (or the cluster) within
    the kubeconfig file that the command should be executed against. The `${CONTEXT}`
    variable needs to be replaced with the actual name of the context/cluster.


    - `-n ${NAMESPACE}`: This flag specifies the namespace within the Kubernetes cluster
    from which the certificates should be retrieved. The `${NAMESPACE}` variable needs
    to be replaced with the actual name of the namespace.


    - `-ojson | jq -r --arg now "$(date +%Y-%m-%dT%H:%M:%SZ)" ''.items[] | select(.status.conditions[]
    | select(.type == "Ready" and .status == "True")) | select(.status.renewalTime)
    | select((.status.notAfter | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) <= ($now
    | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)) | "Namespace:" + .metadata.namespace
    + " URL:" + .spec.dnsNames[0] + " Renews:" + .status.renewalTime + " Expires:"
    + .status.notAfter''`: This part of the command processes the retrieved JSON data
    using the `jq` command-line JSON processor. It filters the certificates based
    on their readiness, renewal time, and expiration time, and then formats the output
    to display relevant information such as namespace, URL, renewal time, and expiration
    time for each certificate.


    In summary, this command is used to fetch and filter certificate information managed
    by cert-manager in a Kubernetes cluster and format the output for easy consumption.'
  multi_line_details: "```bash\n# Set the context for the kubectl command to a specific\
    \ Kubernetes cluster\nCONTEXT=my-cluster-context\n\n# Set the namespace where\
    \ the certificates are located\nNAMESPACE=my-namespace\n\n# Get the list of certificates\
    \ from cert-manager in the specified namespace and format the output as JSON\n\
    kubectl get certificates.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE}\
    \ -ojson \\\n    | jq -r --arg now \"$(date +%Y-%m-%dT%H:%M:%SZ)\" '.items[] \n\
    \    | select(.status.conditions[] | select(.type == \"Ready\" and .status ==\
    \ \"True\")) \n    | select(.status.renewalTime) \n    | select((.status.notAfter\
    \ | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime) <= ($now | strptime(\"%Y-%m-%dT%H:%M:%SZ\"\
    ) | mktime)) \n    | \"Namespace:\" + .metadata.namespace + \" URL:\" + .spec.dnsNames[0]\
    \ + \" Renews:\" + .status.renewalTime + \" Expires:\" + .status.notAfter'\n```\n\
    \nThis multi-line command provides a detailed breakdown of each step:\n\n1. Setting\
    \ the `CONTEXT` variable to specify the Kubernetes cluster context.\n2. Setting\
    \ the `NAMESPACE` variable to specify the namespace where the certificates are\
    \ located.\n3. Using `kubectl` to get the list of certificates from cert-manager\
    \ in the specified namespace and format the output as JSON.\n4. Piping the output\
    \ to `jq` to filter and format the data based on certificate status, renewal time,\
    \ expiration time, and namespace/URL information.\n\nBy using this multi-line\
    \ command with verbose comments, it can help educate new users of Kubernetes and\
    \ related CLI commands on how to interact with and query certificate information\
    \ within a Kubernetes cluster."
  name: get_namespace_certificate_summary_for_namespace_namespace
- command: 'kubectl get certificaterequests.cert-manager.io --context=${CONTEXT} -n
    ${NAMESPACE} -o json | jq -r ''.items[] | select(.status.conditions[] | select(.type
    == "Ready" and .status != "True")) | {certRequest: .metadata.name, certificate:
    (.metadata.ownerReferences[].name), issuer: .spec.issuerRef.name, readyStatus:
    (.status.conditions[] | select(.type == "Ready")).status, readyMessage: (.status.conditions[]
    | select(.type == "Ready")).message, approvedStatus: (.status.conditions[] | select(.type
    == "Approved")).status, approvedMessage: (.status.conditions[] | select(.type
    == "Approved")).message} | "\nCertificateRequest: \(.certRequest)", "Certificate:
    \(.certificate)", "Issuer: \(.issuer)", "Ready Status: \(.readyStatus)", "Ready
    Message: \(.readyMessage)", "Approved Status: \(.approvedStatus)", "Approved Message:
    \(.approvedMessage)\n------------"'''
  doc_links: '

    - [kubectl cert-manager.io documentation](https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/client?tab=doc){:target="_blank"}

    - [jq manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: 'This command is used to get information about certificate requests
    in a Kubernetes cluster. Let me break it down for you.


    - `kubectl`: This is the command-line tool used to interact with the Kubernetes
    API.

    - `get certificaterequests.cert-manager.io`: This part of the command tells Kubernetes
    to retrieve information about certificate requests managed by cert-manager.io.

    - `--context=${CONTEXT}`: This flag specifies the context for the operation, which
    includes details about the cluster, user, and namespace to use for the request.

    - `-n ${NAMESPACE}`: This flag specifies the namespace in which to perform the
    operation. The namespace is a way to partition resources within a cluster.

    - `-o json`: This flag tells Kubernetes to output the results in JSON format for
    further processing.

    - `| jq -r ''...'': After retrieving the information, this part of the command
    pipes the JSON output to `jq`, a command-line JSON processor, to filter and format
    the data for easier understanding.


    The rest of the command inside the `jq` expression is a series of filters and
    transformations applied to the JSON data retrieved from the Kubernetes API. It
    selects specific fields from the certificate request objects, such as name, owner,
    issuer reference, ready status, message, approved status, and message. Finally,
    it formats this information into a human-readable output with new lines and separators.


    In summary, this command is a powerful way to fetch and process information about
    certificate requests in a Kubernetes cluster, especially when managing and troubleshooting
    resources daily as an engineer. It allows you to gain insights into the readiness
    and approval status of the certificate requests.'
  multi_line_details: "```bash\n# Set the context and namespace to be used for the\
    \ kubectl command\nCONTEXT=my-context\nNAMESPACE=my-namespace\n\n# Retrieve the\
    \ certificate requests using cert-manager and output in JSON format\nkubectl get\
    \ certificaterequests.cert-manager.io --context=${CONTEXT} -n ${NAMESPACE} -o\
    \ json \\\n\n# Pipe the output to jq to filter and format the JSON data\n| jq\
    \ -r '.items[] | select(.status.conditions[] | select(.type == \"Ready\" and .status\
    \ != \"True\")) |\n\n# Select specific fields from the JSON data and format into\
    \ a human-readable output\n{certRequest: .metadata.name, certificate: (.metadata.ownerReferences[].name),\
    \ issuer: .spec.issuerRef.name,\n readyStatus: (.status.conditions[] | select(.type\
    \ == \"Ready\")).status,\n readyMessage: (.status.conditions[] | select(.type\
    \ == \"Ready\")).message,\n approvedStatus: (.status.conditions[] | select(.type\
    \ == \"Approved\")).status,\n approvedMessage: (.status.conditions[] | select(.type\
    \ == \"Approved\")).message} |\n\n# Format the selected fields into a readable\
    \ output with line breaks\n\"\\nCertificateRequest: \\(.certRequest)\", \"Certificate:\
    \ \\(.certificate)\", \"Issuer: \\(.issuer)\",\n \"Ready Status: \\(.readyStatus)\"\
    , \"Ready Message: \\(.readyMessage)\",\n \"Approved Status: \\(.approvedStatus)\"\
    , \"Approved Message: \\(.approvedMessage)\\n------------\"'\n```"
  name: find_failed_certificate_requests_and_identify_issues_for_namespace_namespace
