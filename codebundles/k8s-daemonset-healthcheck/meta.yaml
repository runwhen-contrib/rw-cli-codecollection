commands:
- command: kubectl logs --tail=100 daemonset/${DAEMONSET_NAME} --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes Logging Architecture](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}

    - [Kubectl Logs Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs from a specific daemon
    set within a designated namespace and context in a Kubernetes cluster, allowing
    you to troubleshoot any issues or monitor its activity.
  multi_line_details: '# This command retrieves the last 100 log lines from a specific
    daemonset in a specified namespace and context


    # Set the context for the command to run in a specific Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Retrieve the last 100 logs from the specified daemonset within the specified
    namespace

    kubectl logs --tail=100 daemonset/${DAEMONSET_NAME} -n ${NAMESPACE}'
  name: get_daemonset_log_details_for_report
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "${DAEMONSET_NAME}" || true
  doc_links: '

    - [Kubernetes events API](https://kubernetes.io/docs/reference/using-api/api-concepts/#events){:target="_blank"}

    - [Filtering kubectl output](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#output-formatting){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}'
  explanation: This command retrieves Kubernetes events with a type of Warning for
    a specific context and namespace, then filters the output to display only those
    related to a specific daemon set. The command also includes "|| true" to ensure
    that it returns a successful exit code even if no matching events are found.
  multi_line_details: "```bash\n# Get events from a specific namespace using the Kubernetes\
    \ context\n# The --field-selector is used to filter out events of type Warning\
    \ only\n# We are also using the -n flag to specify the namespace and grep to filter\
    \ out events related to a specific daemonset\n\nkubectl get events \\\n  --field-selector\
    \ type=Warning \\\n  --context ${CONTEXT} \\\n  -n ${NAMESPACE} \\\n  | grep -i\
    \ \"${DAEMONSET_NAME}\" || true\n```"
  name: get_related_daemonset_events
- command: kubectl describe daemonset/${DAEMONSET_NAME} --context ${CONTEXT} -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes DaemonSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-context-and-configuration){:target="_blank"}

    - [Understanding Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to provide detailed information about a specific
    daemon set in Kubernetes, including its current status and events, within a specific
    context (such as a different Kubernetes cluster) and namespace.
  multi_line_details: "# Step 1: Get the details and configuration of a specific DaemonSet\n\
    # Step 2: Use the kubectl command to describe the DaemonSet with name specified\
    \ in the environment variable ${DAEMONSET_NAME}\n# Step 3: Specify the Kubernetes\
    \ context to be used for the command using the value stored in the environment\
    \ variable ${CONTEXT}\n# Step 4: Provide the namespace where the DaemonSet is\
    \ located using the value stored in the environment variable ${NAMESPACE}\n\n\
    kubectl describe daemonset/${DAEMONSET_NAME} \n  --context ${CONTEXT} \n  -n ${NAMESPACE}"
  name: check_daemonset_replicas
