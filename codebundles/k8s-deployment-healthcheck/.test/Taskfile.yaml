version: "3"

tasks:
  default:
    desc: "Generate workspaceInfo and rebuild/test"
    cmds:
      - task: generate-rwl-config
      - task: run-rwl-discovery

  clean:
    desc: "Run cleanup tasks"
    cmds:
      - task: clean-rwl-discovery

  generate-rwl-config:
    desc: "Generate RunWhen Local configuration (workspaceInfo.yaml)"
    env:
      RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
    cmds:
      - |
        repo_url=$(git config --get remote.origin.url)
        branch_name=$(git rev-parse --abbrev-ref HEAD)
        codebundle=$(basename "$(dirname "$PWD")")
        
        # Generate workspaceInfo.yaml with fetched cluster details
        cat <<EOF > workspaceInfo.yaml
        workspaceName: "$RW_WORKSPACE"
        workspaceOwnerEmail: authors@runwhen.com
        defaultLocation: location-01
        defaultLOD: detailed
        cloudConfig:
          kubernetes: 
            kubeconfigFile: /shared/kubeconfig.secret
        codeCollections:
        - repoURL: "$repo_url"
          branch: "$branch_name"
          codeBundles: ["$codebundle"]
        custom: 
          kubernetes_distribution_binary: kubectl
        EOF
    silent: true

  run-rwl-discovery:
    desc: "Run RunWhen Local Discovery on test infrastructure"
    cmds:
      - |
        CONTAINER_NAME="RunWhenLocal"
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi

        echo "Cleaning up output directory..."
        sudo rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }

        echo "Starting new container $CONTAINER_NAME..."

        docker run --name $CONTAINER_NAME -p 8081:8081 -v "$(pwd)":/shared -d ghcr.io/runwhen-contrib/runwhen-local:latest || {
          echo "Failed to start container"; exit 1;
        }

        echo "Running workspace builder script in container..."
        docker exec -w /workspace-builder $CONTAINER_NAME ./run.sh $1 --verbose || {
          echo "Error executing script in container"; exit 1;
        }

        echo "Review generated config files under output/workspaces/"
    silent: true

  clean-rwl-discovery:
    desc: "Check and clean up RunWhen Local discovery output"
    cmds:
      - |
        rm -rf output
        rm workspaceInfo.yaml
    silent: true

  upload-slxs:
    desc: "Upload SLX files to the appropriate URL"
    env:
      RW_WORKSPACE: "{{.RW_WORKSPACE}}"
      RW_API_URL: "{{.RW_API}}"
      RW_PAT: "{{.RW_PAT}}"
    cmds:
      - task: check-rwp-config
      - |
        BASE_DIR="output/workspaces/${RW_WORKSPACE}/slxs"
        if [ ! -d "$BASE_DIR" ]; then
          echo "Directory $BASE_DIR does not exist. Upload aborted."
          exit 1
        fi

        for dir in "$BASE_DIR"/*; do
          if [ -d "$dir" ]; then
            SLX_NAME=$(basename "$dir")
            PAYLOAD=$(jq -n --arg commitMsg "Creating new SLX $SLX_NAME" '{ commitMsg: $commitMsg, files: {} }')
            for file in slx.yaml runbook.yaml sli.yaml; do
              if [ -f "$dir/$file" ]; then
                CONTENT=$(cat "$dir/$file")
                PAYLOAD=$(echo "$PAYLOAD" | jq --arg fileContent "$CONTENT" --arg fileName "$file" '.files[$fileName] = $fileContent')
              fi
            done

            URL="https://${RW_API_URL}/api/v3/workspaces/${RW_WORKSPACE}/branches/main/slxs/${SLX_NAME}"
            echo "Uploading SLX: $SLX_NAME to $URL"
            response=$(curl -vvv -X POST "$URL" \
              -H "Authorization: Bearer $RW_PAT" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" -w "%{http_code}" -o /dev/null -s 2>&1)
            
            if [[ "$response" =~ 200|201 ]]; then
              echo "Successfully uploaded SLX: $SLX_NAME to $URL"
            else
              echo "Failed to upload SLX: $SLX_NAME to $URL. Response:"
              echo "$response"
            fi
          fi
        done
    silent: true
  delete-slxs:
    desc: "Delete SLX objects from the appropriate URL"
    env:
      RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
      RW_API_URL: "{{.RW_API}}"
      RW_PAT: "{{.RW_PAT}}"
    cmds:
      - task: check-rwp-config
      - |
        BASE_DIR="output/workspaces/${RW_WORKSPACE}/slxs"
        if [ ! -d "$BASE_DIR" ]; then
          echo "Directory $BASE_DIR does not exist. Deletion aborted."
          exit 1
        fi

        for dir in "$BASE_DIR"/*; do
          if [ -d "$dir" ]; then
            SLX_NAME=$(basename "$dir")
            URL="https://${RW_API_URL}/api/v3/workspaces/${RW_WORKSPACE}/branches/main/slxs/${SLX_NAME}"
            echo "Deleting SLX: $SLX_NAME from $URL"
            response=$(curl -v -X DELETE "$URL" \
              -H "Authorization: Bearer $RW_PAT" \
              -H "Content-Type: application/json" -w "%{http_code}" -o /dev/null -s 2>&1)

            if [[ "$response" =~ 200|204 ]]; then
              echo "Successfully deleted SLX: $SLX_NAME from $URL"
            else
              echo "Failed to delete SLX: $SLX_NAME from $URL. Response:"
              echo "$response"
            fi
          fi
        done
    silent: true
  check-rwp-config:
    desc: Check if env vars are set for RunWhen Platform
    cmds:
      - |
        missing_vars=()

        if [ -z "$RW_WORKSPACE" ]; then
          missing_vars+=("RW_WORKSPACE")
        fi

        if [ -z "$RW_API_URL" ]; then
          missing_vars+=("RW_API_URL")
        fi

        if [ -z "$RW_PAT" ]; then
          missing_vars+=("RW_PAT")
        fi

        if [ ${#missing_vars[@]} -ne 0 ]; then
          echo "The following required environment variables are missing: ${missing_vars[*]}"
          exit 1
        fi
    silent: true