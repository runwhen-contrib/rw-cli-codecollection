commands:
- command: kubectl logs deployment/${DEPLOYMENT_NAME} --limit-bytes=256000 --since=3h
    --context=${CONTEXT} -n ${NAMESPACE} | grep -Ei "${LOGS_ERROR_PATTERN}" | grep
    -Eiv "${LOGS_EXCLUDE_PATTERN}" | sort | uniq -c | awk '{print "Occurences:",$0}'
  doc_links: '

    - [Kubernetes - kubectl Overview](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [Kubernetes - kubectl Logging Pods](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}'
  explanation: '


    This command uses the kubectl tool to get logs from a deployment with a name specified
    by ${DEPLOYMENT_NAME}. It retrieves a maximum of 256000 bytes per log that have
    been logged in the past 3 hours, using the context set in the ${CONTEXT} variable
    from within the namespace set in the ${NAMESPACE} variable. It then filters the
    output to only show lines that contains a pattern specified by ${LOGS_ERROR_PATTERN},
    while excluding any lines containing a pattern specified by ${LOGS_EXCLUDE_PATTERN}.
    The output is sorted and duplicates are removed. Finally the occurences of each
    line is printed.'
  multi_line_details: "\n\n# Get all the logs from a specific deployment in Kubernetes,\
    \ limiting the amout of logs to 256 bytes. \n# The logs should only contain lines\
    \ matching an error pattern and exclude the ones matching an exclusion pattern.\n\
    # Lastly, we want to print an output counting the occurances of these errorlines.\
    \ \nkubectl logs deployment/${DEPLOYMENT_NAME} \\ #Execute the 'logs' command\
    \ on the Kubernetes Deployment with the provided name \n    --limit-bytes=256000\
    \ \\                #limit the amount of logs to 256 thousand bytes\n    --since=3h\
    \ \\                         #only show logs which have been generated in the\
    \ last 3 hours\n    --context=${CONTEXT} \\               #specify the context\
    \ \n    -n ${NAMESPACE} \\                    #specify the namespace\n    | grep\
    \ -Ei \"${LOGS_ERROR_PATTERN}\" \\  #Filter each logline based on an error pattern\
    \ \n    | grep -Eiv \"${LOGS_EXCLUDE_PATTERN}\" #Exclude each logline based on\
    \ an exception pattern\n    | sort \\                             #Sort the output\n\
    \    | uniq -c \\                         #Count the amount of occurrences for\
    \ each unique line\n    | awk '{print \"Occurences:\",$0}'    #Print output as\
    \ \"Occurences: x\""
  name: check_deployment_log_for_issues
- command: kubectl get events --context ${CONTEXT} -n ${NAMESPACE} --field-selector
    type=Warning | grep -i "${DEPLOYMENT_NAME}" || true
  doc_links: '

    - [Kubernetes Documentation for kubectl command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [Kubernetes Documentation on contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#specify-a-context){:target="_blank"}

    - [Kubernetes Documentation on namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Grep Documentation](https://www.gnu.org/software/grep/manual/grep.html){:target="_blank"}'
  explanation: '


    This command is using the kubectl command line tool to get events related to your
    deployment in a specific namespace, with the context and name of the deployment
    that you specify. It filters out all but Warning events (meaning that only Warnings
    will be shown) and then uses grep to search the output for your deployment''s
    name. The || true at the end ensures that even if the grep command returns no
    results, the overall command will still succeed.'
  multi_line_details: "\n\n# This command is designed to get events from the Kubernetes\
    \ context, namesapce and deployment name that are of type Warning\n# The optional\
    \ `|| true` ensures that the command will always return `0` even if it fails.\n\
    \n# Split into multi-line command:\nkubectl \\\n    get events \\  # Get events\n\
    \    --context ${CONTEXT} \\  # Specify what context by declaring variable\n \
    \   -n ${NAMESPACE} \\  # Specify the namespace by declaring variable \n    --field-selector\
    \ type=Warning \\  # Filter only events of type warning\n    | grep -i \"${DEPLOYMENT_NAME}\"\
    \ \\  # Search for the deployment name using case insensitive search\n    || true\
    \ \\  # Make sure command returns a 0 even if it fails"
  name: troubleshoot_deployment_warning_events
- command: kubectl get deployment/${DEPLOYMENT_NAME} --context ${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Kubernetes documentation on kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands){:target="_blank"}

    - [Official Kubernetes kubectl get deployment documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-deployment){:target="_blank"}

    - [Kubernetes documentation on namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes documentation on output format](https://kubernetes.io/docs/reference/using-api/api-overview/#application-programming-interface-command-line-interface){:target="_blank"}'
  explanation: '


    This command tells Kubernetes to get information about a particular deployment
    that has been specified by the name (${DEPLOYMENT_NAME}). The context (${CONTEXT})
    and namespace (${NAMESPACE}) provide Kubernetes with more information as to where
    exactly this deployment lives. Finally, you are asking Kubernetes to output the
    results in the yaml format.'
  multi_line_details: "\n\n#This line of code will retrieve the deployment configuration\
    \ info from Kubernetes corresponding to a given deployment name, context, and\
    \ namespace in a yaml format\n\nkubectl \\\n    #This is the kubernetes command\
    \ line interface command\n    get \\\n    #Use the 'get' subcommand to retrieve\
    \ information/objects\n    deployment/${DEPLOYMENT_NAME} \\\n    #In this case,\
    \ we're specifically looking for Deployments with the given deployment name\n\
    \    --context ${CONTEXT} \\\n    #Optionally specify a 'context' - an isolated\
    \ cluster role for the operation. We set this variable separately, as it's value\
    \ may differ between users/environments.\n    -n ${NAMESPACE} \\\n    #Specify\
    \ a 'namespace' - the environment where all objects of type K8s live. This variable\
    \ should be set separately, as it's value can change between users/environments.\n\
    \    -o yaml\\\n    #The output format will be in yaml, as specified by the '-o\
    \ yaml' option."
  name: get_deployment_workload_details_for_report
- command: kubectl get deployment/${DEPLOYMENT_NAME} --context ${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [Kubernetes - kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes - Deployment Concepts](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes - Contexts and Config Files](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#use-multiple-contexts-in-the-same-kubeconfig-file){:target="_blank"}

    - [Kubernetes - Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes - JSON Path Support in kubectl](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: '


    This command allows you to retrieve information about a specific deployment in
    Kubernetes. The ${DEPLOYMENT_NAME} argument is used to specify which deployment
    you want to get info from. The ${CONTEXT} argument is used to specify the cluster
    or context against which the request is made and the ${NAMESPACE} argument specifies
    the namespace within the given cluster in which the deployment exists. Finally,
    the -o json flag specifies that the resulting output should be in JSON format.'
  multi_line_details: "path='{.spec.replicas}'\n\n# Get the current Deployment object\
    \ based on a name, context, and namespace\nkubectl get deployment/${DEPLOYMENT_NAME}\
    \ \\\n    --context ${CONTEXT} \\\n    -n ${NAMESPACE} \\\n# Output the number\
    \ of replicas as defined in the Deployment Spec \n   -o jsonpath='{.spec.replicas}'"
  name: troubleshoot_deployment_replicas
- command: kubectl get events --field-selector type!=Warning --context ${CONTEXT}
    -n ${NAMESPACE} -o json | jq -r '.items[] | select(.involvedObject.name|contains("${DEPLOYMENT_NAME}"))
    | select( .count / ( if ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60
    == 0 then 1 else ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60 end
    ) > ${ANOMALY_THRESHOLD}) | "Event(s) Per Minute:" + (.count / ( if ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60
    == 0 then 1 else ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60 end
    ) |tostring) +" Count:" + (.count|tostring) + " Minute(s):" + (((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60|tostring)+
    " Object:" + .involvedObject.namespace + "/" + .involvedObject.kind + "/" + .involvedObject.name
    + " Reason:" + .reason + " Message:" + .message'
  doc_links: '

    - [Kubernetes Documentation: kubectl get events](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-events){:target="_blank"}

    - [jq Manual for .items[]](https://stedolan.github.io/jq/manual/#Itemsarraysstringsequencesandobjects){:target="_blank"}

    - [Kubernetes Documentation: field selector type](https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/){:target="_blank"}

    - [jq Manual for select()](https://stedolan.github.io/jq/manual/#selectfilter){:target="_blank"}

    - [jq Manual for Math Operations](https://stedolan.github.io/jq/manual/#MathOperations){:target="_blank"}

    - [jq Manual for Info Functions](https://stedolan.github.io/jq/manual/#infofunctions){:target="_blank"}'
  explanation: '


    This command is used to get events from Kubernetes running in the specified context
    and namespace. The command will filter out all Warning type events, and look for
    events related to the deployment name that are occurring at a rate greater than
    ANOMALY_THRESHOLD, as determined by dividing the number of events by the time
    between the first occurrence and last occurrence. If it finds any such events,
    it prints out information about them, including the event''s message, reason,
    and object type.'
  multi_line_details: "\n\n# This command calculates the number of events per minute\
    \ created by a given deployment in Kubernetes. \n# It filters out events that\
    \ aren't related to the deployment, and prints out useful information about any\
    \ anomalies.\n\n# Break down the one-liner into multiple lines:\nkubectl get events\
    \ \\\n    --field-selector type!=Warning \\\n    --context ${CONTEXT} \\\n   \
    \ -n ${NAMESPACE}\\\n    -o json |\n    jq -r '.items[] | \\\n        select(.involvedObject.name|contains(\"\
    ${DEPLOYMENT_NAME}\")) | \\\n        select( .count / ( if ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60\
    \ == 0 then 1 else ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60 end\
    \ ) > ${ANOMALY_THRESHOLD}) | \n        \"Event(s) Per Minute:\" + (.count / (\
    \ if ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60 == 0 then 1 else\
    \ ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60 end ) |tostring) +\"\
    \ Count:\" + (.count|tostring) + \" Minute(s):\" + (((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60|tostring)+\
    \ \" Object:\" + .involvedObject.namespace + \"/\" + .involvedObject.kind + \"\
    /\" + .involvedObject.name + \" Reason:\" + .reason + \" Message:\" + .message'\n\
    \n# Explanation:\n# kubectl get events \n#     Fetches the events in the cluster\
    \ based on the following options.\n# \n# --field-selector type!=Warning\n#   \
    \  Option to exclude events with Warning type from the output\n# \n# --context\
    \ ${CONTEXT}\n#     Name of the context for which the events have to be fetched\n\
    # \n# -n ${NAMESPACE}\n#     Namespace where the events are located\n# \n# -o\
    \ json \n#     Output option to print events in JSON format\n# \n# jq -r\n#  \
    \   Command to use the JSON parser jq to find specific items in the response\n\
    # \n# '.items[] |\n#      Iterates over each event object stored as item\n# \n\
    # select(.involvedObject.name|contains(\"${DEPLOYMENT_NAME}\"))\n#     Filters\
    \ items according to the specified Deployment name defined by the variable\n#\
    \ \n# select( .count / ( if ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60\
    \ == 0 then 1 else ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60 end\
    \ ) > ${ANOMALY_THRESHOLD})\n#     Calculates the number of events per minute\
    \ using the first and last time stamps of the events, checks whether the value\
    \ is greater then the anomaly threshold and selects only such items\n# \n# \"\
    Event(s) Per Minute:\" + (.count / ( if ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60\
    \ == 0 then 1 else ((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60 end\
    \ ) |tostring) +\" Count:\" + (.count|tostring) + \" Minute(s):\" + (((.lastTimestamp|fromdate)-(.firstTimestamp|fromdate))/60|tostring)+\
    \ \" Object:\" + .involvedObject.namespace + \"/\" + .involvedObject.kind + \"\
    /\" + .involvedObject.name + \" Reason:\" + .reason + \" Message:\" + .message'\n\
    #     Prints helpful details regarding the selected events, like the object's\
    \ name, the reason behind the events, etc."
  name: check_for_deployment_event_anomalies
