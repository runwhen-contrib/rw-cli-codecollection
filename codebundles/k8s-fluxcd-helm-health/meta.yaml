commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Context](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command is used to retrieve information about a specific Kubernetes
    resource within a specified namespace and context. The resource name, namespace,
    and context are all specified using the respective placeholders.
  multi_line_details: '```shell

    # Setting variables for resource name, namespace and context

    RESOURCE_NAME=example_resource

    NAMESPACE=example_namespace

    CONTEXT=example_context


    # Running kubectl command to get the specified resource in the given namespace
    and context

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}

    ```'
  name: list_all_available_fluxcd_helmreleases_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[*]}{''\nName:
    ''}{@.metadata.name}{''\nlastAppliedRevision:''}{@.status.lastAppliedRevision}{''\nlastAttemptedRevision:''}{@.status.lastAttemptedRevision}{''\n---''}{end}"
    --context ${CONTEXT} || true'
  doc_links: '

    - [Kubernetes kubectl basic commands](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#basic-commands){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [JSON formatting options in kubectl](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command retrieves specific resource information from a specified
    namespace in your Kubernetes cluster and formats the output in a specific JSON
    format. If the command fails, it will return a success status.
  multi_line_details: '```shell

    # Define variables

    RESOURCE_NAME="deployment"

    NAMESPACE="default"

    CONTEXT="my-cluster"


    # Retrieve details of the specified resource in the given namespace

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} \

    -o=jsonpath="{range .items[*]}{''\nName: ''}{@.metadata.name}{''\nlastAppliedRevision:''}{@.status.lastAppliedRevision}{''\nlastAttemptedRevision:''}{@.status.lastAttemptedRevision}{''\n---''}{end}"
    --context ${CONTEXT} || true

    ```'
  name: fetch_installed_fluxcd_helmrelease_versions_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT}
    | jq -r ''.items[] | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)
    | "Name: " + .metadata.name + " Last Attempted Version: " + .status.lastAttemptedRevision
    + " Last Applied Revision: " + .status.lastAppliedRevision'''
  doc_links: '

    '
  explanation: This command is used to retrieve information about a specific Kubernetes
    resource in a particular namespace, using the specified context. It then processes
    the output using `jq` to filter and format it, displaying the resource's name,
    last attempted version, and last applied revision if they are different.
  multi_line_details: '```shell

    # Store the output of kubectl get command in a JSON format for a specific resource
    in a particular namespace and context

    output=$(kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT})


    # Use jq to parse the JSON and filter out items where lastAppliedRevision is different
    from lastAttemptedRevision

    filtered_output=$(echo $output | jq -r ''.items[] | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)
    | "Name: " + .metadata.name + " Last Attempted Version: " + .status.lastAttemptedRevision
    + " Last Applied Revision: " + .status.lastAppliedRevision'')


    # Print the filtered output

    echo $filtered_output

    ```'
  name: fetch_mismatched_fluxcd_helmrelease_version_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[?(@.status.conditions[].status==''False'')]}{''-----\nName:
    ''}{@.metadata.name}{''\n''}{@.status.conditions[*].message}{''\n''}{end}" --context
    ${CONTEXT} || true'
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Concepts](https://kubernetes.io/docs/concepts/){:target="_blank"}

    - [kubectl get documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}'
  explanation: This command uses kubectl to get information about a specific type
    of Kubernetes resource in a specific namespace and outputs the names and status
    messages of any items with a condition status of 'False,' while also displaying
    a line of dashes before each item. If no items meet the criteria, it will return
    true.
  multi_line_details: '```bash

    # Set the kubectl command to get information about a specific resource in a particular
    namespace, and format the output as JSON.

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[?(@.status.conditions[].status==''False'')]}{''-----\nName:
    ''}{@.metadata.name}{''\n''}{@.status.conditions[*].message}{''\n''}{end}" --context
    ${CONTEXT} || true

    ```'
  name: fetch_fluxcd_helmrelease_error_messages_in_namespace_namespace
- command: 'namespace="${NAMESPACE}" context="${CONTEXT}"; helm_releases=$(kubectl
    get ${RESOURCE_NAME} -n "$namespace" --context "$context" -o json | jq -r ''.items[]
    | .metadata.name''); echo "$helm_releases" | while IFS= read -r release; do chart_details=$(kubectl
    get ${RESOURCE_NAME} "$release" -n "$namespace" --context "$context" -o json |
    jq -r ''.spec.chart.spec // empty''); if [[ -n "$chart_details" ]]; then chart_kind=$(echo
    "$chart_details" | jq -r ''.sourceRef.kind // empty''); chart_name=$(echo "$chart_details"
    | jq -r ''.chart // empty''); chart_source_name=$(echo "$chart_details" | jq -r
    ''.sourceRef.name // empty''); chart_namespace=$(echo "$chart_details" | jq -r
    ''.sourceRef.namespace // empty''); chart_version=$(echo "$chart_details" | jq
    -r ''.version // "N/A"''); if [[ "$chart_kind" == "HelmRepository" && -n "$chart_name"
    && -n "$chart_namespace" ]]; then repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io
    "$chart_source_name" -n "$chart_namespace" --context "$context" -o json | jq -r
    ''.spec.url // empty''); if [[ -n "$repo_url" ]]; then temp_repo_name="$chart_source_name-temp-$release";
    add_repo=$(helm repo add "$temp_repo_name" "$repo_url"); available_chart_version=$(helm
    search repo "$temp_repo_name"/"$chart_name" --version ">$chart_version" --output
    json | jq -r ''.[].version''); if [[ -n "$available_chart_version" ]]; then sorted_versions=($(echo
    "\${available_chart_version[@]}" | tr '' '' ''\n'' | sort -V)); available_version=\${sorted_versions[-1]};
    version_update_available="True"; else available_version="N/A"; version_update_available="False";
    fi; remove_repo=$(helm repo remove "$temp_repo_name"); else available_version="N/A";
    version_update_available="False"; fi; else available_version="N/A"; version_update_available="False";
    fi; else chart_name="N/A"; chart_namespace="N/A"; chart_version="N/A"; available_version="N/A";
    version_update_available="False"; fi; echo "Release: $release | Chart: $chart_namespace/$chart_name
    | Installed Version: $chart_version | Available Update: $version_update_available
    | Available Version: $available_version"; done'
  doc_links: '

    - [Kubernetes kubectl Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Helm Documentation](https://helm.sh/docs/){:target="_blank"}

    - [Helm Chart Repository Documentation](https://helm.sh/docs/topics/chart_repository/){:target="_blank"}'
  explanation: This command uses the Kubernetes kubectl and Helm tools to gather information
    about Helm releases in a given namespace and context. It then checks for available
    updates for each release's associated chart from a Helm repository and reports
    the results.
  multi_line_details: "```sh\nnamespace=\"${NAMESPACE}\" \ncontext=\"${CONTEXT}\"\n\
    helm_releases=$(kubectl get ${RESOURCE_NAME} -n \"$namespace\" --context \"$context\"\
    \ -o json | jq -r '.items[] | .metadata.name')\n\necho \"$helm_releases\" | while\
    \ IFS= read -r release; do \n  chart_details=$(kubectl get ${RESOURCE_NAME} \"\
    $release\" -n \"$namespace\" --context \"$context\" -o json | jq -r '.spec.chart.spec\
    \ // empty')\n  \n  if [[ -n \"$chart_details\" ]]; then \n    chart_kind=$(echo\
    \ \"$chart_details\" | jq -r '.sourceRef.kind // empty')\n    chart_name=$(echo\
    \ \"$chart_details\" | jq -r '.chart // empty')\n    chart_source_name=$(echo\
    \ \"$chart_details\" | jq -r '.sourceRef.name // empty')\n    chart_namespace=$(echo\
    \ \"$chart_details\" | jq -r '.sourceRef.namespace // empty')\n    chart_version=$(echo\
    \ \"$chart_details\" | jq -r '.version // \"N/A\"')\n    \n    if [[ \"$chart_kind\"\
    \ == \"HelmRepository\" && -n \"$chart_name\" && -n \"$chart_namespace\" ]]; then\
    \ \n      repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io \"\
    $chart_source_name\" -n \"$chart_namespace\" --context \"$context\" -o json |\
    \ jq -r '.spec.url // empty')\n      \n      if [[ -n \"$repo_url\" ]]; then \n\
    \        temp_repo_name=\"$chart_source_name-temp-$release\"\n        add_repo=$(helm\
    \ repo add \"$temp_repo_name\" \"$repo_url\")\n        available_chart_version=$(helm\
    \ search repo \"$temp_repo_name\"/\"$chart_name\" --version \">$chart_version\"\
    \ --output json | jq -r '.[].version')\n        \n        if [[ -n \"$available_chart_version\"\
    \ ]]; then \n          sorted_versions=($(echo \"${available_chart_version[@]}\"\
    \ | tr ' ' '\\n' | sort -V))\n          available_version=${sorted_versions[-1]}\n\
    \          version_update_available=\"True\"\n        else \n          available_version=\"\
    N/A\" \n          version_update_available=\"False\"\n        fi\n        \n \
    \       remove_repo=$(helm repo remove \"$temp_repo_name\")\n      else \n   \
    \     available_version=\"N/A\" \n        version_update_available=\"False\"\n\
    \      fi\n    else \n      available_version=\"N/A\" \n      version_update_available=\"\
    False\"\n    fi\n  else \n    chart_name=\"N/A\" \n    chart_namespace=\"N/A\"\
    \ \n    chart_version=\"N/A\" \n    available_version=\"N/A\" \n    version_update_available=\"\
    False\"\n  fi\n  \n  echo \"Release: $release | Chart: $chart_namespace/$chart_name\
    \ | Installed Version: $chart_version | Available Update: $version_update_available\
    \ | Available Version: $available_version\"\ndone\n```"
  name: check_for_available_helm_chart_updates_in_namespace_namespace
