commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Context](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command is used to retrieve information about a specific Kubernetes
    resource within a specified namespace and context. The resource name, namespace,
    and context are all specified using the respective placeholders.
  multi_line_details: "# Set the variable RESOURCE_NAME to the desired resource type\
    \ (e.g. pods, deployments)\nRESOURCE_NAME=pods\n\n# Set the variable NAMESPACE\
    \ to the desired Kubernetes namespace\nNAMESPACE=my-namespace\n\n# Set the variable\
    \ CONTEXT to the desired Kubernetes context \nCONTEXT=my-context\n\n# Use kubectl\
    \ command to get the specified resource in the specified namespace and context\n\
    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}"
  name: list_all_available_fluxcd_helmreleases_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[*]}{''\nName:
    ''}{@.metadata.name}{''\nlastAppliedRevision:''}{@.status.lastAppliedRevision}{''\nlastAttemptedRevision:''}{@.status.lastAttemptedRevision}{''\n---''}{end}"
    --context ${CONTEXT} || true'
  doc_links: '

    - [Kubernetes kubectl basic commands](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#basic-commands){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [JSON formatting options in kubectl](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command retrieves specific resource information from a specified
    namespace in your Kubernetes cluster and formats the output in a specific JSON
    format. If the command fails, it will return a success status.
  multi_line_details: '# Store the resource name in a variable

    RESOURCE_NAME="your-resource-name"


    # Store the namespace in a variable

    NAMESPACE="your-namespace"


    # Store the context in a variable

    CONTEXT="your-context-name"


    # Use kubectl get command to retrieve information about the specified resource
    and namespace in JSON format

    # Then use jsonpath to format the output as per your requirements

    # If the command fails, continue executing the script without throwing an error

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[*]}{''\nName:
    ''}{@.metadata.name}{''\nlastAppliedRevision:''}{@.status.lastAppliedRevision}{''\nlastAttemptedRevision:''}{@.status.lastAttemptedRevision}{''\n---''}{end}"
    --context ${CONTEXT} || true'
  name: fetch_installed_fluxcd_helmrelease_versions_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT}
    | jq -r ''.items[] | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)
    | "Name: " + .metadata.name + " Last Attempted Version: " + .status.lastAttemptedRevision
    + " Last Applied Revision: " + .status.lastAppliedRevision'''
  doc_links: '

    '
  explanation: This command is used to retrieve information about a specific Kubernetes
    resource in a particular namespace, using the specified context. It then processes
    the output using `jq` to filter and format it, displaying the resource's name,
    last attempted version, and last applied revision if they are different.
  multi_line_details: '# Store the result of kubectl get command in a variable

    result=$(kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT})


    # Pipe the result to jq and filter for specific conditions

    selected_result=$(echo $result | jq -r ''.items[] | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)
    | "Name: " + .metadata.name + " Last Attempted Version: " + .status.lastAttemptedRevision
    + " Last Applied Revision: " + .status.lastAppliedRevision'')


    # Output the selected results

    echo $selected_result'
  name: fetch_mismatched_fluxcd_helmrelease_version_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[?(@.status.conditions[].status==''False'')]}{''-----\nName:
    ''}{@.metadata.name}{''\n''}{@.status.conditions[*].message}{''\n''}{end}" --context
    ${CONTEXT} || true'
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Concepts](https://kubernetes.io/docs/concepts/){:target="_blank"}

    - [kubectl get documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}'
  explanation: This command uses kubectl to get information about a specific type
    of Kubernetes resource in a specific namespace and outputs the names and status
    messages of any items with a condition status of 'False,' while also displaying
    a line of dashes before each item. If no items meet the criteria, it will return
    true.
  multi_line_details: "# This is a multiline kubectl command that fetches specific\
    \ information from the Kubernetes cluster. \n# It uses the kubectl get command\
    \ with jsonpath formatting to filter and display data based on certain conditions.\n\
    # The || true at the end ensures that the command exits with a successful status\
    \ code even if it encounters an error.\n\nkubectl get ${RESOURCE_NAME} \\    #\
    \ using the kubectl get command to retrieve specific resource information\n  -n\
    \ ${NAMESPACE} \\               # specifying the namespace where the resource\
    \ is located\n  -o=jsonpath=\"{range .items[?(@.status.conditions[].status=='False')]}{'-----\\\
    nName: '}{@.metadata.name}{'\\n'}{@.status.conditions[*].message}{'\\n'}{end}\"\
    \ \\\n    # using jsonpath to format the output based on the condition specified,\
    \ displaying name and message\n  --context ${CONTEXT} || true    # specifying\
    \ the kubernetes context and ensuring the command exits successfully even if it\
    \ encounters an error"
  name: fetch_fluxcd_helmrelease_error_messages_in_namespace_namespace
- command: 'namespace="${NAMESPACE}" context="${CONTEXT}"; helm_releases=$(kubectl
    get ${RESOURCE_NAME} -n "$namespace" --context "$context" -o json | jq -r ''.items[]
    | .metadata.name''); echo "$helm_releases" | while IFS= read -r release; do chart_details=$(kubectl
    get ${RESOURCE_NAME} "$release" -n "$namespace" --context "$context" -o json |
    jq -r ''.spec.chart.spec // empty''); if [[ -n "$chart_details" ]]; then chart_kind=$(echo
    "$chart_details" | jq -r ''.sourceRef.kind // empty''); chart_name=$(echo "$chart_details"
    | jq -r ''.chart // empty''); chart_source_name=$(echo "$chart_details" | jq -r
    ''.sourceRef.name // empty''); chart_namespace=$(echo "$chart_details" | jq -r
    ''.sourceRef.namespace // empty''); chart_version=$(echo "$chart_details" | jq
    -r ''.version // "N/A"''); if [[ "$chart_kind" == "HelmRepository" && -n "$chart_name"
    && -n "$chart_namespace" ]]; then repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io
    "$chart_source_name" -n "$chart_namespace" --context "$context" -o json | jq -r
    ''.spec.url // empty''); if [[ -n "$repo_url" ]]; then temp_repo_name="$chart_source_name-temp-$release";
    add_repo=$(helm repo add "$temp_repo_name" "$repo_url"); available_chart_version=$(helm
    search repo "$temp_repo_name"/"$chart_name" --version ">$chart_version" --output
    json | jq -r ''.[].version''); if [[ -n "$available_chart_version" ]]; then sorted_versions=($(echo
    "\${available_chart_version[@]}" | tr '' '' ''\n'' | sort -V)); available_version=\${sorted_versions[-1]};
    version_update_available="True"; else available_version="N/A"; version_update_available="False";
    fi; remove_repo=$(helm repo remove "$temp_repo_name"); else available_version="N/A";
    version_update_available="False"; fi; else available_version="N/A"; version_update_available="False";
    fi; else chart_name="N/A"; chart_namespace="N/A"; chart_version="N/A"; available_version="N/A";
    version_update_available="False"; fi; echo "Release: $release | Chart: $chart_namespace/$chart_name
    | Installed Version: $chart_version | Available Update: $version_update_available
    | Available Version: $available_version"; done'
  doc_links: '

    - [Kubernetes kubectl Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Helm Documentation](https://helm.sh/docs/){:target="_blank"}

    - [Helm Chart Repository Documentation](https://helm.sh/docs/topics/chart_repository/){:target="_blank"}'
  explanation: This command uses the Kubernetes kubectl and Helm tools to gather information
    about Helm releases in a given namespace and context. It then checks for available
    updates for each release's associated chart from a Helm repository and reports
    the results.
  multi_line_details: "```bash\n# Set the namespace and context variables for the\
    \ kubectl command\nnamespace=\"${NAMESPACE}\" \ncontext=\"${CONTEXT}\"\n\n# Get\
    \ a list of helm releases in the specified namespace and context\nhelm_releases=$(kubectl\
    \ get ${RESOURCE_NAME} -n \"$namespace\" --context \"$context\" -o json | jq -r\
    \ '.items[] | .metadata.name')\n\n# Iterate through each release and retrieve\
    \ chart details\necho \"$helm_releases\" | while IFS= read -r release; do\n  \
    \  chart_details=$(kubectl get ${RESOURCE_NAME} \"$release\" -n \"$namespace\"\
    \ --context \"$context\" -o json | jq -r '.spec.chart.spec // empty')\n    \n\
    \    # Process chart details if they exist\n    if [[ -n \"$chart_details\" ]];\
    \ then\n        chart_kind=$(echo \"$chart_details\" | jq -r '.sourceRef.kind\
    \ // empty')\n        chart_name=$(echo \"$chart_details\" | jq -r '.chart //\
    \ empty')\n        chart_source_name=$(echo \"$chart_details\" | jq -r '.sourceRef.name\
    \ // empty')\n        chart_namespace=$(echo \"$chart_details\" | jq -r '.sourceRef.namespace\
    \ // empty')\n        chart_version=$(echo \"$chart_details\" | jq -r '.version\
    \ // \"N/A\"')\n        \n        # Check if it's a HelmRepository and has necessary\
    \ details\n        if [[ \"$chart_kind\" == \"HelmRepository\" && -n \"$chart_name\"\
    \ && -n \"$chart_namespace\" ]]; then\n            repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io\
    \ \"$chart_source_name\" -n \"$chart_namespace\" --context \"$context\" -o json\
    \ | jq -r '.spec.url // empty')\n            \n            # Proceed if repo URL\
    \ is available\n            if [[ -n \"$repo_url\" ]]; then\n                temp_repo_name=\"\
    $chart_source_name-temp-$release\"\n                \n                # Add the\
    \ temporary repo and search for available chart version\n                add_repo=$(helm\
    \ repo add \"$temp_repo_name\" \"$repo_url\")\n                available_chart_version=$(helm\
    \ search repo \"$temp_repo_name\"/\"$chart_name\" --version \">$chart_version\"\
    \ --output json | jq -r '.[].version')\n                \n                # Determine\
    \ the latest available version and update flag\n                if [[ -n \"$available_chart_version\"\
    \ ]]; then\n                    sorted_versions=($(echo \"${available_chart_version[@]}\"\
    \ | tr ' ' '\\n' | sort -V))\n                    available_version=${sorted_versions[-1]}\n\
    \                    version_update_available=\"True\"\n                else\n\
    \                    available_version=\"N/A\"\n                    version_update_available=\"\
    False\"\n                fi\n                \n                # Remove the temporary\
    \ repo\n                remove_repo=$(helm repo remove \"$temp_repo_name\")\n\
    \            else\n                available_version=\"N/A\"\n               \
    \ version_update_available=\"False\"\n            fi\n        else\n         \
    \   available_version=\"N/A\"\n            version_update_available=\"False\"\n\
    \        fi\n    else\n        chart_name=\"N/A\"\n        chart_namespace=\"\
    N/A\"\n        chart_version=\"N/A\"\n        available_version=\"N/A\"\n    \
    \    version_update_available=\"False\"\n    fi\n    \n    # Output the release,\
    \ chart details, installed version, and update information\n    echo \"Release:\
    \ $release | Chart: $chart_namespace/$chart_name | Installed Version: $chart_version\
    \ | Available Update: $version_update_available | Available Version: $available_version\"\
    \ndone\n```"
  name: check_for_available_helm_chart_updates_in_namespace_namespace
