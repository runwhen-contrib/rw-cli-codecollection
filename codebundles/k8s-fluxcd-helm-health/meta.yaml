commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    within a specific namespace and context. It is a way to access and view details
    about the specified resource in a particular environment or cluster.
  multi_line_details: '# First, let''s list all the resources in a specific namespace
    within a context


    # Replace ${RESOURCE_NAME} with the name of the resource you want to retrieve,
    such as pods, deployments, services, etc.

    # Replace ${NAMESPACE} with the name of the namespace where the resource is located

    # Replace ${CONTEXT} with the name of the Kubernetes context you want to use


    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}'
  name: list_all_available_fluxcd_helmreleases_in_namespace_namespace
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    within a specific namespace and context. It is a way to access and view details
    about the specified resource in a particular environment or cluster.
  multi_line_details: '# First, let''s list all the resources in a specific namespace
    within a context


    # Replace ${RESOURCE_NAME} with the name of the resource you want to retrieve,
    such as pods, deployments, services, etc.

    # Replace ${NAMESPACE} with the name of the namespace where the resource is located

    # Replace ${CONTEXT} with the name of the Kubernetes context you want to use


    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}'
  name: list_all_available_fluxcd_helmreleases_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[*]}{''\nName:
    ''}{@.metadata.name}{''\nlastAppliedRevision:''}{@.status.lastAppliedRevision}{''\nlastAttemptedRevision:''}{@.status.lastAttemptedRevision}{''\n---''}{end}"
    --context ${CONTEXT} || true'
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [JSONPath Examples in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve specific information about a
    resource in a particular namespace, using JSONPath to format the output, and specifying
    a context for the command to run in. The "|| true" part at the end ensures that
    the command will return a successful status code even if it encounters an error.
  multi_line_details: "\n# This command uses kubectl to get information about a specific\
    \ resource in a given namespace and outputs it in a custom format.\n# Replace\
    \ ${RESOURCE_NAME} with the name of the Kubernetes resource you want to get information\
    \ about, e.g., pod, deployment, etc.\n# Replace ${NAMESPACE} with the name of\
    \ the Kubernetes namespace where the resource is located.\n# Replace ${CONTEXT}\
    \ with the name of the Kubernetes context to use.\n\nkubectl get ${RESOURCE_NAME}\
    \ -n ${NAMESPACE} \\\n  -o=jsonpath=\"{range .items[*]}{'\\nName: '}{@.metadata.name}{'\\\
    nlastAppliedRevision:'}{@.status.lastAppliedRevision}{'\\nlastAttemptedRevision:'}{@.status.lastAttemptedRevision}{'\\\
    n---'}{end}\" \\\n  --context ${CONTEXT} || true\n\n\nBy breaking down the command\
    \ into multiple lines and providing helpful comments, newer or less experienced\
    \ devops engineers can better understand what each part of the command does and\
    \ how to customize it for their specific needs."
  name: fetch_installed_fluxcd_helmrelease_versions_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[*]}{''\nName:
    ''}{@.metadata.name}{''\nlastAppliedRevision:''}{@.status.lastAppliedRevision}{''\nlastAttemptedRevision:''}{@.status.lastAttemptedRevision}{''\n---''}{end}"
    --context ${CONTEXT} || true'
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [JSONPath Examples in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve specific information about a
    resource in a particular namespace, using JSONPath to format the output, and specifying
    a context for the command to run in. The "|| true" part at the end ensures that
    the command will return a successful status code even if it encounters an error.
  multi_line_details: "\n# This command uses kubectl to get information about a specific\
    \ resource in a given namespace and outputs it in a custom format.\n# Replace\
    \ ${RESOURCE_NAME} with the name of the Kubernetes resource you want to get information\
    \ about, e.g., pod, deployment, etc.\n# Replace ${NAMESPACE} with the name of\
    \ the Kubernetes namespace where the resource is located.\n# Replace ${CONTEXT}\
    \ with the name of the Kubernetes context to use.\n\nkubectl get ${RESOURCE_NAME}\
    \ -n ${NAMESPACE} \\\n  -o=jsonpath=\"{range .items[*]}{'\\nName: '}{@.metadata.name}{'\\\
    nlastAppliedRevision:'}{@.status.lastAppliedRevision}{'\\nlastAttemptedRevision:'}{@.status.lastAttemptedRevision}{'\\\
    n---'}{end}\" \\\n  --context ${CONTEXT} || true\n\n\nBy breaking down the command\
    \ into multiple lines and providing helpful comments, newer or less experienced\
    \ devops engineers can better understand what each part of the command does and\
    \ how to customize it for their specific needs."
  name: fetch_installed_fluxcd_helmrelease_versions_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT}
    | jq -r ''.items[] | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)
    | "Name: " + .metadata.name + " Last Attempted Version: " + .status.lastAttemptedRevision
    + " Last Applied Revision: " + .status.lastAppliedRevision'''
  doc_links: '

    '
  explanation: This command retrieves the specified Kubernetes resource in the specified
    namespace and context, outputs it as JSON, and then filters the results to display
    only the items that have a different last applied revision from the last attempted
    revision, along with their name and revision information.
  multi_line_details: "\n# Use kubectl to get the resource with a specific name in\
    \ a specific namespace, output as JSON, using a specific context\nkubectl get\
    \ ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT} \\\n\n# Pipe the\
    \ result to jq to filter and format the output\n| jq -r '.items[] \n  | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)\
    \ \n  | \"Name: \" + .metadata.name \n  + \" Last Attempted Version: \" + .status.lastAttemptedRevision\
    \ \n  + \" Last Applied Revision: \" + .status.lastAppliedRevision'\n\n\nIn this\
    \ multi-line command, we break down the process of fetching and processing data\
    \ on Kubernetes resources in a more understandable way. By adding comments, newer\
    \ or less experienced devops engineers can better understand what each part of\
    \ the command does."
  name: fetch_mismatched_fluxcd_helmrelease_version_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT}
    | jq -r ''.items[] | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)
    | "Name: " + .metadata.name + " Last Attempted Version: " + .status.lastAttemptedRevision
    + " Last Applied Revision: " + .status.lastAppliedRevision'''
  doc_links: '

    '
  explanation: This command retrieves the specified Kubernetes resource in the specified
    namespace and context, outputs it as JSON, and then filters the results to display
    only the items that have a different last applied revision from the last attempted
    revision, along with their name and revision information.
  multi_line_details: "\n# Use kubectl to get the resource with a specific name in\
    \ a specific namespace, output as JSON, using a specific context\nkubectl get\
    \ ${RESOURCE_NAME} -n ${NAMESPACE} -o json --context ${CONTEXT} \\\n\n# Pipe the\
    \ result to jq to filter and format the output\n| jq -r '.items[] \n  | select(.status.lastAppliedRevision!=.status.lastAttemptedRevision)\
    \ \n  | \"Name: \" + .metadata.name \n  + \" Last Attempted Version: \" + .status.lastAttemptedRevision\
    \ \n  + \" Last Applied Revision: \" + .status.lastAppliedRevision'\n\n\nIn this\
    \ multi-line command, we break down the process of fetching and processing data\
    \ on Kubernetes resources in a more understandable way. By adding comments, newer\
    \ or less experienced devops engineers can better understand what each part of\
    \ the command does."
  name: fetch_mismatched_fluxcd_helmrelease_version_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[?(@.status.conditions[].status==''False'')]}{''-----\nName:
    ''}{@.metadata.name}{''\n''}{@.status.conditions[*].message}{''\n''}{end}" --context
    ${CONTEXT} || true'
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl explain](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#explain){:target="_blank"}

    - [Status conditions in Kubernetes](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase){:target="_blank"}'
  explanation: This command retrieves a list of specific resources in a specified
    namespace, and then filters out the items that have a status condition of 'False'.
    It then outputs the name of the resource and its corresponding status condition
    message, with a line of dashes separating each resource. After executing the command,
    it will return a success status regardless of whether any resources were found
    or not.
  multi_line_details: '

    # This command is used to retrieve specific resource information from a Kubernetes
    cluster.


    # Replace `${RESOURCE_NAME}` with the name of the Kubernetes resource you want
    to query.

    # Replace `${NAMESPACE}` with the namespace in which the resource resides.

    # Replace `${CONTEXT}` with the context of the Kubernetes cluster you want to
    use.


    # The following command retrieves the specified resource using kubectl and outputs
    the result in a custom format.

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[?(@.status.conditions[].status==''False'')]}{''-----\nName:
    ''}{@.metadata.name}{''\n''}{@.status.conditions[*].message}{''\n''}{end}" --context
    ${CONTEXT}


    # In case the command fails (e.g., due to the resource not existing), the `||
    true` statement ensures that the overall exit status of the command is successful,
    allowing it to continue without causing an error.

    '
  name: fetch_fluxcd_helmrelease_error_messages_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[?(@.status.conditions[].status==''False'')]}{''-----\nName:
    ''}{@.metadata.name}{''\n''}{@.status.conditions[*].message}{''\n''}{end}" --context
    ${CONTEXT} || true'
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl explain](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#explain){:target="_blank"}

    - [Status conditions in Kubernetes](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase){:target="_blank"}'
  explanation: This command retrieves a list of specific resources in a specified
    namespace, and then filters out the items that have a status condition of 'False'.
    It then outputs the name of the resource and its corresponding status condition
    message, with a line of dashes separating each resource. After executing the command,
    it will return a success status regardless of whether any resources were found
    or not.
  multi_line_details: '

    # This command is used to retrieve specific resource information from a Kubernetes
    cluster.


    # Replace `${RESOURCE_NAME}` with the name of the Kubernetes resource you want
    to query.

    # Replace `${NAMESPACE}` with the namespace in which the resource resides.

    # Replace `${CONTEXT}` with the context of the Kubernetes cluster you want to
    use.


    # The following command retrieves the specified resource using kubectl and outputs
    the result in a custom format.

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} -o=jsonpath="{range .items[?(@.status.conditions[].status==''False'')]}{''-----\nName:
    ''}{@.metadata.name}{''\n''}{@.status.conditions[*].message}{''\n''}{end}" --context
    ${CONTEXT}


    # In case the command fails (e.g., due to the resource not existing), the `||
    true` statement ensures that the overall exit status of the command is successful,
    allowing it to continue without causing an error.

    '
  name: fetch_fluxcd_helmrelease_error_messages_in_namespace_namespace
- command: 'namespace="${NAMESPACE}" context="${CONTEXT}"; helm_releases=$(kubectl
    get ${RESOURCE_NAME} -n "$namespace" --context "$context" -o json | jq -r ''.items[]
    | .metadata.name''); echo "$helm_releases" | while IFS= read -r release; do chart_details=$(kubectl
    get ${RESOURCE_NAME} "$release" -n "$namespace" --context "$context" -o json |
    jq -r ''.spec.chart.spec // empty''); if [[ -n "$chart_details" ]]; then chart_kind=$(echo
    "$chart_details" | jq -r ''.sourceRef.kind // empty''); chart_name=$(echo "$chart_details"
    | jq -r ''.chart // empty''); chart_source_name=$(echo "$chart_details" | jq -r
    ''.sourceRef.name // empty''); chart_namespace=$(echo "$chart_details" | jq -r
    ''.sourceRef.namespace // empty''); chart_version=$(echo "$chart_details" | jq
    -r ''.version // "N/A"''); if [[ "$chart_kind" == "HelmRepository" && -n "$chart_name"
    && -n "$chart_namespace" ]]; then repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io
    "$chart_source_name" -n "$chart_namespace" --context "$context" -o json | jq -r
    ''.spec.url // empty''); if [[ -n "$repo_url" ]]; then temp_repo_name="$chart_source_name-temp-$release";
    add_repo=$(helm repo add "$temp_repo_name" "$repo_url"); available_chart_version=$(helm
    search repo "$temp_repo_name"/"$chart_name" --version ">$chart_version" --output
    json | jq -r ''.[].version''); if [[ -n "$available_chart_version" ]]; then sorted_versions=($(echo
    "\${available_chart_version[@]}" | tr '' '' ''\n'' | sort -V)); available_version=\${sorted_versions[-1]};
    version_update_available="True"; else available_version="N/A"; version_update_available="False";
    fi; remove_repo=$(helm repo remove "$temp_repo_name"); else available_version="N/A";
    version_update_available="False"; fi; else available_version="N/A"; version_update_available="False";
    fi; else chart_name="N/A"; chart_namespace="N/A"; chart_version="N/A"; available_version="N/A";
    version_update_available="False"; fi; echo "Release: $release | Chart: $chart_namespace/$chart_name
    | Installed Version: $chart_version | Available Update: $version_update_available
    | Available Version: $available_version"; done'
  doc_links: '

    - [Helm](https://helm.sh/docs/){:target="_blank"}

    - [Kubernetes cluster](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Helm releases](https://artifacthub.io/packages/helm){:target="_blank"}

    - [Chart details](https://helm.sh/docs/topics/charts/){:target="_blank"}

    - [Available updates for charts](https://helm.sh/docs/howto/charts_tips_and_tricks/){:target="_blank"}

    - [Summary for each release](https://helm.sh/docs/related/){:target="_blank"}'
  explanation: This command retrieves information about Helm releases in a Kubernetes
    cluster, including chart details and available updates for the charts. It then
    prints out a summary for each release, including the installed version and whether
    an update is available.
  multi_line_details: "\n# Set the namespace and context variables for use in the\
    \ command\nnamespace=\"${NAMESPACE}\"\ncontext=\"${CONTEXT}\"\n\n# Get a list\
    \ of helm releases in the specified namespace and context\nhelm_releases=$(kubectl\
    \ get ${RESOURCE_NAME} -n \"$namespace\" --context \"$context\" -o json | jq -r\
    \ '.items[] | .metadata.name')\n\n# Iterate through each helm release\necho \"\
    $helm_releases\" | while IFS= read -r release; do\n\n  # Get details about the\
    \ helm chart for the current release\n  chart_details=$(kubectl get ${RESOURCE_NAME}\
    \ \"$release\" -n \"$namespace\" --context \"$context\" -o json | jq -r '.spec.chart.spec\
    \ // empty')\n\n  # Check if the chart details exist\n  if [[ -n \"$chart_details\"\
    \ ]]; then\n    \n    # Extract specific details such as kind, name, namespace,\
    \ version\n    chart_kind=$(echo \"$chart_details\" | jq -r '.sourceRef.kind //\
    \ empty')\n    chart_name=$(echo \"$chart_details\" | jq -r '.chart // empty')\n\
    \    chart_source_name=$(echo \"$chart_details\" | jq -r '.sourceRef.name // empty')\n\
    \    chart_namespace=$(echo \"$chart_details\" | jq -r '.sourceRef.namespace //\
    \ empty')\n    chart_version=$(echo \"$chart_details\" | jq -r '.version // \"\
    N/A\"')\n\n    # Check if the chart kind is HelmRepository and relevant information\
    \ exists\n    if [[ \"$chart_kind\" == \"HelmRepository\" && -n \"$chart_name\"\
    \ && -n \"$chart_namespace\" ]]; then\n      \n      # Get the repository URL\
    \ for the chart\n      repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io\
    \ \"$chart_source_name\" -n \"$chart_namespace\" --context \"$context\" -o json\
    \ | jq -r '.spec.url // empty')\n\n      # If the repository URL exists, proceed\
    \ with checking for available updates\n      if [[ -n \"$repo_url\" ]]; then\n\
    \        \n        # Add the temporary repo for the chart to check available versions\n\
    \        temp_repo_name=\"$chart_source_name-temp-$release\"\n        add_repo=$(helm\
    \ repo add \"$temp_repo_name\" \"$repo_url\")\n        \n        # Check for the\
    \ latest available version of the chart\n        available_chart_version=$(helm\
    \ search repo \"$temp_repo_name\"/\"$chart_name\" --version \">$chart_version\"\
    \ --output json | jq -r '.[].version')\n        \n        # If there is an available\
    \ version, update the available_version variable\n        if [[ -n \"$available_chart_version\"\
    \ ]]; then\n          sorted_versions=($(echo \"\\${available_chart_version[@]}\"\
    \ | tr ' ' '\\n' | sort -V))\n          available_version=${sorted_versions[-1]}\n\
    \          version_update_available=\"True\"\n        else\n          available_version=\"\
    N/A\"\n          version_update_available=\"False\"\n        fi\n        \n  \
    \      # Remove the temporary repo\n        remove_repo=$(helm repo remove \"\
    $temp_repo_name\")\n\n      else\n        available_version=\"N/A\"\n        version_update_available=\"\
    False\"\n      fi\n\n    else\n      available_version=\"N/A\"\n      version_update_available=\"\
    False\"\n    fi\n\n  else \n    chart_name=\"N/A\"\n    chart_namespace=\"N/A\"\
    \n    chart_version=\"N/A\"\n    available_version=\"N/A\"\n    version_update_available=\"\
    False\"\n  fi\n\n  # Display the release, chart details, and update information\n\
    \  echo \"Release: $release | Chart: $chart_namespace/$chart_name | Installed\
    \ Version: $chart_version | Available Update: $version_update_available | Available\
    \ Version: $available_version\"\n\ndone\n"
  name: check_for_available_helm_chart_updates_in_namespace_namespace
- command: 'namespace="${NAMESPACE}" context="${CONTEXT}"; helm_releases=$(kubectl
    get ${RESOURCE_NAME} -n "$namespace" --context "$context" -o json | jq -r ''.items[]
    | .metadata.name''); echo "$helm_releases" | while IFS= read -r release; do chart_details=$(kubectl
    get ${RESOURCE_NAME} "$release" -n "$namespace" --context "$context" -o json |
    jq -r ''.spec.chart.spec // empty''); if [[ -n "$chart_details" ]]; then chart_kind=$(echo
    "$chart_details" | jq -r ''.sourceRef.kind // empty''); chart_name=$(echo "$chart_details"
    | jq -r ''.chart // empty''); chart_source_name=$(echo "$chart_details" | jq -r
    ''.sourceRef.name // empty''); chart_namespace=$(echo "$chart_details" | jq -r
    ''.sourceRef.namespace // empty''); chart_version=$(echo "$chart_details" | jq
    -r ''.version // "N/A"''); if [[ "$chart_kind" == "HelmRepository" && -n "$chart_name"
    && -n "$chart_namespace" ]]; then repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io
    "$chart_source_name" -n "$chart_namespace" --context "$context" -o json | jq -r
    ''.spec.url // empty''); if [[ -n "$repo_url" ]]; then temp_repo_name="$chart_source_name-temp-$release";
    add_repo=$(helm repo add "$temp_repo_name" "$repo_url"); available_chart_version=$(helm
    search repo "$temp_repo_name"/"$chart_name" --version ">$chart_version" --output
    json | jq -r ''.[].version''); if [[ -n "$available_chart_version" ]]; then sorted_versions=($(echo
    "\${available_chart_version[@]}" | tr '' '' ''\n'' | sort -V)); available_version=\${sorted_versions[-1]};
    version_update_available="True"; else available_version="N/A"; version_update_available="False";
    fi; remove_repo=$(helm repo remove "$temp_repo_name"); else available_version="N/A";
    version_update_available="False"; fi; else available_version="N/A"; version_update_available="False";
    fi; else chart_name="N/A"; chart_namespace="N/A"; chart_version="N/A"; available_version="N/A";
    version_update_available="False"; fi; echo "Release: $release | Chart: $chart_namespace/$chart_name
    | Installed Version: $chart_version | Available Update: $version_update_available
    | Available Version: $available_version"; done'
  doc_links: '

    - [Helm](https://helm.sh/docs/){:target="_blank"}

    - [Kubernetes cluster](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Helm releases](https://artifacthub.io/packages/helm){:target="_blank"}

    - [Chart details](https://helm.sh/docs/topics/charts/){:target="_blank"}

    - [Available updates for charts](https://helm.sh/docs/howto/charts_tips_and_tricks/){:target="_blank"}

    - [Summary for each release](https://helm.sh/docs/related/){:target="_blank"}'
  explanation: This command retrieves information about Helm releases in a Kubernetes
    cluster, including chart details and available updates for the charts. It then
    prints out a summary for each release, including the installed version and whether
    an update is available.
  multi_line_details: "\n# Set the namespace and context variables for use in the\
    \ command\nnamespace=\"${NAMESPACE}\"\ncontext=\"${CONTEXT}\"\n\n# Get a list\
    \ of helm releases in the specified namespace and context\nhelm_releases=$(kubectl\
    \ get ${RESOURCE_NAME} -n \"$namespace\" --context \"$context\" -o json | jq -r\
    \ '.items[] | .metadata.name')\n\n# Iterate through each helm release\necho \"\
    $helm_releases\" | while IFS= read -r release; do\n\n  # Get details about the\
    \ helm chart for the current release\n  chart_details=$(kubectl get ${RESOURCE_NAME}\
    \ \"$release\" -n \"$namespace\" --context \"$context\" -o json | jq -r '.spec.chart.spec\
    \ // empty')\n\n  # Check if the chart details exist\n  if [[ -n \"$chart_details\"\
    \ ]]; then\n    \n    # Extract specific details such as kind, name, namespace,\
    \ version\n    chart_kind=$(echo \"$chart_details\" | jq -r '.sourceRef.kind //\
    \ empty')\n    chart_name=$(echo \"$chart_details\" | jq -r '.chart // empty')\n\
    \    chart_source_name=$(echo \"$chart_details\" | jq -r '.sourceRef.name // empty')\n\
    \    chart_namespace=$(echo \"$chart_details\" | jq -r '.sourceRef.namespace //\
    \ empty')\n    chart_version=$(echo \"$chart_details\" | jq -r '.version // \"\
    N/A\"')\n\n    # Check if the chart kind is HelmRepository and relevant information\
    \ exists\n    if [[ \"$chart_kind\" == \"HelmRepository\" && -n \"$chart_name\"\
    \ && -n \"$chart_namespace\" ]]; then\n      \n      # Get the repository URL\
    \ for the chart\n      repo_url=$(kubectl get helmrepositories.source.toolkit.fluxcd.io\
    \ \"$chart_source_name\" -n \"$chart_namespace\" --context \"$context\" -o json\
    \ | jq -r '.spec.url // empty')\n\n      # If the repository URL exists, proceed\
    \ with checking for available updates\n      if [[ -n \"$repo_url\" ]]; then\n\
    \        \n        # Add the temporary repo for the chart to check available versions\n\
    \        temp_repo_name=\"$chart_source_name-temp-$release\"\n        add_repo=$(helm\
    \ repo add \"$temp_repo_name\" \"$repo_url\")\n        \n        # Check for the\
    \ latest available version of the chart\n        available_chart_version=$(helm\
    \ search repo \"$temp_repo_name\"/\"$chart_name\" --version \">$chart_version\"\
    \ --output json | jq -r '.[].version')\n        \n        # If there is an available\
    \ version, update the available_version variable\n        if [[ -n \"$available_chart_version\"\
    \ ]]; then\n          sorted_versions=($(echo \"\\${available_chart_version[@]}\"\
    \ | tr ' ' '\\n' | sort -V))\n          available_version=${sorted_versions[-1]}\n\
    \          version_update_available=\"True\"\n        else\n          available_version=\"\
    N/A\"\n          version_update_available=\"False\"\n        fi\n        \n  \
    \      # Remove the temporary repo\n        remove_repo=$(helm repo remove \"\
    $temp_repo_name\")\n\n      else\n        available_version=\"N/A\"\n        version_update_available=\"\
    False\"\n      fi\n\n    else\n      available_version=\"N/A\"\n      version_update_available=\"\
    False\"\n    fi\n\n  else \n    chart_name=\"N/A\"\n    chart_namespace=\"N/A\"\
    \n    chart_version=\"N/A\"\n    available_version=\"N/A\"\n    version_update_available=\"\
    False\"\n  fi\n\n  # Display the release, chart details, and update information\n\
    \  echo \"Release: $release | Chart: $chart_namespace/$chart_name | Installed\
    \ Version: $chart_version | Available Update: $version_update_available | Available\
    \ Version: $available_version\"\n\ndone\n"
  name: check_for_available_helm_chart_updates_in_namespace_namespace
