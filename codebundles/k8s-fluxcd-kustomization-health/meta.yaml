commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    within a specific namespace and context. It is a way to access and view details
    about the specified resource in a particular environment or cluster.
  multi_line_details: '# First, let''s list all the resources in a specific namespace
    within a context


    # Replace ${RESOURCE_NAME} with the name of the resource you want to retrieve,
    such as pods, deployments, services, etc.

    # Replace ${NAMESPACE} with the name of the namespace where the resource is located

    # Replace ${CONTEXT} with the name of the Kubernetes context you want to use


    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}'
  name: list_all_available_kustomization_objects_in_namespace_namespace
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    within a specific namespace and context. It is a way to access and view details
    about the specified resource in a particular environment or cluster.
  multi_line_details: '# First, let''s list all the resources in a specific namespace
    within a context


    # Replace ${RESOURCE_NAME} with the name of the resource you want to retrieve,
    such as pods, deployments, services, etc.

    # Replace ${NAMESPACE} with the name of the namespace where the resource is located

    # Replace ${CONTEXT} with the name of the Kubernetes context you want to use


    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}'
  name: list_all_available_kustomization_objects_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq ''[.items[] | select(.status.conditions[] | select(.type == "Ready" and .status
    == "False")) | {KustomizationName: .metadata.name, ReadyStatus: {ready: (.status.conditions[]
    | select(.type == "Ready").status), message: (.status.conditions[] | select(.type
    == "Ready").message), reason: (.status.conditions[] | select(.type == "Ready").reason),
    last_transition_time: (.status.conditions[] | select(.type == "Ready").lastTransitionTime)},
    ReconcileStatus: {reconciling: (.status.conditions[] | select(.type == "Reconciling").status),
    message: (.status.conditions[] | select(.type == "Reconciling").message)}}]'''
  doc_links: '

    - [Kubernetes resource status](https://kubernetes.io/docs/reference/using-api/api-concepts/){:target="_blank"}

    - [Kubernetes namespace and context](https://kubernetes.io/docs/tasks/administer-cluster/namespaces/){:target="_blank"}

    - [Filtering resources in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/object-management/#using-kubectl){:target="_blank"}

    - [Field extraction in Kubernetes](https://kustomize.io/#functions){:target="_blank"}'
  explanation: This command retrieves information about the status of a specific Kubernetes
    resource in a particular namespace and context, then formats the results as JSON
    and filters for resources that are not ready. It then extracts specific fields
    related to the ready and reconciling status conditions.
  multi_line_details: "\n# Set the RESOURCE_NAME, NAMESPACE, and CONTEXT variables\n\
    RESOURCE_NAME=deployment\nNAMESPACE=default\nCONTEXT=minikube\n\n# Use kubectl\
    \ to get a specific resource in a namespace, format the output as JSON, and then\
    \ use jq to filter the results\nkubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o json | \\\n  jq '[.items[] | \n    select(\n      .status.conditions[]\
    \ | \n      # Select only items where the \"Ready\" condition is \"False\"\n \
    \     select(.type == \"Ready\" and .status == \"False\")\n    ) | \n    {\n \
    \     KustomizationName: .metadata.name, \n      ReadyStatus: {\n        ready:\
    \ (.status.conditions[] | select(.type == \"Ready\").status), \n        message:\
    \ (.status.conditions[] | select(.type == \"Ready\").message), \n        reason:\
    \ (.status.conditions[] | select(.type == \"Ready\").reason), \n        last_transition_time:\
    \ (.status.conditions[] | select(.type == \"Ready\").lastTransitionTime)\n   \
    \   }, \n      ReconcileStatus: {\n        reconciling: (.status.conditions[]\
    \ | select(.type == \"Reconciling\").status), \n        message: (.status.conditions[]\
    \ | select(.type == \"Reconciling\").message)\n      }\n    }\n  ]'\n\nIn this\
    \ multi-line command with helpful comments, we first set our variables for the\
    \ RESOURCE_NAME, NAMESPACE, and CONTEXT. Then we use the `kubectl` command to\
    \ retrieve information about a specific Kubernetes resource in a specified namespace,\
    \ formatting the output as JSON. We then use the `jq` tool to filter the JSON\
    \ output based on specific conditions and construct a custom JSON response.\n\n\
    By breaking down the command into multiple lines and adding explanatory comments,\
    \ newer or less experienced devops engineers can better understand the purpose\
    \ and functionality of each part of the command."
  name: get_details_for_unready_kustomizations_in_namespace_namespace
