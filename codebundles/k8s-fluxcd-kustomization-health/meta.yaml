commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  explanation: "\n\nThis command allows you to view a specific resource on a Kubernetes\
    \ cluster using the kubectl command-line utility. The kubectl command is used\
    \ to interact with a running Kubernetes cluster.\n\nThe command structure is as\
    \ follows: \nkubectl get RESOURCE_NAME -n NAMESPACE --context CONTEXT\n\nwhere\
    \ \nRESOURCE_NAME is the name of the specific type of resource that should be\
    \ retrieved,\nNAMESPACE is the namespace where the resource resides, and \nCONTEXT\
    \ is the cluster connection context in use.\n\nIn this way, the command will retrieve\
    \ the specified resource from the given namespace located on the Kubernetes cluster\
    \ pointed to by the connection context."
  multi_line_details: "\n\n# Command to get a resource, such as a pod or deployment\
    \ in Kubernetes\nkubectl get \\\n  ${RESOURCE_NAME} \\ # Name of the resource,\
    \ e.g. my-deployment\n  -n ${NAMESPACE} \\ # Namespace the resource is in, e.g.\
    \ production\n  --context ${CONTEXT} # Context to use for running Kubernetes commands,\
    \ e.g. my-cluster"
  name: list_all_available_kustomization_objects
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r ''.items[] | select (.status.conditions[] | select(.type == "Ready" and
    .status == "False")) | "---\nKustomization Name: \(.metadata.name)\n\nReady Status:
    \(.status.conditions[] | select(.type == "Ready") | "\n ready: \(.status)\n message:
    \(.message)\n reason: \(.reason)\n last_transition_time: \(.lastTransitionTime)")\n\nReconcile
    Status:\(.status.conditions[] | select(.type == "Reconciling") |"\n reconciling:
    \(.status)\n message: \(.message)")\n---\n"'''
  explanation: "\n\nThis command will print out a JSON array from the Kubernetes resource\
    \ specified (in this case, RESOURCE_NAME) within the given namespace (NAMESPACE)\
    \ and context (CONTEXT). It then uses the jq program to filter out objects in\
    \ the array with a status type of \"Ready\" and a status value of \"False\". For\
    \ these objects, it will print out the Kustomization Name, Ready Status, and Reconcile\
    \ Status.  The output will be in the following format: \n\n---\nKustomization\
    \ Name: NameOfResource\n\nReady Status: \nready: False\nmessage: Message here\n\
    reason: Reason here\nlast_transition_time: <Timestamp>\n\nReconcile Status:\n\
    reconciling: False\nmessage: Message here\n\n---"
  multi_line_details: "\n\n# The above command can be broken down into a multi-line\
    \ script for improved readability/maintainability as shown below: \n\n# Get the\
    \ specified resource name in the indicated namespace, using the given context\
    \ information. Output will be in JSON format \nGET_CMD=\"kubectl get ${RESOURCE_NAME}\
    \ -n ${NAMESPACE} --context ${CONTEXT} -o json\"\n\n# Process the JSON string\
    \ to extract relevant information and output in a standardized format\nJQ_CMD=\"\
    jq -r '.items[] | select (.status.conditions[] | select(.type == \"Ready\" and\
    \ .status == \"False\")) | \\\"---\\nKustomization Name: \\$(.metadata.name)\\\
    n\\nReady Status: \\$(.status.conditions[] | select(.type == \"Ready\") | \\\"\
    \\n ready: \\$(.status)\\n message: \\$(.message)\\n reason: \\$(.reason)\\n last_transition_time:\
    \ \\$(.lastTransitionTime)\")\\n\\nReconcile Status:\\$(.status.conditions[] |\
    \ select(.type == \"Reconciling\") |\"\\n reconciling: \\$(.status)\\n message:\
    \ \\$(.message)\"\\\"' '\"\n\n# Call both commands together\n${GET_CMD} | ${JQ_CMD}"
  name: get_details_for_unready_kustomizations
