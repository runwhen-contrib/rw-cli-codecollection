commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    within a specific namespace and context. It is a way to access and view details
    about the specified resource in a particular environment or cluster.
  multi_line_details: '# First, let''s list all the resources in a specific namespace
    within a context


    # Replace ${RESOURCE_NAME} with the name of the resource you want to retrieve,
    such as pods, deployments, services, etc.

    # Replace ${NAMESPACE} with the name of the namespace where the resource is located

    # Replace ${CONTEXT} with the name of the Kubernetes context you want to use


    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}'
  name: list_all_available_kustomization_objects_in_namespace_namespace
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command retrieves information about a specific Kubernetes resource
    within a specific namespace and context. It is a way to access and view details
    about the specified resource in a particular environment or cluster.
  multi_line_details: '# First, let''s list all the resources in a specific namespace
    within a context


    # Replace ${RESOURCE_NAME} with the name of the resource you want to retrieve,
    such as pods, deployments, services, etc.

    # Replace ${NAMESPACE} with the name of the namespace where the resource is located

    # Replace ${CONTEXT} with the name of the Kubernetes context you want to use


    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}'
  name: list_all_available_kustomization_objects_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r ''.items[] | select (.status.conditions[] | select(.type == "Ready" and
    .status == "False")) | "---\nKustomization Name: \(.metadata.name)\n\nReady Status:
    \(.status.conditions[] | select(.type == "Ready") | "\n ready: \(.status)\n message:
    \(.message)\n reason: \(.reason)\n last_transition_time: \(.lastTransitionTime)")\n\nReconcile
    Status:\(.status.conditions[] | select(.type == "Reconciling") |"\n reconciling:
    \(.status)\n message: \(.message)")\n---\n"'''
  doc_links: '

    '
  explanation: This command retrieves a specific resource within a particular namespace
    and context, then uses jq to format the output in a specific way, showing the
    status of readiness and reconciliation for that resource.
  multi_line_details: "\n# Store the resource name, namespace, and context in variables\
    \ for easier management\nRESOURCE_NAME=\"your_resource_name\"\nNAMESPACE=\"your_namespace\"\
    \nCONTEXT=\"your_context\"\n\n# Use kubectl to get the resource in JSON format\
    \ and pipe the output to jq for filtering and formatting\nkubectl get ${RESOURCE_NAME}\
    \ -n ${NAMESPACE} --context ${CONTEXT} -o json | \n\n# Use jq to filter and format\
    \ the JSON data to display only the relevant information\njq -r '.items[] | select\
    \ (.status.conditions[] | select(.type == \"Ready\" and .status == \"False\"))\
    \ | \n    \"---\\nKustomization Name: \\(.metadata.name)\\n\\n\n    Ready Status:\
    \ \\(.status.conditions[] | select(.type == \"Ready\") | \"\\n ready: \\(.status)\\\
    n message: \\(.message)\\n reason: \\(.reason)\\n last_transition_time: \\(.lastTransitionTime)\"\
    )\\n\n    Reconcile Status:\\(.status.conditions[] | select(.type == \"Reconciling\"\
    ) |\"\\n reconciling: \\(.status)\\n message: \\(.message)\")\\n---\\n\"'\n\n\
    This multi-line command breaks down the original one-liner and adds comments to\
    \ explain each step. It also uses variables for easier modification and readability."
  name: get_details_for_unready_kustomizations_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r ''.items[] | select (.status.conditions[] | select(.type == "Ready" and
    .status == "False")) | "---\nKustomization Name: \(.metadata.name)\n\nReady Status:
    \(.status.conditions[] | select(.type == "Ready") | "\n ready: \(.status)\n message:
    \(.message)\n reason: \(.reason)\n last_transition_time: \(.lastTransitionTime)")\n\nReconcile
    Status:\(.status.conditions[] | select(.type == "Reconciling") |"\n reconciling:
    \(.status)\n message: \(.message)")\n---\n"'''
  doc_links: '

    '
  explanation: This command retrieves a specific resource within a particular namespace
    and context, then uses jq to format the output in a specific way, showing the
    status of readiness and reconciliation for that resource.
  multi_line_details: "\n# Store the resource name, namespace, and context in variables\
    \ for easier management\nRESOURCE_NAME=\"your_resource_name\"\nNAMESPACE=\"your_namespace\"\
    \nCONTEXT=\"your_context\"\n\n# Use kubectl to get the resource in JSON format\
    \ and pipe the output to jq for filtering and formatting\nkubectl get ${RESOURCE_NAME}\
    \ -n ${NAMESPACE} --context ${CONTEXT} -o json | \n\n# Use jq to filter and format\
    \ the JSON data to display only the relevant information\njq -r '.items[] | select\
    \ (.status.conditions[] | select(.type == \"Ready\" and .status == \"False\"))\
    \ | \n    \"---\\nKustomization Name: \\(.metadata.name)\\n\\n\n    Ready Status:\
    \ \\(.status.conditions[] | select(.type == \"Ready\") | \"\\n ready: \\(.status)\\\
    n message: \\(.message)\\n reason: \\(.reason)\\n last_transition_time: \\(.lastTransitionTime)\"\
    )\\n\n    Reconcile Status:\\(.status.conditions[] | select(.type == \"Reconciling\"\
    ) |\"\\n reconciling: \\(.status)\\n message: \\(.message)\")\\n---\\n\"'\n\n\
    This multi-line command breaks down the original one-liner and adds comments to\
    \ explain each step. It also uses variables for easier modification and readability."
  name: get_details_for_unready_kustomizations_in_namespace_namespace
