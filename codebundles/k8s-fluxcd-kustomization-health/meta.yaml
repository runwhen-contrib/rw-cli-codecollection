commands:
- command: kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Context](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command is used to retrieve information about a specific Kubernetes
    resource within a specified namespace and context. The resource name, namespace,
    and context are all specified using the respective placeholders.
  multi_line_details: '# Set the kubernetes context to use

    kubectl config use-context ${CONTEXT}


    # Get the resource information from a specific namespace

    kubectl get ${RESOURCE_NAME} -n ${NAMESPACE}'
  name: list_all_available_kustomization_objects_in_namespace_namespace
- command: 'kubectl get ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r ''.items[] | select (.status.conditions[] | select(.type == "Ready" and
    .status == "False")) | "---\nKustomization Name: \(.metadata.name)\n\nReady Status:
    \(.status.conditions[] | select(.type == "Ready") | "\n ready: \(.status)\n message:
    \(.message)\n reason: \(.reason)\n last_transition_time: \(.lastTransitionTime)")\n\nReconcile
    Status:\(.status.conditions[] | select(.type == "Reconciling") |"\n reconciling:
    \(.status)\n message: \(.message)")\n---\n"'''
  doc_links: '

    - [Kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubectl Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [jq Documentation](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command uses kubectl to get information about a specific resource
    in a particular namespace and context, then organizes the output using jq to show
    the Ready and Reconcile status along with relevant details for better visualization.
  multi_line_details: "```bash\n# Setting the resource name, namespace, and context\
    \ as variables for easier modification\nRESOURCE_NAME=\"${RESOURCE_NAME}\"\nNAMESPACE=\"\
    ${NAMESPACE}\"\nCONTEXT=\"${CONTEXT}\"\n\n# Using the kubectl command to fetch\
    \ the specified resource in JSON format with additional information\nkubectl get\
    \ ${RESOURCE_NAME} -n ${NAMESPACE} --context ${CONTEXT} -o json \\\n    # Piping\
    \ the output to jq to filter and format the JSON response\n    | jq -r '.items[]\
    \ | select (.status.conditions[] | select(.type == \"Ready\" and .status == \"\
    False\")) \\\n        # Formatting the output to display relevant information\
    \ about the Kustomization\n        | \"---\n        Kustomization Name: \\(.metadata.name)\\\
    n\\n\n        Ready Status: \\(.status.conditions[] | select(.type == \"Ready\"\
    ) \\\n            | \"\\n ready: \\(.status)\\n message: \\(.message)\\n reason:\
    \ \\(.reason)\\n last_transition_time: \\(.lastTransitionTime)\")\n        \\\
    n\n        Reconcile Status:\\(.status.conditions[] | select(.type == \"Reconciling\"\
    ) \\\n            |\"\\n reconciling: \\(.status)\\n message: \\(.message)\")\n\
    \        ---\\n\"'\n```\nThis multi-line command breaks down the original one-liner\
    \ into individual steps, with comments explaining what each step does. This is\
    \ helpful for new users of Kubernetes and related CLI commands to understand the\
    \ purpose and functioning of each part of the command."
  name: get_details_for_unready_kustomizations_in_namespace_namespace
