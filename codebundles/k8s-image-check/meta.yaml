commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Running
    -o json | jq -r ''[.items[] | "Images: " + (.spec.containers[].image|tostring)
    + ", Last Started Times:" + (.status.containerStatuses[].state.running.startedAt|tostring)]'''
  doc_links: '


    Documentation Links:

    1. Kubernetes Documentation for kubectl:  https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands

    2. Kubernetes Documentation for Fields Selector: https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get

    3. Kubernetes Documentation for Output Formatting: https://kubernetes.io/docs/tasks/access-application-cluster/list-all-running-container-images/#output

    4. jq Manual: https://stedolan.github.io/jq/manual/'
  explanation: '


    This command allows you to get information about the running pods within a Kubernetes
    cluster. Specifically, it will grab information regarding the images the pods
    are running and when they were last started in an JSON format. The --context flag
    lets you specify which cluster you would like to query while you can limit the
    query to a specific namespace with the -n flag. The field-selector flag allows
    you to filter down the results to only the pods with a status of ''Running''.
    Finally, we''re using the jq command to post-process the output and display only
    the image and last started times.'
  multi_line_details: " \n\n# Get a list of all pods in the current ${CONTEXT} and\
    \ from the ${NAMESPACE}. Filter out any with status that is not running.\n# Output\
    \ the results as json\nkubectl get pods \\\n    --context=${CONTEXT} \\ # Context\
    \ for the list of pods to be gathered\n    -n ${NAMESPACE} \\ # Namespace scoping\
    \ the list of pods\n    --field-selector=status.phase==Running \\ # Only show\
    \ pods with status == Running\n    -o json # Output formatting to json\n\n# Use\
    \ the jq command to interpret and format the json for better readability \njq\
    \ -r '[.items[] | \"Images: \" + (.spec.containers[].image|tostring) + \", Last\
    \ Started Times:\" + (.status.containerStatuses[].state.running.startedAt|tostring)]'\
    \ \\ \n# Select information for each pod including the image being used and the\
    \ last time it was started."
  name: check_image_rollover_times_in_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Running
    -o=json | jq -r ''.items[] | "---", "pod_name: " + .metadata.name, "Status: "
    + .status.phase, "containers:", (.spec.containers[] | "- container_name: " + .name,
    " \ image_path: " + (.image | split(":")[0]), " \ image_tag: " + (.image | split(":")[1])),
    "---"'''
  doc_links: '



    # Documentation Links:

    1. Kubernetes Overview: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/

    2. Kubernetes Cheat Sheet - Kubectl: https://kubernetes.io/docs/reference/kubectl/cheatsheet/

    3. Managing Resources with kubectl: https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get

    4. Field Selectors: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#field-selector

    5. Kubernetes Namespaces: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/

    6. JSONPath Guide: https://goessner.net/articles/JsonPath/

    7. jq Manual: https://stedolan.github.io/jq/manual/'
  explanation: '


    This command is used to get information about the running pods in a kubernetes
    cluster. It will give you the pod name, its status and the container details including
    container name, image path, and image tag. This command uses the Kubectl (Kubernetes
    Command Line Tool) to connect to the Kubernetes cluster and select the running
    pods in the specified namespace and context. The output is shown as JSON which
    can then be parsed through JQ (a command line JSON processor)  to provide the
    relevant info for each pod.'
  multi_line_details: "\n\n#This command lists all running pod names in the desired\
    \ namespaces along with their respective container name, path and tag.\n\n#Split\
    \ the one line command into multiple lines for clarity\nkubectl get pods \\ \n\
    \    --context=${CONTEXT} \\ #Context specifies the environment where the command\
    \ should run on - like 'production' or 'dev'\n    -n ${NAMESPACE} \\ #Namespace\
    \ is the Kubernetes resource containing groups of objects for further organization\n\
    \    --field-selector=status.phase==Running \\ #Filters for only running pods\n\
    \    -o=json \\ #Output json as result of the command\n    | jq -r '.items[] |\
    \ \"---\", \"pod_name: \" + .metadata.name,  #Retrieves all pods' names\n    \"\
    Status: \" + .status.phase,  #Retrieves pod's status\n    \"containers:\",  #Displays\
    \ all the containers present for that pod\n    (.spec.containers[] | \"- container_name:\
    \ \" + .name, #Retrieves container name\n    \" \\ image_path: \" + (.image |\
    \ split(\":\")[0]), #Retrieves an image's path\n    \" \\ image_tag: \" + (.image\
    \ | split(\":\")[1])), #Retrievs an image's tag\n    \"---\"' #Represents end\
    \ of a pod data"
  name: list_images_and_tags_for_every_container_in_running_pods
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Failed
    -o=json | jq -r ''.items[] | "---", "pod_name: " + .metadata.name, "Status: "
    + .status.phase, "containers:", (.spec.containers[] | "- container_name: " + .name,
    " \ image_path: " + \(.image | split(":")[0]), " \ image_tag: " + (.image | split(":")[1])),
    "---"'''
  doc_links: "\n\nAnswer: \n1. Kubernetes Documentation \"kubectl get pods\": https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-pods-psp\n\
    2. jq Documentation \"jq -r .items[]\": https://stedolan.github.io/jq/manual/#Basicfilters\n\
    3. Kubernetes Fields Selectors Documentation: https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/\
    \ \n4. Kubernetes Output Formats Documentation: https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#getting-the-list-of-resources"
  explanation: '


    This command is used in Kubernetes to get information about the pods in a given
    namespace and context that are in a failed status. It uses kubectl (Kubernetes
    control) to call the list of pods in the specified namespace and context, using
    the field-selector parameter to specify which pods should be selected (in this
    case, only pods in a failed status). The output is then formatted as json and
    piped through jq for further processing. The final output lists the pod name,
    its status, and each container within the pod, along with its image path and tag.'
  multi_line_details: "\n\n# This command lists all failed PODs from the given context\
    \ and namespace.\n# It requires that kubectl, jq and the CONTEXT and NAMESPACE\
    \ variables are set properly\n# It outputs pod name, its status and each container's\
    \ details in a way that is\n# not natively supported by Kubernetes. \n\nCONTEXT=${CONTEXT}\n\
    NAMESPACE=${NAMESPACE}\n\n# List all failed PODs from the given context and namespace\n\
    PODS=$(kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Failed\
    \ -o=json)\n\n# Use jq to parse the output and build a new one in a more human\
    \ readable format\nOUTPUT=$(echo \"${PODS}\" | jq -r '.items[] | \"---\", \"pod_name:\
    \ \" + .metadata.name, \"Status: \" + .status.phase, \"containers:\", (.spec.containers[]\
    \ | \"- container_name: \" + .name, \" \\ image_path: \" + \\(.image | split(\"\
    :\")[0]), \" \\ image_tag: \" + (.image | split(\":\")[1])), \"---\"')\n\n# Print\
    \ the result\necho $OUTPUT"
  name: list_images_and_tags_for_every_container_in_failed_pods
- command: 'NAMESPACE=${NAMESPACE}; POD_NAME="skopeo-pod"; CONTEXT="${CONTEXT}"; events=$(kubectl
    get events -n $NAMESPACE --context=$CONTEXT -o json | jq --arg timestamp "$(date
    -u -v -5M +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || date -u -d "-5 minutes" +"%Y-%m-%dT%H:%M:%SZ")"
    ''.items[] | select(.lastTimestamp > $timestamp)''); if [[ ! -z "\${events-unset}"
    ]]; then image_pull_backoff_events=$(echo "$events" | jq -s ''[.[] | select(.reason
    == "BackOff") | .message] | .[]''); else echo "No events found in the last 5 minutes";
    exit; fi; if [[ $image_pull_backoff_events =~ "Back-off pulling image" ]]; then
    echo "Running Skopeo Pod"; kubectl run $POD_NAME --restart=Never -n $NAMESPACE
    --context=$CONTEXT --image=quay.io/containers/skopeo:latest --command -- sleep
    infinity && echo "Waiting for the $POD_NAME to be running..." && kubectl wait
    --for=condition=Ready pod/$POD_NAME -n $NAMESPACE --context=$CONTEXT; else echo
    "No image pull backoff events found"; exit; fi; while IFS= read -r event; do echo
    "Found BackOff with message: $event"; echo "Checking if we can reach the image
    with skopeo and what tags exist"; container_image_path_tag=$(echo "$event" | cut
    -d'' '' -f4 | tr -d ''"'' | tr -d ''\''); container_image_path="\${container_image_path_tag%:*}";
    container_image_tag="\${container_image_path_tag#*:}"; if [ -z "$container_image_path"
    ] || [ -z "$container_image_tag" ]; then continue; fi; skopeo_output=$(kubectl
    exec $POD_NAME -n $NAMESPACE --context=$CONTEXT -- skopeo inspect docker://$container_image_path:$container_image_tag);
    skopeo_exit_code=$?; if [ $skopeo_exit_code -eq 0 ]; then echo "Container image
    ''$container_image_path:$container_image_tag'' exists."; else echo "Container
    image ''$container_image_path:$container_image_tag'' does not exist."; echo "Available
    tags for ''$container_image_path'':"; available_tags=$(kubectl exec $POD_NAME
    -n $NAMESPACE --context=$CONTEXT -- skopeo list-tags docker://$container_image_path
    ); echo "$available_tags"; fi; done <<<"$image_pull_backoff_events" && echo "Deleting
    Skopeo pod" && kubectl delete pod $POD_NAME -n $NAMESPACE --context=$CONTEXT &&
    echo "Done"'
  doc_links: "\n\nAnswer: \n- Documentation for KubeCTL command:  https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands\n\
    - Documentation for JQ command: https://stedolan.github.io/jq/\n- Documentation\
    \ for Skopeo: https://skopeo.github.io/docs/user-guides/overview/"
  explanation: '


    This command is used to pull images in a Kubernetes cluster or check if the pulled
    images exist. It first gets all the events of the past five minutes in the specified
    namespace and context, then it looks for events with a ''BackOff'' reason which
    usually indicate an image pull failure. If any are found, we run a Skopeo Pod
    in the same namespace and context so that we can skopeo inspect the image path
    and tag to see if it exists. Finally, it prints out a list of available tags for
    the image path and deletes the Skopeo pod.'
  multi_line_details: "\n\n# Get the name of the namespace to use.\nNAMESPACE=${NAMESPACE};\n\
    \n# Set a default pod name for convenience and to allow for easy cleanup later.\n\
    POD_NAME=\"skopeo-pod\";\n\n# Gather the context info so that we can operate on\
    \ the correct k8s cluster.\nCONTEXT=\"${CONTEXT}\";\n\n# Use kubectl to get events\
    \ from the specified namespace in JSON format\n# and use jq to filter by the last\
    \ 5 minutes since script execution.\n# This will return the recent events related\
    \ to the namespace as an array.\nevents=$(kubectl get events -n $NAMESPACE --context=$CONTEXT\
    \ -o json | \n         jq --arg timestamp \"$(date -u -v -5M +\"%Y-%m-%dT%H:%M:%SZ\"\
    \ 2>/dev/null || \n         date -u -d \"-5 minutes\" +\"%Y-%m-%dT%H:%M:%SZ\"\
    )\" '.items[] | \n         select(.lastTimestamp > $timestamp)');\n\n# Check to\
    \ see if any results were returned.\nif [[ ! -z \"\\${events-unset}\" ]]; then\n\
    \  # If so, extract any events regarding a BackOff into another variable.\n  image_pull_backoff_events=$(echo\
    \ \"$events\" | \n                              jq -s '[.[] | \n             \
    \                        select(.reason == \"BackOff\") | \n                 \
    \                    .message] | .[]');\nelse\n  # Otherwise exit the script as\
    \ there's nothing to do.\n  echo \"No events found in the last 5 minutes\";\n\
    \  exit;\nfi;\n\n# By this point, we should have some list of events attached\
    \ to the \n# image_pull_backoff_events variable so we are going to check it against\n\
    # a regex to see if we prefer 'Back-off pulling image'\nif [[ $image_pull_backoff_events\
    \ =~ \"Back-off pulling image\" ]]; then\n  echo \"Running Skopeo Pod\";\n\n \
    \ # Now is when we'll create the pod that will allow us access to skopeo.\n  #\
    \ This can be done using kubectl along with the namespace and context set previous.\n\
    \  kubectl run $POD_NAME --restart=Never -n $NAMESPACE --context=$CONTEXT \\\n\
    \                       --image=quay.io/containers/skopeo:latest \\\n        \
    \               --command -- sleep infinity\n  # And then we tell the user we're\
    \ waiting for it to start up.\n  echo \"Waiting for the $POD_NAME to be running...\"\
    \n  # Then we wait till the pod is ready before proceeding.\n  kubectl wait --for=condition=Ready\
    \ pod/$POD_NAME -n $NAMESPACE --context=$CONTEXT;\n\n# If not, exit with message.\n\
    else\n  echo \"No image pull backoff events found\";\n  exit;\nfi;\n\n# Here,\
    \ events are looped over, and each event returns \u2018BackOff\u2019 message.\n\
    while IFS= read -r event; do \n  echo \"Found BackOff with message: $event\";\n\
    \n  # Once we've identified a BackOff event, we need to parse out\n  # the container\
    \ image path and the tag.\n  echo \"Checking if we can reach the image with skopeo\
    \ and what tags exist\";\n  \n  container_image_path_tag=$(echo \"$event\" | cut\
    \ -d' ' -f4 | tr -d '\"' |tr -d '\\');\n  container_image_path=\"\\${container_image_path_tag%:*}\"\
    ;\n  container_image_tag=\"\\${container_image_path_tag#*:}\";\n\n  # Check that\
    \ the variables were populated correctly.\n  if [ -z \"$container_image_path\"\
    \ ] || [ -z \"$container_image_tag\" ]; then\n    continue;\n  fi;\n\n  # Using\
    \ the new pod, try and inspect the image provided with skopeo.\n  skopeo_output=$(kubectl\
    \ exec $POD_NAME -n $NAMESPACE --context=$CONTEXT \\\n                       \
    \                  -- skopeo inspect docker://$container_image_path:$container_image_tag);\n\
    \  skopeo_exit_code=$?;\n\n  # Depending on the result, print a message.\n  if\
    \ [ $skopeo_exit_code -eq 0 ]; then\n    echo \"Container image '$container_image_path:$container_image_tag'\
    \ exists.\";\n  else\n    echo \"Container image '$container_image_path:$container_image_tag'\
    \ does not exist.\";\n  \n    # Just in case it doesn't exist, let's try and print\
    \ out the available tags.\n    echo \"Available tags for '$container_image_path':\"\
    ;\n    available_tags=$(kubectl exec $POD_NAME -n $NAMESPACE --context=$CONTEXT\
    \ \\\n                                        -- skopeo list-tags docker://$container_image_path\
    \ );\n    echo \"$available_tags\";\n  fi;\n\n# Loop ends here.\ndone <<<\"$image_pull_backoff_events\"\
    \n# Cleanup the pod once the loop has finished.\necho \"Deleting Skopeo pod\"\n\
    kubectl delete pod $POD_NAME -n $NAMESPACE --context=$CONTEXT\necho \"Done\""
  name: list_imagepullbackoff_events_and_test_path_and_tags
