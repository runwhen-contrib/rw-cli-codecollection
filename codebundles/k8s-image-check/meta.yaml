commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Running
    -o json | jq -r ''[.items[] | "Images: " + (.spec.containers[].image|tostring)
    + ", Last Started Times:" + (.status.containerStatuses[].state.running.startedAt|tostring)]'''
  doc_links: '

    - [kubectl Command Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [kubectl get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [jq Documentation](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command uses kubectl to get a list of running pods in a specific
    namespace and outputs their container images and last started times in JSON format
    using the jq tool. The --context flag specifies which Kubernetes cluster context
    to use, and the --field-selector flag filters the pods by their running status.
  multi_line_details: '```bash

    # Set the context for the kubectl command to specify which cluster to operate
    in

    kubectl config use-context ${CONTEXT}


    # Get the list of pods within a specific namespace using the specified context

    kubectl get pods -n ${NAMESPACE}


    # Filter the list of pods to only show those with a running status

    | kubectl get pods -n ${NAMESPACE} --field-selector=status.phase==Running


    # Output the results in JSON format

    | kubectl get pods -n ${NAMESPACE} --field-selector=status.phase==Running -o json


    # Use jq to parse the JSON output and reformat it into a more human-readable format

    | jq -r ''[.items[] | "Images: " + (.spec.containers[].image|tostring) + ", Last
    Started Times:" + (.status.containerStatuses[].state.running.startedAt|tostring)]''

    ```


    This multi-line command breaks down the original one-liner into individual steps,
    explaining each step along the way. It provides a better understanding for new
    users and allows them to see how the command can be broken down and analyzed.'
  name: check_image_rollover_times_for_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Running
    -o=json | jq -r ''.items[] | "---", "pod_name: " + .metadata.name, "Status: "
    + .status.phase, "containers:", (.spec.containers[] | "- container_name: " + .name,
    " \ image_path: " + (.image | split(":")[0]), " \ image_tag: " + (.image | split(":")[1])),
    "---"'''
  doc_links: '

    - [Kubernetes API Overview](https://kubernetes.io/docs/concepts/overview/kubernetes-api/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [jq Manual (GitHub)](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about running pods in a specific
    namespace from a Kubernetes cluster and formats the output in JSON with details
    such as pod name, status, and container information using jq to process the JSON
    data.
  multi_line_details: '```bash

    # Set the context to be used for the command, which specifies the cluster and
    user details

    kubectl config use-context ${CONTEXT}


    # Get the list of pods within the specified namespace that are in the Running
    phase and output the result in JSON format

    kubectl get pods -n ${NAMESPACE} --field-selector=status.phase==Running -o=json
    > pod_status.json


    # Use jq to parse the JSON output and extract information about each pod and its
    containers

    jq -r ''.items[] | "---", "pod_name: " + .metadata.name, "Status: " + .status.phase,
    "containers:", (.spec.containers[] | "- container_name: " + .name, " \ image_path:
    " + (.image | split(":")[0]), " \ image_tag: " + (.image | split(":")[1])), "---"''
    pod_status.json

    ```


    This multi-line command breaks down the original one-liner and adds comments to
    explain what each part does. It sets the context, retrieves pod information in
    JSON format, and then uses jq to parse the JSON and display specific information
    about each pod and its containers.'
  name: list_images_and_tags_for_every_container_in_running_pods_for_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Failed
    -o=json | jq -r ''.items[] | "---", "pod_name: " + .metadata.name, "Status: "
    + .status.phase, "containers:", (.spec.containers[] | "- container_name: " + .name,
    " \ image_path: " + \(.image | split(":")[0]), " \ image_tag: " + (.image | split(":")[1])),
    "---"'''
  doc_links: '

    - [Kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Pods](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [jq tool](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command is used to retrieve information about pods that have failed
    in a specific namespace and print out their names, status, and container details.
    The output will be displayed in JSON format using the jq tool.
  multi_line_details: "# Set the context for the kubectl command to the specified\
    \ ${CONTEXT}\n# Set the namespace for the kubectl command to the specified ${NAMESPACE}\n\
    # Select pods in the specified namespace with a status.phase of Failed\n# Output\
    \ the result in JSON format and pass it to the jq command to parse and format\
    \ the output\nkubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase==Failed\
    \ -o=json | \\\n  jq -r '.items[] | \n    \"---\", \n    \"pod_name: \" + .metadata.name,\
    \ \n    \"Status: \" + .status.phase, \n    \"containers:\", \n    (.spec.containers[]\
    \ | \n      \"- container_name: \" + .name, \n      \" \\ image_path: \" + \\\
    (.image | split(\":\")[0]), \n      \" \\ image_tag: \" + (.image | split(\":\"\
    )[1])\n    ), \n    \"---\"'"
  name: list_images_and_tags_for_every_container_in_failed_pods_for_namespace_namespace
- command: 'NAMESPACE=${NAMESPACE}; POD_NAME="skopeo-pod"; CONTEXT="${CONTEXT}"; events=$(kubectl
    get events -n $NAMESPACE --context=$CONTEXT -o json | jq --arg timestamp "$(date
    -u -v -5M +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || date -u -d "-5 minutes" +"%Y-%m-%dT%H:%M:%SZ")"
    ''.items[] | select(.lastTimestamp > $timestamp)''); if [[ ! -z "\${events-unset}"
    ]]; then image_pull_backoff_events=$(echo "$events" | jq -s ''[.[] | select(.reason
    == "BackOff") | .message] | .[]''); else echo "No events found in the last 5 minutes";
    exit; fi; if [[ $image_pull_backoff_events =~ "Back-off pulling image" ]]; then
    echo "Running Skopeo Pod"; kubectl run $POD_NAME --restart=Never -n $NAMESPACE
    --context=$CONTEXT --image=quay.io/containers/skopeo:latest --command -- sleep
    infinity && echo "Waiting for the $POD_NAME to be running..." && kubectl wait
    --for=condition=Ready pod/$POD_NAME -n $NAMESPACE --context=$CONTEXT; else echo
    "No image pull backoff events found"; exit; fi; while IFS= read -r event; do echo
    "Found BackOff with message: $event"; echo "Checking if we can reach the image
    with skopeo and what tags exist"; container_image_path_tag=$(echo "$event" | cut
    -d'' '' -f4 | tr -d ''"'' | tr -d ''\''); container_image_path="\${container_image_path_tag%:*}";
    container_image_tag="\${container_image_path_tag#*:}"; if [ -z "$container_image_path"
    ] || [ -z "$container_image_tag" ]; then continue; fi; skopeo_output=$(kubectl
    exec $POD_NAME -n $NAMESPACE --context=$CONTEXT -- skopeo inspect docker://$container_image_path:$container_image_tag);
    skopeo_exit_code=$?; if [ $skopeo_exit_code -eq 0 ]; then echo "Container image
    ''$container_image_path:$container_image_tag'' exists."; else echo "Container
    image ''$container_image_path:$container_image_tag'' does not exist."; echo "Available
    tags for ''$container_image_path'':"; available_tags=$(kubectl exec $POD_NAME
    -n $NAMESPACE --context=$CONTEXT -- skopeo list-tags docker://$container_image_path
    ); echo "$available_tags"; fi; done <<<"$image_pull_backoff_events" && echo "Deleting
    Skopeo pod" && kubectl delete pod $POD_NAME -n $NAMESPACE --context=$CONTEXT &&
    echo "Done"'
  doc_links: '

    - [Image Pull Backoff Events in Kubernetes](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-debugging-and-troubleshooting){:target="_blank"}'
  explanation: This command is designed to automate the process of checking for image
    pull backoff events in Kubernetes and then running a Skopeo pod to inspect and
    test the availability of the container images. If any issues are detected, it
    will provide information on the tags that exist or do not exist for those container
    images.
  multi_line_details: "```bash\n# Set NAMESPACE, POD_NAME, and CONTEXT variables for\
    \ use in the command\nNAMESPACE=${NAMESPACE}\nPOD_NAME=\"skopeo-pod\"\nCONTEXT=\"\
    ${CONTEXT}\"\n\n# Retrieve events within N minutes from the current time\nevents=$(kubectl\
    \ get events -n $NAMESPACE --context=$CONTEXT -o json | \\\n    # Use jq to filter\
    \ events within the last 5 minutes\n    jq --arg timestamp \\\n    \"$(date -u\
    \ -v -5M +\"%Y-%m-%dT%H:%M:%SZ\" 2>/dev/null || date -u -d \"-5 minutes\" +\"\
    %Y-%m-%dT%H:%M:%SZ\")\" '.items[] | select(.lastTimestamp > $timestamp)')\n\n\
    # Check if 'events' variable is not empty\nif [[ ! -z \"${events-unset}\" ]];\
    \ then\n    # Extract 'Back-off pulling image' events\n    image_pull_backoff_events=$(echo\
    \ \"$events\" | \\\n        jq -s '[.[] | select(.reason == \"BackOff\") | .message]\
    \ | .[]')\nelse\n    # Print message and exit if no events are found in the last\
    \ 5 minutes\n    echo \"No events found in the last 5 minutes\"\n    exit\nfi\n\
    \n# Check if 'image_pull_backoff_events' contains \"Back-off pulling image\"\n\
    if [[ $image_pull_backoff_events =~ \"Back-off pulling image\" ]]; then\n    #\
    \ Deploy Skopeo pod to check container images\n    echo \"Running Skopeo Pod\"\
    \n    kubectl run $POD_NAME --restart=Never -n $NAMESPACE --context=$CONTEXT --image=quay.io/containers/skopeo:latest\
    \ --command -- sleep infinity &&\n    echo \"Waiting for the $POD_NAME to be running...\"\
    \ &&\n    kubectl wait --for=condition=Ready pod/$POD_NAME -n $NAMESPACE --context=$CONTEXT\n\
    else\n    # Print message and exit if no image pull backoff events are found\n\
    \    echo \"No image pull backoff events found\"\n    exit\nfi\n\n# Iterate through\
    \ each 'Back-off pulling image' event\nwhile IFS= read -r event; do\n  # Extract\
    \ container image path and tag from the event\n  container_image_path_tag=$(echo\
    \ \"$event\" | cut -d' ' -f4 | tr -d '\"' | tr -d '\\')\n  container_image_path=\"\
    ${container_image_path_tag%:*}\"\n  container_image_tag=\"${container_image_path_tag#*:}\"\
    \n\n  # Check if container_image_path and container_image_tag are not empty\n\
    \  if [ -z \"$container_image_path\" ] || [ -z \"$container_image_tag\" ]; then\n\
    \    continue\n  fi\n\n  # Run skopeo inspect to check if the container image\
    \ exists\n  skopeo_output=$(kubectl exec $POD_NAME -n $NAMESPACE --context=$CONTEXT\
    \ -- skopeo inspect docker://$container_image_path:$container_image_tag)\n  skopeo_exit_code=$?\n\
    \n  if [ $skopeo_exit_code -eq 0 ]; then\n    echo \"Container image '$container_image_path:$container_image_tag'\
    \ exists.\"\n  else\n    echo \"Container image '$container_image_path:$container_image_tag'\
    \ does not exist.\"\n    echo \"Available tags for '$container_image_path':\"\n\
    \    # List available tags for the container image\n    available_tags=$(kubectl\
    \ exec $POD_NAME -n $NAMESPACE --context=$CONTEXT -- skopeo list-tags docker://$container_image_path\
    \ )\n    echo \"$available_tags\"\n  fi\ndone <<<\"$image_pull_backoff_events\"\
    \n\n# Delete the Skopeo pod after checking container images\necho \"Deleting Skopeo\
    \ pod\"\nkubectl delete pod $POD_NAME -n $NAMESPACE --context=$CONTEXT\necho \"\
    Done\"\n```"
  name: list_imagepullbackoff_events_and_test_path_and_tags_for_namespace_namespace
