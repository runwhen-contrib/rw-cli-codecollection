commands:
- command: INGRESS_NAME=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; kubectl
    get events -n $NAMESPACE --context $CONTEXT --field-selector involvedObject.kind=Ingress,involvedObject.name=$INGRESS_NAME,type!=Normal;
    for SERVICE_NAME in $(kubectl get ingress $INGRESS_NAME -n $NAMESPACE --context
    $CONTEXT -o=jsonpath='{.spec.rules[*].http.paths[*].backend.service.name}'); do
    kubectl get events -n $NAMESPACE --context $CONTEXT --field-selector involvedObject.kind=Service,involvedObject.name=$SERVICE_NAME,type!=Normal;
    done
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: search_for_gce_ingress_warnings_in_gke
- command: INGRESS_NAME=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; kubectl
    get events -n $NAMESPACE --context $CONTEXT --field-selector involvedObject.kind=Ingress,involvedObject.name=$INGRESS_NAME,type!=Normal;
    for SERVICE_NAME in $(kubectl get ingress $INGRESS_NAME -n $NAMESPACE --context
    $CONTEXT -o=jsonpath='{.spec.rules[*].http.paths[*].backend.service.name}'); do
    kubectl get events -n $NAMESPACE --context $CONTEXT --field-selector involvedObject.kind=Service,involvedObject.name=$SERVICE_NAME,type!=Normal;
    done
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: search_for_gce_ingress_warnings_in_gke
- command: 'INGRESS_NAME=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; kubectl
    get ingress $INGRESS_NAME -n $NAMESPACE --context $CONTEXT -o=json | jq -r ''.metadata.annotations["ingress.kubernetes.io/backends"]
    | fromjson | to_entries[] | select(.value != "HEALTHY") | "Backend: " + .key +
    " Status: " + .value'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: identify_unhealthy_gce_http_ingress_backends
- command: 'INGRESS_NAME=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; kubectl
    get ingress $INGRESS_NAME -n $NAMESPACE --context $CONTEXT -o=json | jq -r ''.metadata.annotations["ingress.kubernetes.io/backends"]
    | fromjson | to_entries[] | select(.value != "HEALTHY") | "Backend: " + .key +
    " Status: " + .value'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: identify_unhealthy_gce_http_ingress_backends
- command: 'INGRESS_NAME=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; GCP_PROJECT_ID=${GCP_PROJECT_ID};for
    backend in $(kubectl get ingress $INGRESS_NAME -n $NAMESPACE --context $CONTEXT
    -o=json | jq -r ''.metadata.annotations["ingress.kubernetes.io/backends"] | fromjson
    | to_entries[] | select(.value != "HEALTHY") | .key''); do echo "Backend: \${backend}"
    && gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && gcloud logging read ''severity="ERROR" AND resource.type="gce_network" AND
    protoPayload.resourceName=~"''\${backend}''"'' --freshness=1d --limit=50 --project
    "$GCP_PROJECT_ID" --format=json | jq ''if length > 0 then [ .[] | select(.protoPayload.response.error.message?
    or .protoPayload.status.message?) | { timestamp: .timestamp, ip: (if .protoPayload.request.networkEndpoints?
    then .protoPayload.request.networkEndpoints[].ipAddress else null end), message:
    (.protoPayload.response.error.message? // .protoPayload.status.message?) } ] |
    group_by(.message) | map(max_by(.timestamp)) | .[] | (.timestamp + " | IP: " +
    (.ip // "N/A") + " | Error: " + .message) else "No results found" end''; done'
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: fetch_network_error_logs_from_gcp_operations_manager_for_ingress_backends
- command: 'INGRESS_NAME=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; GCP_PROJECT_ID=${GCP_PROJECT_ID};for
    backend in $(kubectl get ingress $INGRESS_NAME -n $NAMESPACE --context $CONTEXT
    -o=json | jq -r ''.metadata.annotations["ingress.kubernetes.io/backends"] | fromjson
    | to_entries[] | select(.value != "HEALTHY") | .key''); do echo "Backend: \${backend}"
    && gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    && gcloud logging read ''severity="ERROR" AND resource.type="gce_network" AND
    protoPayload.resourceName=~"''\${backend}''"'' --freshness=1d --limit=50 --project
    "$GCP_PROJECT_ID" --format=json | jq ''if length > 0 then [ .[] | select(.protoPayload.response.error.message?
    or .protoPayload.status.message?) | { timestamp: .timestamp, ip: (if .protoPayload.request.networkEndpoints?
    then .protoPayload.request.networkEndpoints[].ipAddress else null end), message:
    (.protoPayload.response.error.message? // .protoPayload.status.message?) } ] |
    group_by(.message) | map(max_by(.timestamp)) | .[] | (.timestamp + " | IP: " +
    (.ip // "N/A") + " | Error: " + .message) else "No results found" end''; done'
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: fetch_network_error_logs_from_gcp_operations_manager_for_ingress_backends
- command: INGRESS=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; FORWARDING_RULE=$(kubectl
    get ingress $INGRESS -n $NAMESPACE --context $CONTEXT -o=jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/forwarding-rule}')
    && URL_MAP=$(kubectl get ingress $INGRESS -n $NAMESPACE --context $CONTEXT -o=jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/url-map}')
    && TARGET_PROXY=$(kubectl get ingress $INGRESS -n $NAMESPACE --context $CONTEXT
    -o=jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/target-proxy}') &&
    LOG_QUERY="resource.type=\"http_load_balancer\" AND resource.labels.forwarding_rule_name=\"$FORWARDING_RULE\"
    AND resource.labels.target_proxy_name=\"$TARGET_PROXY\" AND resource.labels.url_map_name=\"$URL_MAP\""
    && ENCODED_LOG_QUERY=$(echo $LOG_QUERY | sed -e 's| |%20|g' -e 's|"|%22|g' -e
    's|(|%28|g' -e 's|)|%29|g' -e 's|=|%3D|g' -e 's|/|%2F|g') && GCP_LOGS_URL="https://console.cloud.google.com/logs/query;query=$ENCODED_LOG_QUERY?project=$GCP_PROJECT_ID"
    && echo $GCP_LOGS_URL
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: review_gcp_operations_logging_dashboard
- command: INGRESS=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; FORWARDING_RULE=$(kubectl
    get ingress $INGRESS -n $NAMESPACE --context $CONTEXT -o=jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/forwarding-rule}')
    && URL_MAP=$(kubectl get ingress $INGRESS -n $NAMESPACE --context $CONTEXT -o=jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/url-map}')
    && TARGET_PROXY=$(kubectl get ingress $INGRESS -n $NAMESPACE --context $CONTEXT
    -o=jsonpath='{.metadata.annotations.ingress\.kubernetes\.io/target-proxy}') &&
    LOG_QUERY="resource.type=\"http_load_balancer\" AND resource.labels.forwarding_rule_name=\"$FORWARDING_RULE\"
    AND resource.labels.target_proxy_name=\"$TARGET_PROXY\" AND resource.labels.url_map_name=\"$URL_MAP\""
    && ENCODED_LOG_QUERY=$(echo $LOG_QUERY | sed -e 's| |%20|g' -e 's|"|%22|g' -e
    's|(|%28|g' -e 's|)|%29|g' -e 's|=|%3D|g' -e 's|/|%2F|g') && GCP_LOGS_URL="https://console.cloud.google.com/logs/query;query=$ENCODED_LOG_QUERY?project=$GCP_PROJECT_ID"
    && echo $GCP_LOGS_URL
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: review_gcp_operations_logging_dashboard
- command: INGRESS=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; QUERY="resource.type=\"gce_network\""
    && for backend in $(kubectl get ingress $INGRESS -n $NAMESPACE --context $CONTEXT
    -o=json | jq -r '.metadata.annotations["ingress.kubernetes.io/backends"] | fromjson
    | to_entries[] | select(.value != "HEALTHY") | .key'); do QUERY="$QUERY AND protoPayload.resourceName=~\"$backend\"";
    done && ENCODED_QUERY=$(echo $QUERY | jq -sRr @uri) && DASHBOARD_URL="https://console.cloud.google.com/logs/query;query=$ENCODED_QUERY?project=$GCP_PROJECT_ID"
    && echo $DASHBOARD_URL
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: review_gcp_operations_logging_dashboard
- command: INGRESS=${INGRESS}; NAMESPACE=${NAMESPACE}; CONTEXT=${CONTEXT}; QUERY="resource.type=\"gce_network\""
    && for backend in $(kubectl get ingress $INGRESS -n $NAMESPACE --context $CONTEXT
    -o=json | jq -r '.metadata.annotations["ingress.kubernetes.io/backends"] | fromjson
    | to_entries[] | select(.value != "HEALTHY") | .key'); do QUERY="$QUERY AND protoPayload.resourceName=~\"$backend\"";
    done && ENCODED_QUERY=$(echo $QUERY | jq -sRr @uri) && DASHBOARD_URL="https://console.cloud.google.com/logs/query;query=$ENCODED_QUERY?project=$GCP_PROJECT_ID"
    && echo $DASHBOARD_URL
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: review_gcp_operations_logging_dashboard
