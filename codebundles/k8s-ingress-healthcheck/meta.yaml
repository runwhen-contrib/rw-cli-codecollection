commands:
- command: 'NAMESPACE="${NAMESPACE}";CONTEXT="${CONTEXT}";ingresses=$(kubectl get
    ingress -n "$NAMESPACE" --context "$CONTEXT" -o jsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');for
    ingress in $ingresses;do echo "Ingress: $ingress";health_status="NA";backend_services=$(kubectl
    get ingress "$ingress" -n "$NAMESPACE" --context "$CONTEXT" -o jsonpath=''{range
    .spec.rules[*].http.paths[*]}{.backend.service.name}{"|"}{.backend.service.port.number}{"\n"}{end}'');while
    IFS=''|'' read -r service port;do echo "Backend Service: $service, Port: $port";target_ports=$(kubectl
    get service "$service" -n "$NAMESPACE" --context "$CONTEXT" -o jsonpath="{.spec.ports[?(@.port==$port)].targetPort}");service_exists=$(kubectl
    get service "$service" -n "$NAMESPACE" --context "$CONTEXT" -ojsonpath=''{.metadata.name}'');if
    [ -z "$service_exists" ];then health_status="Unhealthy";echo "Error: Service $service
    does not exist";echo "Next Step: Check namespace $NAMESPACE for service name $service.";continue;else
    selectors=$(kubectl get svc "$service" -n "$NAMESPACE" --context "$CONTEXT" -o
    jsonpath=''{.spec.selector}'');label_selector="";for key in $(echo $selectors
    | jq -r ''keys[]'');do value=$(echo $selectors | jq -r --arg key "$key" ''.[$key]'');label_selector="\${label_selector}\${key}=\${value},";done;label_selector=\${label_selector::-1};found_owner=0;for
    kind in deployment statefulset daemonset;do matching_owners=$(kubectl get $kind
    -n "$NAMESPACE" --context "$CONTEXT" -l "$label_selector" -o jsonpath=''{.items[*].metadata.name}'');if
    [ -n "$matching_owners" ];then for owner in $matching_owners;do echo "Owner Kind:
    $kind";echo "Owner Name: $owner";found_owner=1;done;fi;done;if [ "$found_owner"
    == 0 ];then echo "Error: No matching deployment, statefulset, or daemonset found
    to match label selector \`"$label_selector"\`";echo "Next Steps:\n- Check namespace
    \`"$NAMESPACE"\` for deployment, statefulset, or daemonset with labels that match
    \`"$label_selector"\`";fi;port_found="No";associated_pods=$(kubectl get pods -n
    "$NAMESPACE" --context "$CONTEXT" -l "$label_selector" -o jsonpath=''{.items[*].metadata.name}'');for
    pod in $associated_pods;do container_ports=$(kubectl get pod "$pod" -n "$NAMESPACE"
    --context "$CONTEXT" -o jsonpath=''{.spec.containers[*].ports[*].containerPort}'');for
    target_port in $target_ports;do if echo "$container_ports" | grep -wq "$target_port";then
    port_found="Yes";break;fi;done;done;if [ "$port_found" = "No" ];then health_status="Unhealthy";echo
    "Warning: targetPort $target_ports of service $service is not found as a containerPort
    in associated pods";else health_status="Healthy";fi;endpoint_pods=$(kubectl get
    endpoints "$service" -n "$NAMESPACE" --context "$CONTEXT" -ojsonpath=''{range
    .subsets[*].addresses[*]}- Pod Name: {.targetRef.name}\n Pod IP: {.ip}\n{end}'');if
    [ -z "$endpoint_pods" ];then health_status="Unhealthy";echo "Error: Endpoint for
    service \`"$service"\` does not have any running pods"; echo "Next Steps:\n- Troubleshoot
    Container Restarts in Namespace \`"$NAMESPACE"\` \n- Troubleshoot Pending Pods
    In Namespace \`"$NAMESPACE"\`\n- Troubleshoot Failed Pods In Namespace \`"$NAMESPACE"\`";else
    echo "Endpoint Pod:";echo "$endpoint_pods";health_status="Healthy";fi;fi;done<<<"$backend_services";echo
    "Health Status: $health_status";echo "------------";done'
  doc_links: '

    - [Kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Ingress Resources](https://kubernetes.io/docs/concepts/services-networking/ingress/){:target="_blank"}

    - [Kubernetes Service Health Checks](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-health-checks){:target="_blank"}'
  explanation: This script uses kubectl to gather information about ingresses and
    their associated backend services, then checks the health status by verifying
    the existence of the services, finding matching owners (like deployments), and
    ensuring that the port is found in the associated pods.
  multi_line_details: "\n# Set variable for namespace\nNAMESPACE=\"${NAMESPACE}\"\n\
    \n# Set variable for context\nCONTEXT=\"${CONTEXT}\"\n\n# Get list of ingresses\
    \ in the specified namespace\ningresses=$(kubectl get ingress -n \"$NAMESPACE\"\
    \ --context \"$CONTEXT\" -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"\
    }{end}')\n\n# Iterate through each ingress\nfor ingress in $ingresses; do\n  echo\
    \ \"Ingress: $ingress\"\n  health_status=\"NA\"\n  \n  # Get backend services\
    \ for the current ingress\n  backend_services=$(kubectl get ingress \"$ingress\"\
    \ -n \"$NAMESPACE\" --context \"$CONTEXT\" -o jsonpath='{range .spec.rules[*].http.paths[*]}{.backend.service.name}{\"\
    |\"}{.backend.service.port.number}{\"\\n\"}{end}')\n  \n  # Iterate through each\
    \ backend service\n  while IFS='|' read -r service port; do\n    echo \"Backend\
    \ Service: $service, Port: $port\"\n    \n    # Get target ports for the backend\
    \ service\n    target_ports=$(kubectl get service \"$service\" -n \"$NAMESPACE\"\
    \ --context \"$CONTEXT\" -o jsonpath=\"{.spec.ports[?(@.port==$port)].targetPort}\"\
    )\n    \n    # Check if service exists\n    service_exists=$(kubectl get service\
    \ \"$service\" -n \"$NAMESPACE\" --context \"$CONTEXT\" -ojsonpath='{.metadata.name}')\n\
    \    if [ -z \"$service_exists\" ]; then\n      health_status=\"Unhealthy\"\n\
    \      echo \"Error: Service $service does not exist\"\n      echo \"Next Step:\
    \ Check namespace $NAMESPACE for service name $service.\"\n      continue\n  \
    \  else\n      # Get selectors for the service\n      selectors=$(kubectl get\
    \ svc \"$service\" -n \"$NAMESPACE\" --context \"$CONTEXT\" -o jsonpath='{.spec.selector}')\n\
    \      label_selector=\"\"\n      \n      # Construct label selector\n      for\
    \ key in $(echo $selectors | jq -r 'keys[]'); do\n        value=$(echo $selectors\
    \ | jq -r --arg key \"$key\" '.[$key]')\n        label_selector=\"${label_selector}${key}=${value},\"\
    \n      done\n      label_selector=${label_selector::-1}\n      \n      found_owner=0\n\
    \      \n      # Check for matching deployment, statefulset, or daemonset with\
    \ label selector\n      for kind in deployment statefulset daemonset; do\n   \
    \     matching_owners=$(kubectl get $kind -n \"$NAMESPACE\" --context \"$CONTEXT\"\
    \ -l \"$label_selector\" -o jsonpath='{.items[*].metadata.name}')\n        if\
    \ [ -n \"$matching_owners\" ]; then\n          for owner in $matching_owners;\
    \ do\n            echo \"Owner Kind: $kind\"\n            echo \"Owner Name: $owner\"\
    \n            found_owner=1\n          done\n        fi\n      done\n      \n\
    \      if [ \"$found_owner\" == 0 ]; then\n        echo \"Error: No matching deployment,\
    \ statefulset, or daemonset found to match label selector \\`\"$label_selector\"\
    \\`\"\n        echo \"Next Steps:\\n- Check namespace \\`\"$NAMESPACE\"\\` for\
    \ deployment, statefulset, or daemonset with labels that match \\`\"$label_selector\"\
    \\`\"\n      fi\n      \n      port_found=\"No\"\n      \n      # Check if target\
    \ port is found as a container port in associated pods\n      associated_pods=$(kubectl\
    \ get pods -n \"$NAMESPACE\" --context \"$CONTEXT\" -l \"$label_selector\" -o\
    \ jsonpath='{.items[*].metadata.name}')\n      for pod in $associated_pods; do\n\
    \        container_ports=$(kubectl get pod \"$pod\" -n \"$NAMESPACE\" --context\
    \ \"$CONTEXT\" -o jsonpath='{.spec.containers[*].ports[*].containerPort}')\n \
    \       for target_port in $target_ports; do\n          if echo \"$container_ports\"\
    \ | grep -wq \"$target_port\"; then\n            port_found=\"Yes\"\n        \
    \    break\n          fi\n        done\n      done\n      \n      if [ \"$port_found\"\
    \ = \"No\" ]; then\n        health_status=\"Unhealthy\"\n        echo \"Warning:\
    \ targetPort $target_ports of service $service is not found as a containerPort\
    \ in associated pods\"\n      else\n        health_status=\"Healthy\"\n      fi\n\
    \      \n      endpoint_pods=$(kubectl get endpoints \"$service\" -n \"$NAMESPACE\"\
    \ --context \"$CONTEXT\" -ojsonpath='{range .subsets[*].addresses[*]}- Pod Name:\
    \ {.targetRef.name}\\n Pod IP: {.ip}\\n{end}')\n      \n      if [ -z \"$endpoint_pods\"\
    \ ]; then\n        health_status=\"Unhealthy\"\n        echo \"Error: Endpoint\
    \ for service \\`\"$service\"\\` does not have any running pods\"\n        echo\
    \ \"Next Steps:\\n- Troubleshoot Container Restarts in Namespace \\`\"$NAMESPACE\"\
    \\` \\n- Troubleshoot Pending Pods In Namespace \\`\"$NAMESPACE\"\\`\\n- Troubleshoot\
    \ Failed Pods In Namespace \\`\"$NAMESPACE\"\\`\"\n      else\n        echo \"\
    Endpoint Pod:\"\n        echo \"$endpoint_pods\"\n        health_status=\"Healthy\"\
    \n      fi\n    fi\n  done <<< \"$backend_services\"\n  \n  echo \"Health Status:\
    \ $health_status\"\n  echo \"------------\"\ndone\n"
  name: fetch_ingress_object_health_in_namespace_namespace
- command: 'CONTEXT="${CONTEXT}"; NAMESPACE="${NAMESPACE}"; kubectl --context "${CONTEXT}"
    --namespace "${NAMESPACE}" get ingress -o json | jq -r ''.items[] | select(.status.loadBalancer.ingress)
    | .metadata.name as \$name | .status.loadBalancer.ingress[0].ip as \$ingress_ip
    | .spec.rules[]?.http.paths[]? | "\($name) \($ingress_ip) \(.backend.service.name)
    \(.backend.service.port.number)"'' | while read -r ingress_name ingress_ip service_name
    service_port; do kubectl --context "${CONTEXT}" --namespace "${NAMESPACE}" get
    svc "$service_name" -o json | jq --arg ingress_name "$ingress_name" --arg ingress_ip
    "$ingress_ip" --arg service_name "$service_name" --arg service_port "$service_port"
    -r ''if .spec.type == "LoadBalancer" then .status.loadBalancer.ingress[0].ip as
    $service_ip | if $ingress_ip and $service_ip and $service_ip != $ingress_ip then
    "WARNING: Ingress \($ingress_name) IP (\($ingress_ip)) differs from Service \($service_name)
    IP (\($service_ip))" else "OK: Ingress \($ingress_name) - Service \($service_name)
    is of type LoadBalancer with IP (\($service_ip))" end else "OK: Ingress \($ingress_name)
    - Service \($service_name) is of type \(.spec.type) on port \($service_port)"
    end''; done'
  doc_links: '

    - [kubectl Command Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes Ingresses](https://kubernetes.io/docs/concepts/services-networking/ingress/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command is using kubectl to get information about ingresses in
    a specified context and namespace, then checking for any inconsistencies in the
    IP addresses between the ingress and the corresponding service. It uses jq to
    parse the JSON output and outputs warnings or ok messages based on the results.
  multi_line_details: "\n# Set the variables for context and namespace\nCONTEXT=\"\
    ${CONTEXT}\"\nNAMESPACE=\"${NAMESPACE}\"\n\n# Use kubectl to get the ingress as\
    \ JSON and then use jq to filter and extract specific information from the JSON\
    \ output\nkubectl --context \"${CONTEXT}\" --namespace \"${NAMESPACE}\" get ingress\
    \ -o json | jq -r '.items[] | select(.status.loadBalancer.ingress) | .metadata.name\
    \ as \\$name | .status.loadBalancer.ingress[0].ip as \\$ingress_ip | .spec.rules[]?.http.paths[]?\
    \ | \"\\($name) \\($ingress_ip) \\(.backend.service.name) \\(.backend.service.port.number)\"\
    ' | \n\n# Process each line of the filtered output and use it to get the details\
    \ of the service\nwhile read -r ingress_name ingress_ip service_name service_port;\
    \ do \n    # Use kubectl to get the details of the service as JSON and then use\
    \ jq to check if the service is of type \"LoadBalancer\" and compare IPs\n   \
    \ kubectl --context \"${CONTEXT}\" --namespace \"${NAMESPACE}\" get svc \"$service_name\"\
    \ -o json | jq --arg ingress_name \"$ingress_name\" --arg ingress_ip \"$ingress_ip\"\
    \ --arg service_name \"$service_name\" --arg service_port \"$service_port\" -r\
    \ 'if .spec.type == \"LoadBalancer\" then .status.loadBalancer.ingress[0].ip as\
    \ $service_ip | if $ingress_ip and $service_ip and $service_ip != $ingress_ip\
    \ then \"WARNING: Ingress \\($ingress_name) IP (\\($ingress_ip)) differs from\
    \ Service \\($service_name) IP (\\($service_ip))\" else \"OK: Ingress \\($ingress_name)\
    \ - Service \\($service_name) is of type LoadBalancer with IP (\\($service_ip))\"\
    \ end else \"OK: Ingress \\($ingress_name) - Service \n\\($service_name) is of\
    \ type \\(.spec.type) on port \\($service_port)\" end'; \ndone\n\n\nThis multi-line\
    \ command sets the context and namespace, retrieves ingress details using `kubectl`,\
    \ filters the JSON output using `jq`, processes each line in a loop, and then\
    \ gets the details of the service to compare IPs and provide warnings or OK messages\
    \ based on the comparison."
  name: check_for_ingress_and_service_conflicts_in_namespace_namespace
