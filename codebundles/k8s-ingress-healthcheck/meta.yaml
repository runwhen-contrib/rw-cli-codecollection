commands:
- command: 'namespace="${NAMESPACE}"; context="${CONTEXT}"; for ingress in $(kubectl
    get ingress -n "$namespace" --context "$context" -ojsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do echo "Ingress: $ingress"; health_status="NA"; services=(); backend_services=$(kubectl
    get ingress "$ingress" -n "$namespace" --context "$context" -ojsonpath=''{range
    .spec.rules[*].http.paths[*]}{.backend.service.name}{"|"}{.backend.service.port.number}{"\n"}{end}'');
    while IFS=''|'' read -r service port; do if [ -n "$service" ] && [ -n "$port"
    ]; then echo "Backend Service: $service, Port: $port"; service_exists=$(kubectl
    get service "$service" -n "$namespace" --context "$context" -ojsonpath=''{.metadata.name}'');
    if [ -z "$service_exists" ]; then health_status="Unhealthy"; echo "Validation:
    Service $service does not exist"; else endpoint_pods=$(kubectl get endpoints "$service"
    -n "$namespace" --context "$context" -ojsonpath=''{range .subsets[*].addresses[*]}-
    Pod Name: {.targetRef.name}\n Pod IP: {.ip}\n{end}''); if [ -z "$endpoint_pods"
    ]; then health_status="Unhealthy"; echo "Validation: Endpoint for service $service
    does not have any pods"; else echo "Endpoint Pod:"; echo "$endpoint_pods"; health_status="Healthy";
    fi; fi; services+=("$service"); fi; done <<< "$backend_services"; if [ "$health_status"
    = "Unhealthy" ]; then echo "Health Status: $health_status"; echo "------------";
    elif [ "$health_status" = "Healthy" ]; then echo "Health Status: $health_status";
    fi; echo "------------"; done'
  doc_links: '

    - [Kubernetes Documentation for the `kubectl get ingress` command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-ingress){:target="_blank"}

    - [Kubectl command line reference](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Documentation for the `kubectl context` command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#context){:target="_blank"}

    - [Kubernetes Documentation for the `kubectl get endpoints` command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-endpoints){:target="_blank"}'
  explanation: '


    This command is used to check the health of a Kubernetes Ingress by validating
    it against the associated Services and Endpoints. The command will take two environment
    variables as input: NAMESPACE and CONTEXT, which are the namespace in the cluster
    and the context the user is currently working with. This command will retrieve
    all Ingress objects within the specified namespace, and then it will loop through
    each Ingress object and validate that the Service name and port of the Ingress
    exists in the current context. If the Service name and port do exist, the command
    will then retrieve all Endpoint IP addresses for that service in the namespace
    in the current context and print them out. Lastly, it will print the health status
    of the Ingress being tested.'
  multi_line_details: "\n\n#Namespace and Context Variables\nNAMESPACE=\"<insert_namespace>\"\
    \nCONTEXT=\"<insert_context>\"\n\n#Retrieve the Available Ingresses\ningresses=$(kubectl\
    \ get ingress -n \"$NAMESPACE\" --context \"$CONTEXT\" -ojsonpath='{range .items[*]}{.metadata.name}{\"\
    \\n\"}{end}')\n\n#Loop Through Retrieved Ingresses\nfor ingress in $ingresses;\
    \ do\n    echo \"Ingress: $ingress\"\n\n    #Initialize Health Status (Default:\
    \ NA)\n    health_status=\"NA\"\n\n    #Create Empty Array to Store Services\n\
    \    services=()\n\n    #Retrieve Backend Services for Ingress\n    backend_services=$(kubectl\
    \ get ingress \"$ingress\" -n \"$NAMESPACE\" --context \"$CONTEXT\" -ojsonpath='{range\
    \ .spec.rules[*].http.paths[*]}{.backend.service.name}{\"|\"}{.backend.service.port.number}{\"\
    \\n\"}{end}')\n\n    #Use IFS For Iterating Service Names and Ports\n    while\
    \ IFS='|' read -r service port; do\n        #Check if Service and Port Exist\n\
    \        if [ -n \"$service\" ] && [ -n \"$port\" ]; then\n            echo \"\
    Backend Service: $service, Port: $port\"\n\n            #Check If Service Exists\n\
    \            service_exists=$(kubectl get service \"$service\" -n \"$NAMESPACE\"\
    \ --context \"$CONTEXT\" -ojsonpath='{.metadata.name}')\n            if [ -z \"\
    $service_exists\" ]; then\n                health_status=\"Unhealthy\"\n     \
    \           echo \"Validation: Service $service does not exist\"\n           \
    \ else\n                #Retrieve Endpoint Pods for Service\n                endpoint_pods=$(kubectl\
    \ get endpoints \"$service\" -n \"$NAMESPACE\" --context \"$CONTEXT\" -ojsonpath='{range\
    \ .subsets[*].addresses[*]}- Pod Name: {.targetRef.name}\\n Pod IP: {.ip}\\n{end}')\n\
    \n                #Check if Endpoint Has Any Pods\n                if [ -z \"\
    $endpoint_pods\" ]; then\n                    health_status=\"Unhealthy\"\n  \
    \                  echo \"Validation: Endpoint for service $service does not have\
    \ any pods\"\n                else\n                    echo \"Endpoint Pod:\"\
    \n                    echo \"$endpoint_pods\"\n                    health_status=\"\
    Healthy\"\n                fi;\n            fi;\n\n            #Save Service To\
    \ Services Array For Further Use\n            services+=(\"$service\") \n    \
    \    fi;\n    done <<< \"$backend_services\"\n\n    #Check Health Status Of Ingress\
    \ Based On Services Validation Results\n    if [ \"$health_status\" = \"Unhealthy\"\
    \ ]; then\n        echo \"Health Status: $health_status\"\n        echo \"------------\"\
    \n    elif [ \"$health_status\" = \"Healthy\" ]; then\n        echo \"Health Status:\
    \ $health_status\"\n    fi\n\n    echo \"------------\"\ndone"
  name: fetch_ingress_object_health_in_namespace
