commands:
- command: 'namespace="${NAMESPACE}"; context="${CONTEXT}"; for ingress in $(kubectl
    get ingress -n "$namespace" --context "$context" -ojsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do echo "Ingress: $ingress"; health_status="NA"; services=(); backend_services=$(kubectl
    get ingress "$ingress" -n "$namespace" --context "$context" -ojsonpath=''{range
    .spec.rules[*].http.paths[*]}{.backend.service.name}{"|"}{.backend.service.port.number}{"\n"}{end}'');
    while IFS=''|'' read -r service port; do if [ -n "$service" ] && [ -n "$port"
    ]; then echo "Backend Service: $service, Port: $port"; service_exists=$(kubectl
    get service "$service" -n "$namespace" --context "$context" -ojsonpath=''{.metadata.name}'');
    if [ -z "$service_exists" ]; then health_status="Unhealthy"; echo "Validation:
    Service $service does not exist"; else endpoint_pods=$(kubectl get endpoints "$service"
    -n "$namespace" --context "$context" -ojsonpath=''{range .subsets[*].addresses[*]}-
    Pod Name: {.targetRef.name}\n Pod IP: {.ip}\n{end}''); if [ -z "$endpoint_pods"
    ]; then health_status="Unhealthy"; echo "Validation: Endpoint for service $service
    does not have any pods"; else echo "Endpoint Pod:"; echo "$endpoint_pods"; health_status="Healthy";
    fi; fi; services+=("$service"); fi; done <<< "$backend_services"; if [ "$health_status"
    = "Unhealthy" ]; then echo "Health Status: $health_status"; echo "=====================";
    elif [ "$health_status" = "Healthy" ]; then echo "Health Status: $health_status";
    fi; echo "------------"; done'
  explanation: '


    This command checks the status of an Ingress in Kubernetes. An Ingress is a resource
    in Kubernetes that controls external access to services in a cluster, typically
    HTTP. The command gets a list of all the ingresses in the cluster in the specified
    namespace for the specified context, then it loops through and validates the health
    of the each Ingress. For each Ingress, it validates each of its backend services
    and checks if the endpoint for those services is healthy.  At the end, it outputs
    the health status for the Ingress.'
  multi_line_details: "\n\n# Create variables for Namespace and Context\nNAMESPACE=\"\
    ${NAMESPACE}\"; \nCONTEXT=\"${CONTEXT}\"; \n\n# Get a list of Ingress objects\n\
    ingress_list=$(kubectl get ingress -n \"$namespace\" --context \"$context\" -ojsonpath='{range\
    \ .items[*]}{.metadata.name}{\"\\n\"}{end}');\n\n# Iterate through Ingress list\n\
    for ingress in $ingress_list; do \n\n    # Print the Ingress name\n    echo \"\
    Ingress: $ingress\"\n\n    # Initialize health_status to NA\n    health_status=\"\
    NA\"\n\n    # Get list of backend services i.e services integrated with the Ingress\
    \ object\n    backend_services=$(kubectl get ingress \"$ingress\" -n \"$namespace\"\
    \ --context \"$context\" -ojsonpath='{range .spec.rules[*].http.paths[*]}{.backend.service.name}{\"\
    |\"}{.backend.service.port.number}{\"\\n\"}{end}');    \n\n    # Read each service\
    \ name and service port found in the backend services variable\n    while IFS='|'\
    \ read -r service port; do \n\n        # Check if service and port names are not\
    \ empty\n        if [ -n \"$service\" ] && [ -n \"$port\" ]; then\n          \
    \  \n            # Print backend service name and port \n            echo \"Backend\
    \ Service: $service, Port: $port\"; \n\n            # Get name of service\n  \
    \          service_exists=$(kubectl get service \"$service\" -n \"$namespace\"\
    \ --context \"$context\" -ojsonpath='{.metadata.name}'); \n\n            #Check\
    \ if the service is found\n            if [ -z \"$service_exists\" ]; then\n \
    \               health_status=\"Unhealthy\";\n                echo \"Validation:\
    \ Service $service does not exist\"; \n            else\n                endpoint_pods=$(kubectl\
    \ get endpoints \"$service\" -n \"$namespace\" --context \"$context\" -ojsonpath='{range\
    \ .subsets[*].addresses[*]}- Pod Name: {.targetRef.name}\\n Pod IP: {.ip}\\n{end}');\n\
    \n                # Check if pods are present in the endpoint \n             \
    \   if [ -z \"$endpoint_pods\" ]; then\n                    health_status=\"Unhealthy\"\
    ;\n                    echo \"Validation: Endpoint for service $service does not\
    \ have any pods\";\n                else\n                    echo \"Endpoint\
    \ Pod:\";\n                    echo \"$endpoint_pods\"; \n                   \
    \ health_status=\"Healthy\";\n                fi;\n            fi;\n         \
    \   services+=(\"$service\"); \n        fi;\n    done <<< \"$backend_services\"\
    ;\n\n    # Print the overall health status of the Ingress\n    if [ \"$health_status\"\
    \ = \"Unhealthy\" ]; then\n        echo \"Health Status: $health_status\";\n \
    \       echo \"=====================\";\n    elif [ \"$health_status\" = \"Healthy\"\
    \ ]; then\n        echo \"Health Status: $health_status\";\n    fi;\n    echo\
    \ \"------------\";\ndone"
  name: fetch_ingress_object_health_in_namespace
