commands:
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s -o /dev/null -w "%{http_code}" localhost:8080/login
  explanation: '


    This command will send a request to the "login" endpoint of a statefulset called
    "${STATEFULSET_NAME}" in Kubernetes, using the context "${CONTEXT}" and namespace
    "${NAMESPACE}". The output will be the response code for the request (such as
    200 or 404). This can help diagnose whether or not the statefulset is functioning
    properly.'
  multi_line_details: "\n\n# This script helps Kubernetes users configure a simple\
    \ cURL command to test the status of a \n# statefulset in the Kubernetes cluster.\
    \ It assumes the user has already set the below \n# variables.\n\nSTATEFULSET_NAME=\"\
    [INSERT STATEFULSET NAME]\"\nCONTEXT=\"[INSERT CONTEXT]\"\nNAMESPACE=\"[INSERT\
    \ NAMESPACE]\"\n\n# This is the command that the user will execute. The command\
    \ executes a cURL command to a \n# statefulset within a specific context and namespace,\
    \ checking for a 200 OK code.\nkubectl exec \\\n\tstatefulset/${STATEFULSET_NAME}\
    \ \\\n\t--context=${CONTEXT} \\\n\t-n ${NAMESPACE} \\\n\t-- curl -s -o /dev/null\
    \ -w \"%{http_code}\" localhost:8080/login"
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/api/json?pretty=true --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
  explanation: '


    This command allows you to access a Kubernetes StatefulSet that has been deployed
    into a specific namespace with a specific context. It uses the Kubectl command
    line tool and specifies a particular StatefulSet name, a context, and a namespace.
    Additionally, it passes the username and token information associated with a Jenkins
    service account for authentication. Once authenticated, it will do a curl request
    of the specified URL and return its response, formatted using JSON.'
  multi_line_details: "\n\n# Connect the kubectl client to the cluster with the context.\
    \ Also provide the namespace target.\nkubectl exec statefulset/${STATEFULSET_NAME}\
    \ \\\n    --context=${CONTEXT} \\\n    -n ${NAMESPACE} \\\n    -- \n# Perform\
    \ a curl request against the endpoint localhost:8080/api/json?pretty=true with\
    \ the provided username and token\ncurl -s localhost:8080/api/json?pretty=true\
    \ \\\n    --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}"
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: 'kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/queue/api/json --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
    | jq -r ''.items[] | select((.stuck == true) or (.blocked == true)) | "Why: "
    + .why + "\nBlocked: " + (.blocked|tostring) + "\nStuck: " + (.stuck|tostring)'''
  explanation: "\n\nThis command is used to check the state of Jenkins jobs running\
    \ in a Kubernetes cluster. It will output information about any jobs that are\
    \ either stuck or blocked. \n\nThe command utilizes the Kubernetes command-line\
    \ tool (Kubectl) to execute a curl call against the namespace and context specified,\
    \ which specifies a JSON representation of the queue status from an external source.\
    \ It then runs a jq query against the data which looks for items with 'stuck'\
    \ or 'blocked' values, and provides additional information about why they are\
    \ stuck or blocked."
  multi_line_details: "\n\n#Command to retrieve stuck jobs from Jenkins\n\n#Create\
    \ environment variables for context, namespace, SA username and token \nCONTEXT=${CONTEXT}\n\
    NAMESPACE=${NAMESPACE}\nJENKINS_SA_USERNAME=$${JENKINS_SA_USERNAME.key}\nJENKINS_SA_TOKEN=$${JENKINS_SA_TOKEN.key}\n\
    \n#Execute command inside pod of stateful set\nkubectl exec statefulset/${STATEFULSET_NAME}\
    \ \\\n--context=${CONTEXT} \\\n-n ${NAMESPACE} \\\n-- curl -s localhost:8080/queue/api/json\
    \ \\\n--user ${JENKINS_SA_USERNAME}:${JENKINS_SA_TOKEN} | \\\njq -r '.items[]\
    \ \\\n| select((.stuck == true) or (.blocked == true)) \\\n| \"Why: \" + .why\
    \ + \"\\nBlocked: \" + (.blocked|tostring) + \"\\nStuck: \" + (.stuck|tostring)'"
  name: query_for_stuck_jenkins_jobs
