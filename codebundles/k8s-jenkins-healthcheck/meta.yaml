commands:
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s -o /dev/null -w "%{http_code}" localhost:8080/login
  doc_links: '

    - [Kubernetes StatefulSets Overview](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Curl Documentation](https://curl.se/docs/manpage.html){:target="_blank"}

    - [HTTP Response Codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status){:target="_blank"}'
  explanation: This command executes a curl operation on a specific stateful set in
    a Kubernetes cluster, which sends a request to the server at localhost:8080/login
    and returns the HTTP response code.
  multi_line_details: '```bash

    # Set the pod name for the statefulset

    POD_NAME=$(kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} -l "statefulset=${STATEFULSET_NAME}"
    -o jsonpath="{.items[0].metadata.name}")


    # Execute the command inside the specific pod using kubectl exec

    kubectl exec $POD_NAME --context=${CONTEXT} -n ${NAMESPACE} -- curl -s -o /dev/null
    -w "%{http_code}" localhost:8080/login

    ```'
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/api/json?pretty=true --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
  doc_links: '

    - [kubectl Exec Command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec){:target="_blank"}

    - [StatefulSets in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [curl Command Line Tool](https://curl.se/){:target="_blank"}

    - [JSON Data Retrieval](https://www.json.org/json-en.html){:target="_blank"}

    - [Environment Variables in Linux](https://linuxize.com/post/how-to-set-and-list-environment-variables-in-linux/){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific statefulset,
    within a specific context and namespace. It then runs a curl command to retrieve
    JSON data from localhost using credentials stored in environment variables.
  multi_line_details: "```shell\n# Set the command arguments for kubectl, specifying\
    \ the statefulset name\n# and context, as well as the namespace to execute the\
    \ command in.\nkubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT}\
    \ -n ${NAMESPACE} -- \\\n# Use curl to send a silent request to localhost on port\
    \ 8080, \n# accessing the /api/json endpoint and formatting the response as pretty\
    \ JSON.\ncurl -s localhost:8080/api/json?pretty=true \\\n# Include authentication\
    \ credentials using environment variables for username and token\n--user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}\n\
    ```"
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: 'kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/queue/api/json --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
    | jq -r ''.items[] | select((.stuck == true) or (.blocked == true)) | "Why: "
    + .why + "\nBlocked: " + (.blocked|tostring) + "\nStuck: " + (.stuck|tostring)'''
  doc_links: '

    '
  explanation: This command uses kubectl to execute a curl command on a specific statefulset
    in a given namespace, which then queries a Jenkins API and filters the response
    to show only jobs that are stuck or blocked.
  multi_line_details: "```bash\n# Set variables for the statefulset name, context,\
    \ and namespace\nSTATEFULSET_NAME=\"example\"\nCONTEXT=\"context-name\"\nNAMESPACE=\"\
    example-namespace\"\n\n# Execute a command in a Kubernetes pod to retrieve information\
    \ from Jenkins Queue API\n# Use curl to access the local host at port 8080 and\
    \ output the JSON data\n# Pipe the output into jq to filter and format the data\n\
    kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}\
    \ \\\n -- curl -s localhost:8080/queue/api/json --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}\
    \ | \njq -r '.items[] | select((.stuck == true) or (.blocked == true)) | \"Why:\
    \ \" + .why + \"\\nBlocked: \" + (.blocked|tostring) + \"\\nStuck: \" + (.stuck|tostring)'\n\
    ```"
  name: query_for_stuck_jenkins_jobs
