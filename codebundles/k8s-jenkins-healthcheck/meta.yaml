commands:
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s -o /dev/null -w "%{http_code}" localhost:8080/login
  doc_links: '

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [HTTP Response Codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status){:target="_blank"}'
  explanation: This command is used to execute a command inside a specific pod of
    a stateful set in a Kubernetes cluster, and it will make a request to the localhost
    on port 8080 and check the HTTP response code.
  multi_line_details: "\n# Use kubectl to execute a command inside a pod in a StatefulSet\n\
    \n# Set the context for the kubectl command\nkubectl exec statefulset/${STATEFULSET_NAME}\
    \ --context=${CONTEXT} \n\n# Set the namespace where the pod is located\n-n ${NAMESPACE}\
    \ \n\n# Run a curl command inside the pod to send a request to the localhost on\
    \ port 8080 and check the HTTP status code of a specific endpoint\n-- curl -s\
    \ -o /dev/null -w \"%{http_code}\" localhost:8080/login\n"
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s -o /dev/null -w "%{http_code}" localhost:8080/login
  doc_links: '

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [HTTP Response Codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status){:target="_blank"}'
  explanation: This command is used to execute a command inside a specific pod of
    a stateful set in a Kubernetes cluster, and it will make a request to the localhost
    on port 8080 and check the HTTP response code.
  multi_line_details: "\n# Use kubectl to execute a command inside a pod in a StatefulSet\n\
    \n# Set the context for the kubectl command\nkubectl exec statefulset/${STATEFULSET_NAME}\
    \ --context=${CONTEXT} \n\n# Set the namespace where the pod is located\n-n ${NAMESPACE}\
    \ \n\n# Run a curl command inside the pod to send a request to the localhost on\
    \ port 8080 and check the HTTP status code of a specific endpoint\n-- curl -s\
    \ -o /dev/null -w \"%{http_code}\" localhost:8080/login\n"
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/api/json?pretty=true --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
  doc_links: '

    - [Kubernetes StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [curl command](https://curl.se/docs/manpage.html){:target="_blank"}

    - [Authentication in Kubernetes](https://kubernetes.io/docs/reference/access-authn-authz/authentication/){:target="_blank"}

    - [Jenkins service account](https://www.jenkins.io/doc/book/using/using-credentials/){:target="_blank"}

    - [JSON format](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command allows you to execute a curl command on a specific container
    within a Kubernetes StatefulSet, using authentication credentials for a Jenkins
    service account. The output will be returned in JSON format and printed to the
    terminal.
  multi_line_details: "\n# Set the kubectl execution command with necessary parameters\n\
    kubectl exec statefulset/${STATEFULSET_NAME} \\\n--context=${CONTEXT} \\\n-n ${NAMESPACE}\
    \ \\ \n-- curl -s localhost:8080/api/json?pretty=true \\\n--user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}\n"
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/api/json?pretty=true --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
  doc_links: '

    - [Kubernetes StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [curl command](https://curl.se/docs/manpage.html){:target="_blank"}

    - [Authentication in Kubernetes](https://kubernetes.io/docs/reference/access-authn-authz/authentication/){:target="_blank"}

    - [Jenkins service account](https://www.jenkins.io/doc/book/using/using-credentials/){:target="_blank"}

    - [JSON format](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command allows you to execute a curl command on a specific container
    within a Kubernetes StatefulSet, using authentication credentials for a Jenkins
    service account. The output will be returned in JSON format and printed to the
    terminal.
  multi_line_details: "\n# Set the kubectl execution command with necessary parameters\n\
    kubectl exec statefulset/${STATEFULSET_NAME} \\\n--context=${CONTEXT} \\\n-n ${NAMESPACE}\
    \ \\ \n-- curl -s localhost:8080/api/json?pretty=true \\\n--user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}\n"
  name: query_the_jenkins_kubernetes_workload_http_endpoint
- command: 'kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/queue/api/json --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
    | jq -r ''.items[] | select((.stuck == true) or (.blocked == true)) | "Why: "
    + .why + "\nBlocked: " + (.blocked|tostring) + "\nStuck: " + (.stuck|tostring)'''
  doc_links: '

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Curl Command](https://linuxize.com/post/curl-command-in-linux/){:target="_blank"}

    - [Jenkins Job Queue](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#queue-a-job){:target="_blank"}'
  explanation: This command allows you to execute a curl command on a specific statefulset
    within a Kubernetes cluster, in order to retrieve information about stuck or blocked
    items in a Jenkins job queue. It uses the jq tool to filter and format the output
    for easier viewing.
  multi_line_details: "\n# Set the kubectl context to specify the cluster and namespace\n\
    kubectl config use-context ${CONTEXT}\n\n# Use kubectl exec to run a command in\
    \ a specific pod of the StatefulSet\nkubectl exec statefulset/${STATEFULSET_NAME}\
    \ -n ${NAMESPACE} -- \n\n# Use curl to send an HTTP request to Jenkins API endpoint\
    \ for the queue status\ncurl -s localhost:8080/queue/api/json --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}\
    \ \n\n# Use jq to parse and filter the JSON response to display relevant queue\
    \ items\n| jq -r '.items[] | select((.stuck == true) or (.blocked == true)) |\
    \ \"Why: \" + .why + \"\\nBlocked: \" + (.blocked|tostring) + \"\\nStuck: \" +\
    \ (.stuck|tostring)'\n"
  name: query_for_stuck_jenkins_jobs
- command: 'kubectl exec statefulset/${STATEFULSET_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- curl -s localhost:8080/queue/api/json --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}
    | jq -r ''.items[] | select((.stuck == true) or (.blocked == true)) | "Why: "
    + .why + "\nBlocked: " + (.blocked|tostring) + "\nStuck: " + (.stuck|tostring)'''
  doc_links: '

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Curl Command](https://linuxize.com/post/curl-command-in-linux/){:target="_blank"}

    - [Jenkins Job Queue](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#queue-a-job){:target="_blank"}'
  explanation: This command allows you to execute a curl command on a specific statefulset
    within a Kubernetes cluster, in order to retrieve information about stuck or blocked
    items in a Jenkins job queue. It uses the jq tool to filter and format the output
    for easier viewing.
  multi_line_details: "\n# Set the kubectl context to specify the cluster and namespace\n\
    kubectl config use-context ${CONTEXT}\n\n# Use kubectl exec to run a command in\
    \ a specific pod of the StatefulSet\nkubectl exec statefulset/${STATEFULSET_NAME}\
    \ -n ${NAMESPACE} -- \n\n# Use curl to send an HTTP request to Jenkins API endpoint\
    \ for the queue status\ncurl -s localhost:8080/queue/api/json --user $${JENKINS_SA_USERNAME.key}:$${JENKINS_SA_TOKEN.key}\
    \ \n\n# Use jq to parse and filter the JSON response to display relevant queue\
    \ items\n| jq -r '.items[] | select((.stuck == true) or (.blocked == true)) |\
    \ \"Why: \" + .why + \"\\nBlocked: \" + (.blocked|tostring) + \"\\nStuck: \" +\
    \ (.stuck|tostring)'\n"
  name: query_for_stuck_jenkins_jobs
