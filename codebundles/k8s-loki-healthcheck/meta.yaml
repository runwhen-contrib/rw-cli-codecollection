commands:
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ring
    | jq -r ''.shards[] | select(.state != "ACTIVE") | {name: .id, state: .state}'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [wget command](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON format](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a `wget` request on a specific
    pod within a Kubernetes context and namespace, returning the shards that are not
    in an "ACTIVE" state in JSON format.
  multi_line_details: '# Start by setting the context and namespace to work within

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Get the name of the pod running the single-binary component

    SINGLE_BINARY_POD=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary
    -o=jsonpath=''{.items[0].metadata.name}'')


    # Use kubectl exec to run a command on the single-binary pod

    # This command uses wget to make an HTTP request to the localhost in the container

    # Then it pipes the output to jq to filter and format the JSON response

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec ${SINGLE_BINARY_POD} -- wget
    -q --header="Accept: application/json" -O - http://localhost:3100/ring | jq -r
    ''.shards[] | select(.state != "ACTIVE") | {name: .id, state: .state}'''
  name: check_loki_ring_api
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ready'
  doc_links: '

    - [kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Contexts and Namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Labels and Selectors in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [wget Command Documentation](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON Data Retrieval in wget](https://www.journaldev.com/35201/wget-command-guide#5-retrieve-json-data){:target="_blank"}'
  explanation: This command is using kubectl to execute a command within a specific
    Kubernetes context and namespace, targeting a pod labeled with the specified component.
    The command being executed uses wget to make a request to a local endpoint and
    retrieve JSON data from the specified URL.
  multi_line_details: '# Set the kubectl context and namespace for the command

    # Assign the context and namespace to variables for easier reading and maintenance

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Get the name of the pod labeled with app.kubernetes.io/component=single-binary

    # Use jsonpath to extract the name of the first pod found

    POD_NAME=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary
    -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command within the specified pod

    # Use wget to make an HTTP request to http://localhost:3100/ready and output the
    response to the terminal

    # The command is executed in the specified kubectl context and namespace

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $POD_NAME -- wget -q --header="Accept:
    application/json" -O - http://localhost:3100/ready'
  name: check_loki_api_ready
