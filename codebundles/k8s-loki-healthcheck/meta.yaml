commands:
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ring
    | jq -r ''.shards[] | select(.state != "ACTIVE") | {name: .id, state: .state}'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [wget command](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON format](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a `wget` request on a specific
    pod within a Kubernetes context and namespace, returning the shards that are not
    in an "ACTIVE" state in JSON format.
  multi_line_details: '```bash

    #!/bin/bash


    # This command uses kubectl to execute a wget and jq command on a specific pod
    in a specified namespace.


    # Set the context and namespace variables

    CONTEXT="example-context"

    NAMESPACE="example-namespace"


    # Get the name of the pod with the label app.kubernetes.io/component=single-binary

    POD_NAME=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary
    -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute the wget and jq command on the specified pod

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $POD_NAME -- wget -q --header="Accept:
    application/json" -O - http://localhost:3100/ring | jq -r ''.shards[] | select(.state
    != "ACTIVE") | {name: .id, state: .state}''

    ```'
  name: check_loki_ring_api
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ready'
  doc_links: '

    - [kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Contexts and Namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Labels and Selectors in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [wget Command Documentation](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON Data Retrieval in wget](https://www.journaldev.com/35201/wget-command-guide#5-retrieve-json-data){:target="_blank"}'
  explanation: This command is using kubectl to execute a command within a specific
    Kubernetes context and namespace, targeting a pod labeled with the specified component.
    The command being executed uses wget to make a request to a local endpoint and
    retrieve JSON data from the specified URL.
  multi_line_details: '```bash

    #!/bin/bash


    # This script executes a command inside a Kubernetes pod in a specific namespace
    and context.

    # It retrieves the name of the first pod with the label app.kubernetes.io/component=single-binary,

    # then runs the command ''wget'' inside that pod to make a request to http://localhost:3100/ready


    # Set the context and namespace parameters

    CONTEXT=${CONTEXT}

    NAMESPACE=${NAMESPACE}


    # Get the name of the first pod with the label app.kubernetes.io/component=single-binary

    POD_NAME=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary
    -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute the ''wget'' command inside the selected pod

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $POD_NAME -- wget -q --header="Accept:
    application/json" -O - http://localhost:3100/ready

    ```

    In this multi-line script, we set the `CONTEXT` and `NAMESPACE` variables to the
    desired values. Then, we use `kubectl` to get the name of the targeted pod and
    store it in `POD_NAME`. Finally, we execute the `wget` command inside the selected
    pod to make a request to the specified URL.'
  name: check_loki_api_ready
