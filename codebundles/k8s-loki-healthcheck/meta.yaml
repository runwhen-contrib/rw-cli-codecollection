commands:
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ring
    | jq -r ''.shards[] | select(.state != "ACTIVE") | {name: .id, state: .state}'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [wget command](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON format](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a `wget` request on a specific
    pod within a Kubernetes context and namespace, returning the shards that are not
    in an "ACTIVE" state in JSON format.
  multi_line_details: '```bash

    # Set the Kubernetes context and namespace

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Get the name of the pod based on the label selector

    POD_NAME=$(kubectl --context=${CONTEXT} -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary
    -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command inside the pod to fetch data from a specific endpoint and
    process it with jq

    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec ${POD_NAME} -- wget -q --header="Accept:
    application/json" -O - http://localhost:3100/ring | jq -r ''.shards[] | select(.state
    != "ACTIVE") | {name: .id, state: .state}''

    ```'
  name: check_loki_ring_api
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ready'
  doc_links: '

    - [kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Contexts and Namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Labels and Selectors in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [wget Command Documentation](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON Data Retrieval in wget](https://www.journaldev.com/35201/wget-command-guide#5-retrieve-json-data){:target="_blank"}'
  explanation: This command is using kubectl to execute a command within a specific
    Kubernetes context and namespace, targeting a pod labeled with the specified component.
    The command being executed uses wget to make a request to a local endpoint and
    retrieve JSON data from the specified URL.
  multi_line_details: "```bash\n# Set the Kubernetes context and namespace for execution\n\
    kubectl --context=${CONTEXT} -n ${NAMESPACE} exec \\\n\n    # Get the name of\
    \ the pod labeled with specific component\n    $(kubectl --context=${CONTEXT}\
    \ -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath='{.items[0].metadata.name}')\
    \ -- \\\n\n    # Execute wget command to fetch data from the given URL\n    wget\
    \ -q --header=\"Accept: application/json\" -O - http://localhost:3100/ready\n\
    ```"
  name: check_loki_api_ready
