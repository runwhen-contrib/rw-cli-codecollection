commands:
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ring
    | jq -r ''.shards[] | select(.state != "ACTIVE") | {name: .id, state: .state}'''
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [wget command](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON format](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a `wget` request on a specific
    pod within a Kubernetes context and namespace, returning the shards that are not
    in an "ACTIVE" state in JSON format.
  multi_line_details: '```bash

    # Set the context to be used for the kubectl command

    kubectl config set-context ${CONTEXT}


    # Set the namespace in which the pods are located

    kubectl config set-context --current --namespace=${NAMESPACE}


    # Get the name of the pod that has the label app.kubernetes.io/component=single-binary

    pod_name=$(kubectl get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command inside the specified pod to make a wget request and use jq
    to parse the response

    kubectl exec ${pod_name} -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ring
    | jq -r ''.shards[] | select(.state != "ACTIVE") | {name: .id, state: .state}''

    ```'
  name: check_loki_ring_api
- command: 'kubectl --context=${CONTEXT} -n ${NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${NAMESPACE} get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')
    -- wget -q --header="Accept: application/json" -O - http://localhost:3100/ready'
  doc_links: '

    - [kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Contexts and Namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Labels and Selectors in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [wget Command Documentation](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}

    - [JSON Data Retrieval in wget](https://www.journaldev.com/35201/wget-command-guide#5-retrieve-json-data){:target="_blank"}'
  explanation: This command is using kubectl to execute a command within a specific
    Kubernetes context and namespace, targeting a pod labeled with the specified component.
    The command being executed uses wget to make a request to a local endpoint and
    retrieve JSON data from the specified URL.
  multi_line_details: '# Set the context to use the specific Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Specify the namespace in which to execute the command

    kubectl config set-context --namespace=${NAMESPACE} ${CONTEXT}


    # Get the name of the pod that has the label app.kubernetes.io/component=single-binary

    POD_NAME=$(kubectl get pods -l app.kubernetes.io/component=single-binary -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command on the specified pod

    kubectl exec ${POD_NAME} -n ${NAMESPACE} -- wget -q --header="Accept: application/json"
    -O - http://localhost:3100/ready'
  name: check_loki_api_ready
