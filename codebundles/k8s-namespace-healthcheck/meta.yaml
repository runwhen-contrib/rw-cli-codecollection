commands:
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} -o json
  explanation: '


    This command allows you to retrieve a list of Kubernetes events related to any
    potential warnings that may have been generated. It specifically filters the events
    for type "Warning" and can be used with the context and namespace parameters provided
    in the command to obtain more specific results. The output format is json which
    provides an easy to read and parse output.'
  name: trace_and_troubleshoot_namespace_warning_events_and_errors
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} -o json | jq -r
    --argjson exit_code_explanations ''{"0": "Success", "1": "Error", "2": "Misconfiguration",
    "130": "Pod terminated by SIGINT", "134": "Abnormal Termination SIGABRT", "137":
    "Pod terminated by SIGKILL - Possible OOM", "143":"Graceful Termination SIGTERM"}''
    ''.items[] | select(.status.containerStatuses != null) | select(.status.containerStatuses[].restartCount
    > 0) | "---\npod_name: \(.metadata.name)\ncontainers: \(.status.containerStatuses
    | map(.name) | join(", "))\nrestart_count: \(.status.containerStatuses[].restartCount)\nmessage:
    \(.status.message // "N/A")\n\(.status.containerStatuses[] | select(.state.running
    != null) | .lastState.terminated | "terminated_reason: \(.reason // "N/A")\nterminated_finishedAt:
    \(.finishedAt // "N/A")\nterminated_exitCode: \(.exitCode // "N/A")\nexit_code_explanation:
    \($exit_code_explanations[.exitCode | tostring] // "Unknown exit code")")\n---\n"'''
  explanation: '


    This command will get information about all containers from the pods in the specified
    Kubernetes context and namespace. It will then filter the results to only display
    pods with restarted containers. For each pod, the following pieces of information
    will be displayed:


    - The pod name

    - The names of all containers in the pod

    - The number of times each container has been restarted

    - Any error messages related to the restart

    - The reason that a container was terminated

    - The time at which a container was last terminated

    - The exit code associated with a container''s termination

    - An explanation of the exit code'
  name: troubleshoot_container_restarts_in_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase=Pending
    --no-headers -o json | jq -r ''.items[] | "---\npod_name: \(.metadata.name)\nstatus:
    \(.status.phase // "N/A")\nmessage: \(.status.conditions[].message // "N/A")\nreason:
    \(.status.conditions[].reason // "N/A")\ncontainerStatus: \((.status.containerStatuses
    // [{}])[].state // "N/A")\ncontainerMessage: \((.status.containerStatuses //
    [{}])[].state?.waiting?.message // "N/A")\ncontainerReason: \((.status.containerStatuses
    // [{}])[].state?.waiting?.reason // "N/A")\n---\n"'''
  explanation: "\n\nThis command can be used to get a list of pending pods in a specific\
    \ Kubernetes namespace and context. The command begins with the command 'kubectl',\
    \ which is the command line tool for interacting with a Kubernetes cluster. Following\
    \ that are the flags 'get pods', which is an instruction to kubectl to retrieve\
    \ a list of pods from the cluster. \n\nThe flag '--context=' followed by (${CONTEXT})\
    \ gives additional information about which context you want to view the pods from.\
    \ Contexts provide different views of the same cluster, allowing multiple users\
    \ to access the same cluster with different sets of restrictions. \n\nThe flag\
    \ '-n' followed by (${NAMESPACE}) tells kubectl to only show pods from this particular\
    \ namespace on the cluster. Namespaces are used to identify and group resources\
    \ such as pods; think of them as a way to organize your system into logical units.\
    \ \n\nThe flag '--field-selector=status.phase=Pending' will tell Kubectl to only\
    \ list pods with status phase 'Pending'. The '--no-headers' flag tells Kubectl\
    \ to not list any headers or labels when displaying the output. \n\nFinally, the\
    \ last two components of the command, -o json and jq -r '.items[] | \"---\\npod_name:\
    \ \\(.metadata.name)\\nstatus: \\(.status.phase // \"N/A\")\\nmessage:\\n \\(.status.conditions[].message\
    \ // \"N/A\")\\nreason: \\(.status.conditions[].reason // \"N/A\")\\ncontainerStatus:\
    \ \\((.status.containerStatuses // [{}])[].state // \"N/A\")\\nmessage: \\((.status.containerStatuses\
    \ // [{}])[].state?.waiting?.message // \"N/A\")\\ncontainerReason: \\((.status.containerStatuses\
    \ // [{}])[].state?.waiting?.reason // \"N/A\")\\n---\\n\"' \nThese two commands\
    \ instruct kubectl to format the output as JSON for easier parsing by other programs\
    \ such as jq. jq is a command line json processor which in this case is filtering\
    \ the data and printing out specific fields about the pending pods."
  name: troubleshoot_pending_pods_in_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --field-selector=status.phase=Failed
    --no-headers -o json | jq -r --argjson exit_code_explanations ''{"0": "Success",
    "1": "Error", "2": "Misconfiguration", "130": "Pod terminated by SIGINT", "134":
    "Abnormal Termination SIGABRT", "137": "Pod terminated by SIGKILL - Possible OOM",
    "143":"Graceful Termination SIGTERM"}'' ''.items[] | "---\npod_name: \(.metadata.name)\nrestart_count:
    \(.status.containerStatuses[0].restartCount // "N/A")\nmessage: \(.status.message
    // "N/A")\nterminated_finishedAt: \(.status.containerStatuses[0].state.terminated.finishedAt
    // "N/A")\nexit_code: \(.status.containerStatuses[0].state.terminated.exitCode
    // "N/A")\nexit_code_explanation: \($exit_code_explanations[.status.containerStatuses[0].state.terminated.exitCode
    | tostring] // "Unknown exit code")\n---\n"'''
  explanation: "\n\nThis command displays information about all of the failed pods\
    \ in a specific namespace and context. \n\nBy using the ```kubectl get pods```\
    \ command with some additional arguments, you can specify parameters such as context\
    \ (--context=${CONTEXT}), namespace (-n ${NAMESPACE}), and field selector (--field-selector=status.phase=Failed)\
    \ to list only failed pods. The --no-headers argument limits the output displayed.\
    \ \n\nThe pipe character (| ) connects this command with the jq command to parse\
    \ the JSON data and extract information about the failed pod. This includes the\
    \ pod name, restart count, message, finishedAt, exit code, and an explanation\
    \ of the exit code."
  name: troubleshoot_failed_pods_in_namespace
- command: kubectl get all --context ${CONTEXT} -n ${NAMESPACE} -o json
  explanation: '


    Kubectl get all --context ${CONTEXT} -n ${NAMESPACE} -o json is a command that
    allows you to access Kubernetes resources in a specific context and namespace
    with an output of json. The ${CONTEXT} and ${NAMESPACE} arguments allow you to
    be more specific when searching for resources. This command can be useful if you
    want to take a deeper look into the Kubernetes resources you have available in
    a particular context and namespace.'
  name: troubleshoot_workload_status_conditions_in_namespace
- command: kubectl api-resources --verbs=list --namespaced -o name --context=${CONTEXT}
    | xargs -n 1 kubectl get --show-kind --ignore-not-found -n ${NAMESPACE} --context=${CONTEXT}
  explanation: "\n\nThis command retrieves the list of resources available in the\
    \ Kubernetes cluster that you are currently connected to. This is useful for knowing\
    \ what type of objects are available with the Kubernetes API. First, it searches\
    \ for all resources available on the cluster and only returns a list of the names.\
    \ It then applies flags to determine which verb (in this case \"list\") should\
    \ be used, allowing you to access more information about each resource. The \u2013\
    namespaced flag limits results to those resources that require a namespace to\
    \ be specified, while the \u2013context flag specifies the connection context\
    \ of the current cluster. Finally, the xargs command is used to get additional\
    \ details about the resources, such as their type (-show-kind) and if they have\
    \ been found (-ignore-not-found). It will also ensure any retrieved resources\
    \ belong to the specified namespace (-n ${NAMESPACE})."
  name: get_listing_of_resources_in_namespace
- command: services=($(kubectl get svc -o=name --context=${CONTEXT} -n ${NAMESPACE}));
    logs=""; for service in "\${services[@]}"; do logs+=$(kubectl logs $service --limit-bytes=256000
    --since=2h --context=${CONTEXT} -n ${NAMESPACE} | grep -Ei "${SERVICE_ERROR_PATTERN}"
    | grep -Ev "${SERVICE_EXCLUDE_PATTERN}" | sort | uniq -c | awk '{print "Issue
    Occurences:",$0}'); done; echo "\${logs}"
  explanation: '


    This command is used to get logs from Kubernetes services in a given context and
    namespace. It retrieves all service names using the kubectl get svc command and
    stores them in an array named "services". Then it loops through each service,
    retrieving the logs with kubectl logs and storing them in the "logs" variable.
    Lastly, the output is filtered based on patterns provided by the user and printed
    out.'
  name: troubleshoot_namespace_services_and_application_workloads
- command: context="${CONTEXT}"; namespace="${NAMESPACE}"; check_health() { local
    type=$1; local name=$2; local replicas=$3; local selector=$4; local pdbs=$(kubectl
    --context "$context" --namespace "$namespace" get pdb -o json | jq -c --arg selector
    "$selector" '.items[] | select(.spec.selector.matchLabels | to_entries[] | .key
    + "=" + .value == $selector)'); if [[ $replicas -gt 1 && -z "$pdbs" ]]; then printf
    "%-30s %-30s %-10s\n" "$type/$name" "" "Missing"; else echo "$pdbs" | jq -c .
    | while IFS= read -r pdb; do local pdbName=$(echo "$pdb" | jq -r '.metadata.name');
    local minAvailable=$(echo "$pdb" | jq -r '.spec.minAvailable // ""'); local maxUnavailable=$(echo
    "$pdb" | jq -r '.spec.maxUnavailable // ""'); if [[ "$minAvailable" == "100%"
    || "$maxUnavailable" == "0" || "$maxUnavailable" == "0%" ]]; then printf "%-30s
    %-30s %-10s\n" "$type/$name" "$pdbName" "Risky"; elif [[ $replicas -gt 1 && ("$minAvailable"
    != "100%" || "$maxUnavailable" != "0" || "$maxUnavailable" != "0%") ]]; then printf
    "%-30s %-30s %-10s\n" "$type/$name" "$pdbName" "OK"; fi; done; fi; }; echo "Deployments:";
    echo "-----------"; printf "%-30s %-30s %-10s\n" "NAME" "PDB" "STATUS"; kubectl
    --context "$context" --namespace "$namespace" get deployments -o json | jq -c
    '.items[] | "\(.metadata.name) \(.spec.replicas) \(.spec.selector.matchLabels
    | to_entries[] | .key + "=" + .value)"' | while read -r line; do check_health
    "Deployment" $(echo $line | tr -d '"'); done; echo ""; echo "Statefulsets:"; echo
    "-------------"; printf "%-30s %-30s %-10s\n" "NAME" "PDB" "STATUS"; kubectl --context
    "$context" --namespace "$namespace" get statefulsets -o json | jq -c '.items[]
    | "\(.metadata.name) \(.spec.replicas) \(.spec.selector.matchLabels | to_entries[]
    | .key + "=" + .value)"' | while read -r line; do check_health "StatefulSet" $(echo
    $line | tr -d '"'); done
  explanation: '


    This command checks the health of your Deployments and StatefulSets in Kubernetes.
    It works by scanning all the Deployments and StatefulSets in your context namespace
    for Pod Disruption Budgets (PDBs). It then compares the number of replicas you''ve
    set for each of them with the PDB settings and prints out a ''STATUS'' based on
    the result. If there is no PDB available for a given Deployment or StatefulSet,
    then it will print out a "Missing" status. Otherwise, it will print out either
    an "OK" or a "Risky" status depending on the PDB settings.'
  name: check_missing_or_risky_poddisruptionbudget_policies
