commands:
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} -o json
  explanation: '


    This command allows you to retrieve a list of Kubernetes events related to any
    potential warnings that may have been generated. It specifically filters the events
    for type "Warning" and can be used with the context and namespace parameters provided
    in the command to obtain more specific results. The output format is json which
    provides an easy to read and parse output.'
  name: trace_and_troubleshoot_namespace_warning_events_and_errors
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} --sort-by=''status.containerStatuses[0].restartCount''
    --field-selector=status.phase=Failed --no-headers -o json | jq -r --argjson exit_code_explanations
    ''{"0": "Success", "1": "Error", "2": "Misconfiguration", "130": "Pod terminated
    by SIGINT", "134": "Abnormal Termination SIGABRT", "137": "Pod terminated by SIGKILL
    - Possible OOM", "143":"Graceful Termination SIGTERM"}'' ''.items[] | "---\npod_name:
    \(.metadata.name)\nrestart_count: \(.status.containerStatuses[0].restartCount
    // "N/A")\nmessage: \(.status.message // "N/A")

    terminated_finishedAt: \(.status.containerStatuses[0].state.terminated.finishedAt
    // "N/A")\nexit_code: \(.status.containerStatuses[0].state.terminated.exitCode
    // "N/A")\nexit_code_explanation: \($exit_code_explanations[.status.containerStatuses[0].state.terminated.exitCode
    | tostring] // "Unknown exit code")\n---\n"'''
  explanation: "\n\nThis command is used to retrieve a listing of all pods that are\
    \ currently in a failed state in the Kubernetes cluster. It will print out the\
    \ name, restart count, status message, finishedAt timestamp, and exit code(along\
    \ with an explanation) of each failed pod. The output will be in JSON format.\
    \ \n\nThe command also takes several flags that control its behaviour: \n--context=${CONTEXT}:\
    \ This flag allows you to specify which Kubernetes context you want to query.\
    \ \n-n ${NAMESPACE}: This flag allows you to restrict the list of pods to the\
    \ specified namespace. \n--sort-by='status.containerStatuses[0].restartCount':\
    \ This flag allows you to sort the output by the restart count inside the container\
    \ statuses array. \n--field-selector=status.phase=Failed: This flag restricts\
    \ the output to only show those pods whose status phase equals to Failed.\n--no-headers:\
    \ This flag causes the output to not include headers at the top. \n-o json | jq\
    \ -r: This option changes the output to be in a JSON string format, parsed using\
    \ the JQ command line utility. \n--argjson exit_code_explanations: This flag defines\
    \ a list of possible exit codes and explanations for them associated with them.\
    \ \n\nTherefore, running this command should produce a list of all failed pods\
    \ in the Kubernetes cluster with information about each pod's restart count, message,\
    \ finishedAt timestamp, and exit code along with possible explanation."
  name: troubleshoot_unready_pods_in_namespace
- command: kubectl get all --context ${CONTEXT} -n ${NAMESPACE} -o json
  explanation: '


    Kubectl get all --context ${CONTEXT} -n ${NAMESPACE} -o json is a command that
    allows you to access Kubernetes resources in a specific context and namespace
    with an output of json. The ${CONTEXT} and ${NAMESPACE} arguments allow you to
    be more specific when searching for resources. This command can be useful if you
    want to take a deeper look into the Kubernetes resources you have available in
    a particular context and namespace.'
  name: troubleshoot_workload_status_conditions_in_namespace
- command: kubectl api-resources --verbs=list --namespaced -o name --context=${CONTEXT}
    | xargs -n 1 kubectl get --show-kind --ignore-not-found -n ${NAMESPACE} --context=${CONTEXT}
  explanation: "\n\nThis command retrieves the list of resources available in the\
    \ Kubernetes cluster that you are currently connected to. This is useful for knowing\
    \ what type of objects are available with the Kubernetes API. First, it searches\
    \ for all resources available on the cluster and only returns a list of the names.\
    \ It then applies flags to determine which verb (in this case \"list\") should\
    \ be used, allowing you to access more information about each resource. The \u2013\
    namespaced flag limits results to those resources that require a namespace to\
    \ be specified, while the \u2013context flag specifies the connection context\
    \ of the current cluster. Finally, the xargs command is used to get additional\
    \ details about the resources, such as their type (-show-kind) and if they have\
    \ been found (-ignore-not-found). It will also ensure any retrieved resources\
    \ belong to the specified namespace (-n ${NAMESPACE})."
  name: get_listing_of_resources_in_namespace
- command: services=($(kubectl get svc -o=name --context=${CONTEXT} -n ${NAMESPACE}));
    logs=""; for service in "\${services[@]}"; do logs+=$(kubectl logs $service --limit-bytes=256000
    --since=2h --context=${CONTEXT} -n ${NAMESPACE} | grep -Ei "${SERVICE_ERROR_PATTERN}"
    | grep -Ev "${SERVICE_EXCLUDE_PATTERN}" | sort | uniq -c | awk '{print "Issue
    Occurences:",$0}'); done; echo "\${logs}"
  explanation: '


    This command is used to get logs from Kubernetes services in a given context and
    namespace. It retrieves all service names using the kubectl get svc command and
    stores them in an array named "services". Then it loops through each service,
    retrieving the logs with kubectl logs and storing them in the "logs" variable.
    Lastly, the output is filtered based on patterns provided by the user and printed
    out.'
  name: troubleshoot_namespace_services_and_application_workloads
