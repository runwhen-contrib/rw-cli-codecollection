commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    - [Kubernetes Documentation - Get a single pod](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation - Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Documentation - Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation - Resource Requirements and Limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command is used to retrieve information about running pods in
    a Kubernetes cluster, specifically targeting pods in a specific namespace with
    certain labels and filtering for those without resource limits set. The output
    is then formatted as JSON using the jq tool.
  multi_line_details: "\n# Get the list of pods in a Kubernetes cluster\nkubectl get\
    \ pods \\\n  # Use specified context for the command\n  --context=${CONTEXT} \\\
    \n  # Specify the namespace where the pods are located\n  -n ${NAMESPACE} \\\n\
    \  # Filter pods by specific labels\n  ${LABELS} \\\n  # Select only pods that\
    \ are in the \"Running\" status\n  --field-selector=status.phase=Running \\\n\
    \  # Output the result in JSON format\n  -ojson | jq -r '[.items[] as $pod |\n\
    \    ($pod.spec.containers // [][])[] |\n      select(.resources.limits == null)\
    \ |\n        {pod: $pod.metadata.name, container_without_limits: .name}]'\n\n\
    This multi-line command provides clear and detailed explanations of each section,\
    \ making it easier to understand and modify for newer or less experienced devops\
    \ engineers. It also includes comments to explain each option used in the `kubectl`\
    \ and `jq` commands."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    - [Kubernetes Documentation - Get a single pod](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation - Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Documentation - Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation - Resource Requirements and Limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command is used to retrieve information about running pods in
    a Kubernetes cluster, specifically targeting pods in a specific namespace with
    certain labels and filtering for those without resource limits set. The output
    is then formatted as JSON using the jq tool.
  multi_line_details: "\n# Get the list of pods in a Kubernetes cluster\nkubectl get\
    \ pods \\\n  # Use specified context for the command\n  --context=${CONTEXT} \\\
    \n  # Specify the namespace where the pods are located\n  -n ${NAMESPACE} \\\n\
    \  # Filter pods by specific labels\n  ${LABELS} \\\n  # Select only pods that\
    \ are in the \"Running\" status\n  --field-selector=status.phase=Running \\\n\
    \  # Output the result in JSON format\n  -ojson | jq -r '[.items[] as $pod |\n\
    \    ($pod.spec.containers // [][])[] |\n      select(.resources.limits == null)\
    \ |\n        {pod: $pod.metadata.name, container_without_limits: .name}]'\n\n\
    This multi-line command provides clear and detailed explanations of each section,\
    \ making it easier to understand and modify for newer or less experienced devops\
    \ engineers. It also includes comments to explain each option used in the `kubectl`\
    \ and `jq` commands."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes official documentation on kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Label Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes resource requests and limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about running pods in a specific
    context and namespace, filtering the results by a specific label and only including
    pods with containers that have no resource requests specified. The output is then
    formatted as JSON using the `jq` tool.
  multi_line_details: "\n# This command retrieves information about running pods in\
    \ a specific context and namespace, filtering them by certain labels.\n\nkubectl\
    \ get pods \n  --context=${CONTEXT} # Specifies the context to be used for the\
    \ command\n  -n ${NAMESPACE}       # Specifies the namespace of the pods to be\
    \ retrieved\n  ${LABELS}             # Any additional label filters for the pods\n\
    \  --field-selector=status.phase=Running # Filters the pods based on their running\
    \ status\n  -ojson                # Outputs the information in JSON format\n\n\
    # The output of the previous command is then piped into jq, which is a lightweight\
    \ and flexible command-line JSON processor.\n| jq -r '[.items[] as $pod | ($pod.spec.containers\
    \ // [][])[] | select(.resources.requests == null) | {pod: $pod.metadata.name,\
    \ container_without_requests: .name}]'\n# The jq command filters the information\
    \ even further, selecting only containers without resource requests and formatting\
    \ the output in a readable JSON format, displaying each pod's name and the name\
    \ of the container without resource requests.\n\nBy breaking down the command\
    \ and including helpful comments, newer or less experienced devops engineers can\
    \ better understand what each part of the command does and how it contributes\
    \ to the overall functionality."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes official documentation on kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Label Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes resource requests and limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about running pods in a specific
    context and namespace, filtering the results by a specific label and only including
    pods with containers that have no resource requests specified. The output is then
    formatted as JSON using the `jq` tool.
  multi_line_details: "\n# This command retrieves information about running pods in\
    \ a specific context and namespace, filtering them by certain labels.\n\nkubectl\
    \ get pods \n  --context=${CONTEXT} # Specifies the context to be used for the\
    \ command\n  -n ${NAMESPACE}       # Specifies the namespace of the pods to be\
    \ retrieved\n  ${LABELS}             # Any additional label filters for the pods\n\
    \  --field-selector=status.phase=Running # Filters the pods based on their running\
    \ status\n  -ojson                # Outputs the information in JSON format\n\n\
    # The output of the previous command is then piped into jq, which is a lightweight\
    \ and flexible command-line JSON processor.\n| jq -r '[.items[] as $pod | ($pod.spec.containers\
    \ // [][])[] | select(.resources.requests == null) | {pod: $pod.metadata.name,\
    \ container_without_requests: .name}]'\n# The jq command filters the information\
    \ even further, selecting only containers without resource requests and formatting\
    \ the output in a readable JSON format, displaying each pod's name and the name\
    \ of the container without resource requests.\n\nBy breaking down the command\
    \ and including helpful comments, newer or less experienced devops engineers can\
    \ better understand what each part of the command does and how it contributes\
    \ to the overall functionality."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [kubectl top](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-em-top-em-){:target="_blank"}'
  explanation: This command uses kubectl to retrieve a list of running pods in a specific
    namespace and context, then uses the kubectl top command to display CPU and memory
    usage for each pod and its containers.
  multi_line_details: "\n# Set up variables for easy modification\nLABELS=\"app=myapp\"\
    \ # replace with the appropriate label for your pods\nNAMESPACE=\"my-namespace\"\
    \ # replace with the namespace where your pods are located\nCONTEXT=\"my-context\"\
    \ # replace with the appropriate context for your Kubernetes cluster\n\n# Use\
    \ kubectl to get a list of running pods based on specified labels, namespace,\
    \ and context\nrunning_pods=$(kubectl get pods -l $LABELS -n $NAMESPACE --context\
    \ $CONTEXT --field-selector=status.phase=Running -o custom-columns=\":metadata.name\"\
    )\n\n# Iterate through the list of running pods and use kubectl top to display\
    \ resource usage for each pod and its containers\nfor pod in $running_pods; do\n\
    \    kubectl top pod $pod -n $NAMESPACE --context $CONTEXT --containers\ndone\n\
    \nThis multi-line command is broken down into several steps and includes helpful\
    \ comments to explain the purpose of each section. It also provides clear instructions\
    \ for newer or less experienced devops engineers on how to modify the command\
    \ to suit their specific environment."
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [kubectl top](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-em-top-em-){:target="_blank"}'
  explanation: This command uses kubectl to retrieve a list of running pods in a specific
    namespace and context, then uses the kubectl top command to display CPU and memory
    usage for each pod and its containers.
  multi_line_details: "\n# Set up variables for easy modification\nLABELS=\"app=myapp\"\
    \ # replace with the appropriate label for your pods\nNAMESPACE=\"my-namespace\"\
    \ # replace with the namespace where your pods are located\nCONTEXT=\"my-context\"\
    \ # replace with the appropriate context for your Kubernetes cluster\n\n# Use\
    \ kubectl to get a list of running pods based on specified labels, namespace,\
    \ and context\nrunning_pods=$(kubectl get pods -l $LABELS -n $NAMESPACE --context\
    \ $CONTEXT --field-selector=status.phase=Running -o custom-columns=\":metadata.name\"\
    )\n\n# Iterate through the list of running pods and use kubectl top to display\
    \ resource usage for each pod and its containers\nfor pod in $running_pods; do\n\
    \    kubectl top pod $pod -n $NAMESPACE --context $CONTEXT --containers\ndone\n\
    \nThis multi-line command is broken down into several steps and includes helpful\
    \ comments to explain the purpose of each section. It also provides clear instructions\
    \ for newer or less experienced devops engineers on how to modify the command\
    \ to suit their specific environment."
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
- command: bash 'vpa_recommendations.sh'
  doc_links: '

    - [Kubernetes cluster documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Bash scripting documentation](https://www.gnu.org/software/bash/manual/bash.html){:target="_blank"}

    - [JSON format documentation](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This script is a bash script that fetches VPA (Vertical Pod Autoscaler)
    recommendations from the Kubernetes cluster for a specific namespace and context,
    analyzes the current CPU and Memory requests in the cluster, and generates recommendations
    to adjust pod resources such as CPU and Memory based on the VPA recommendations.
    The final output is provided in JSON format.
  multi_line_details: "\n# Start a bash script\n\n# Initialize recommendations array\n\
    declare -a recommendations\n\n# Function to convert memory to Mi\nconvert_memory_to_mib()\
    \ {\n    local memory=$1\n\n    # Extract the number and unit separately\n   \
    \ local number=${memory//[!0-9]/}\n    local unit=${memory//[0-9]/}\n\n    case\
    \ $unit in\n        Gi)\n            echo $(( number * 1024 ))  # Convert Gi to\
    \ Mi\n            ;;\n        Mi)\n            echo $number  # Already in Mi\n\
    \            ;;\n        Ki)\n            echo $(( number / 1024 ))  # Convert\
    \ Ki to Mi\n            ;;\n        *)\n            echo $(( number / (1024 *\
    \ 1024) ))  # Convert bytes to Mi\n            ;;\n    esac\n}\n\n# Function to\
    \ convert CPU to millicores\nconvert_cpu_to_millicores() {\n    local cpu=$1\n\
    \    if [[ $cpu =~ ^[0-9]+m$ ]]; then\n        echo ${cpu%m}\n    else\n     \
    \   echo $(($cpu * 1000))  # Convert CPU cores to millicores\n    fi\n}\n\n# ...\n\
    # (Remaining script left for comment...)\n"
  name: identify_pod_resource_recommendations_in_namespace_namespace
