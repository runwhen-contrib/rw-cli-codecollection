commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  explanation: '


    Kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'' is a
    command that allows you to query the Kubernetes API server for all running pods
    in the specified context, namespace and labels provided. The output of this command
    will be a list of all pods that have containers without resource limits. This
    is useful if you want to review your resource configuration and ensure every container
    is configured with appropriate resource limits to prevent unexpected behavior.'
  name: scan_labeled_pods_and_show_all_containers_without_resource_limit_or_resource_requests_set
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  explanation: '


    This command will use the Kubernetes command line tool (kubectl) to get details
    about any pods in a particular namespace that have no requests set and are in
    the running state. The context and namespace values must be passed in, as well
    as optionally labels; this filter out the right results from the list of all pods.
    The output format is JSON so the output can be further filtered with jq to find
    the exact requests of interest and present them in an easily readable form.'
  name: scan_labeled_pods_and_show_all_containers_without_resource_limit_or_resource_requests_set
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  explanation: '


    This command will list all running pods in Kubernetes which belong to a specific
    namespace and context. The `kubectl get pods` command will retrieve a list of
    pods with the labels you specify, along with some other metadata about them. We
    can use the `-o custom-columns=":metadata.name"` flag to make sure we just receive
    their names. We also have `--field-selector=status.phase=Running` to make sure
    we only see the running pods.  Once we have the list of running pods, we then
    loop over each one to view the resource usage of its containers. The `kubectl
    top pod` command will show us this information for each pod.'
  name: get_labeled_container_top_info
