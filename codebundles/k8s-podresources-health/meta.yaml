commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    '
  explanation: This command uses kubectl to retrieve information on running pods in
    a specified namespace and context, filtering by specific labels and only including
    those that do not have resource limits defined for their containers. It then formats
    the output in JSON using jq.
  multi_line_details: '```

    # Set the Kubernetes context to specify which cluster and namespace to operate
    in

    kubectl config set-context ${CONTEXT}


    # Specify the namespace where the pods are located

    kubectl config set-context --current --namespace=${NAMESPACE}


    # Get the pods with specific labels that are running in the specified namespace

    kubectl get pods -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson


    # Use jq to parse the output and filter for pods and their containers without
    resource limits

    jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]''

    ```'
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes jq JSON Processor](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about pods in a specific namespace
    and context, filtering by labels and only showing those that are currently running.
    It then uses the jq tool to parse the JSON output and list the pods and containers
    that do not have resource requests specified.
  multi_line_details: '# Use kubectl to get information about pods in a particular
    context and namespace

    kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson |


    # Use jq to filter out and format the output as specified

    jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] |

    select(.resources.requests == null) | {pod: $pod.metadata.name, container_without_requests:
    .name}]'''
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [Kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Labels and Selectors in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Monitoring Resource Usage in Kubernetes](https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve the names of running pods with
    specific labels in a specific namespace and context, and then gathers resource
    usage data for each pod and its containers.
  multi_line_details: "# Get the list of pods matching certain labels in a specific\
    \ namespace and context\npods=$(kubectl get pods ${LABELS} -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o custom-columns=\":metadata.name\" --field-selector=status.phase=Running)\n\
    \n# Loop through each pod and get resource usage information for each container\
    \ within the pod\nfor pod in $pods; do\n  kubectl top pod $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} --containers\ndone"
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
