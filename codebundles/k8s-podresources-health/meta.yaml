commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    - [`kubectl get pods` - get information about Pod objects](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-pods){:target="_blank"}

    - [`--context` parameter for kubectl](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#set-the-current-context){:target="_blank"}

    - [`-n/${NAMESPACE}` parameter for kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands/#namespace-1){:target="_blank"}

    - [`${LABELS}` parameter for kubectl](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [`--field-selector` parameter for kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands/#--field-selector=){:target="_blank"}

    - [`-o json` parameter for kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands/#output-short-options){:target="_blank"}

    - [jq - Command-line JSON processor](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: '


    This command will list the running pods in a specific namespace on a Kubernetes
    cluster and output the names of pods and associated containers that do not have
    resource limits set. Specifically, it uses the kubectl command to get information
    about the pods from the context and namespace provided. Then, it filters that
    information so only pods with running status are shown. After that, it looks for
    any containers within those pods that don''t have resource limits set and then
    only lists the pod name and corresponding container without limits as the output.'
  multi_line_details: '


    # Get a list of Kubernetes Pods in the context specified

    kubectl get pods \

    --context=${CONTEXT} \

    # Within the namespace specified

    -n ${NAMESPACE} \

    # That include the labels provided

    ${LABELS} \

    # Filter only those that are Running

    --field-selector=status.phase=Running \

    # Format it as JSON output

    -ojson \

    # Use jq to create an array containing names of the selected Pods and the containers

    | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  name: scan_labeled_pods_and_show_all_containers_without_resource_limit_or_resource_requests_set
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes Documentation - kubectl get command](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation - Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Documentation - Field Selector Syntax](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#field-selectors){:target="_blank"}'
  explanation: '


    This command uses the kubectl command line tool to retrieve information about
    the running pods from a Kubernetes cluster. The options used with this command
    include, --context which sets the context of what cluster to query for the pods
    and -n which specifies the namespace in that cluster where the pods are located.
    An optional parameter is labels which provides additional filters on which pods
    to get and finally field-selector which will select only those pods with a particular
    state. The output of this command will be in json format and will pipe it through
    jq (which is a utility for manipulating JSON data) to filter out only those containers
    without resources requests and to display them in a human-readable format.'
  multi_line_details: "\n\n# Get information about all Kubernetes Pods within the\
    \ specified namespace in the current context, with a status of Running \nkubectl\
    \ get pods \\\n    --context=${CONTEXT} \\                 # Select the context\
    \ to use\n    -n ${NAMESPACE} \\                      # Specify the namespace\
    \ \n    ${LABELS} \\                            # Filter pods based on labels\n\
    \    --field-selector=status.phase=Running   # Only list pods with a status of\
    \ Running\n    -ojson |                               # Output as JSON so it can\
    \ be processed further\njq -r '[.items[] as $pod | ($pod.spec.containers // [][])[]\
    \ | select(.resources.requests == null) | {pod: $pod.metadata.name, container_without_requests:\
    \ .name}]'  # Process output using the jq utility, returning the names of pods\
    \ and containers which have no requests set"
  name: scan_labeled_pods_and_show_all_containers_without_resource_limit_or_resource_requests_set
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [Kubernetes official documentation page for kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get_pods){:target="_blank"}

    - [Kubernetes official documentation page for kubectl top pod](https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/#determine-the-cpu-and-memory-usage-of-individual-containers){:target="_blank"}'
  explanation: '


    This command is used to check the resource usage of containers running in Kubernetes.
    It starts by getting a list of all pods with a specific set of LABELS and in a
    given NAMESPACE which are running on a given CONTEXT, then it iterates through
    that list and uses the kubectl top command to investigate each pod''s resource
    utilization. The output will provide information about the memory and CPU usage
    of each container in the pod.'
  multi_line_details: "\n\n# Get all pods in the specified namespace and context\n\
    POD_LIST=$(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT} -o\
    \ custom-columns=\":metadata.name\" --field-selector=status.phase=Running)\n\n\
    # Iterate through the retrieved pod list\nfor pod in $POD_LIST; do\n    \n   \
    \ # For each pod, perform the top command for containers\n    kubectl top pod\
    \ $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; \ndone"
  name: get_labeled_container_top_info
