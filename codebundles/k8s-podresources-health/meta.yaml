commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    '
  explanation: "This command is used to get information about the pods within a specific\
    \ context and namespace in Kubernetes. \n\n- \"kubectl\" is the command-line tool\
    \ for interacting with Kubernetes.\n- \"get\" is the action we want to perform,\
    \ which is getting information about resources.\n- \"pods\" specifies that we\
    \ are interested in retrieving information about pods.\n\nThe flags used in this\
    \ command are as follows:\n- \"--context=${CONTEXT}\" is specifying the context\
    \ in which we want to perform the operation. A context is a group of access parameters\
    \ (like cluster location, user identity, etc.).\n- \"-n ${NAMESPACE}\" is specifying\
    \ the namespace in which we want to operate. Namespaces are a way to divide cluster\
    \ resources between multiple users or teams.\n- \"${LABELS}\" is optional and\
    \ allows you to specify labels to filter the results further.\n- \"--field-selector=status.phase=Running\"\
    \ is filtering by the status of the pods, specifically looking for those in the\
    \ \"Running\" phase.\n- \"-ojson\" specifies the desired output format as JSON.\
    \ \n- \"| jq -r '[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits\
    \ == null) | {pod: $pod.metadata.name, container_without_limits: .name}]\" at\
    \ the end is using the \"jq\" command-line JSON processor to further filter and\
    \ format the results.\n\nThis complex command fetches detailed information about\
    \ running pods in a specific context and namespace. It filters the pods that do\
    \ not have resource limits specified and presents the details in a structured\
    \ JSON format. This could be very useful when checking for potential issues or\
    \ misconfigurations within your Kubernetes environment."
  multi_line_details: '```

    # Set the Kubernetes context to specify which cluster and namespace to operate
    in

    kubectl config set-context ${CONTEXT}


    # Specify the namespace where the pods are located

    kubectl config set-context --current --namespace=${NAMESPACE}


    # Get the pods with specific labels that are running in the specified namespace

    kubectl get pods -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson


    # Use jq to parse the output and filter for pods and their containers without
    resource limits

    jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]''

    ```'
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    '
  explanation: 'This command is used to list all the running pods in a specific Kubernetes
    context and namespace. It also filters the result by looking for pods with certain
    labels and specific statuses.


    Here''s an explanation of the command broken down into its components:


    - `kubectl get pods`: This part of the command instructs Kubernetes to retrieve
    information about pods.


    - `--context=${CONTEXT}`: The `--context` flag is used to specify the context
    in which the command should be executed. In Kubernetes, a context is a way to
    group access parameters under a convenient name.


    - `-n ${NAMESPACE}`: The `-n` flag is used to specify the namespace for which
    the pods information should be retrieved. Namespaces are a way to divide cluster
    resources between multiple users or teams.


    - `${LABELS}`: This part of the command specifies that the results should be filtered
    based on certain labels assigned to the pods.


    - `--field-selector=status.phase=Running`: The `--field-selector` is used to filter
    the results based on specific fields like the status of the pods. In this case,
    it will only return pods in the "Running" phase.


    - `-ojson`: This flag indicates that the output of the command should be in JSON
    format.


    - `| jq -r ''...`: After retrieving the pod information, it''s passed through
    a series of transformations using the `jq` tool. The `jq` tool is used to process
    and manipulate JSON data.


    Let''s break down the `jq` command within the larger command:


    - `[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]`: This
    section uses `jq` to parse and filter the JSON output. It iterates over each pod
    and its containers, selects those without resource requests, and formats the output
    to show the pod name and the container without resource requests.


    In summary, this command retrieves a list of running pods within a specific Kubernetes
    context and namespace, applies filters based on labels and statuses, and then
    processes the output to find containers without resource requests defined.'
  multi_line_details: '# Use kubectl to get information about pods in a particular
    context and namespace

    kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson |


    # Use jq to filter out and format the output as specified

    jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] |

    select(.resources.requests == null) | {pod: $pod.metadata.name, container_without_requests:
    .name}]'''
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [kubectl top](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#top){:target="_blank"}

    - [field-selector in kubectl](https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/){:target="_blank"}'
  explanation: 'Sure! This command is used to retrieve resource usage metrics for
    running pods in a Kubernetes cluster. Let me break it down for you:


    1. `for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do`:
    This part of the command is creating a loop that iterates through each pod that
    meets the specified conditions, such as having specific labels and running in
    a specific namespace.


    2. `kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}`: This part
    of the command retrieves a list of pods that match the specified labels and are
    in the specified namespace and context.


    3. `-o custom-columns=":metadata.name"`: This section specifies that we only want
    to retrieve the name of the pods.


    4. `--field-selector=status.phase=Running`: This part of the command filters the
    list of pods to only include those that are currently running.


    5. `kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers;`:
    This part of the command uses the `kubectl top` command to retrieve resource usage
    metrics for each pod in the loop. It also specifies the namespace and context,
    and includes information about the containers running within the pod.


    6. `done`: This part of the command marks the end of the loop.


    In summary, this command is essentially retrieving resource usage metrics for
    all running pods that match certain criteria within a Kubernetes cluster. As you
    continue to work with Kubernetes, you''ll become more familiar with commands like
    this and how they can be used to monitor and manage resources within the cluster.'
  multi_line_details: "# Get the list of pods matching certain labels in a specific\
    \ namespace and context\npods=$(kubectl get pods ${LABELS} -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o custom-columns=\":metadata.name\" --field-selector=status.phase=Running)\n\
    \n# Loop through each pod and get resource usage information for each container\
    \ within the pod\nfor pod in $pods; do\n  kubectl top pod $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} --containers\ndone"
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
