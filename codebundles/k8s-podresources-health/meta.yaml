commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    '
  explanation: This command uses kubectl to retrieve information on running pods in
    a specified namespace and context, filtering by specific labels and only including
    those that do not have resource limits defined for their containers. It then formats
    the output in JSON using jq.
  multi_line_details: '

    # Retrieve information about all running pods in the specified namespace and with
    the specified labels

    # Store the context, namespace, and labels in environment variables for ease of
    use

    CONTEXT=my-context

    NAMESPACE=my-namespace

    LABELS=''app=my-app,tier=frontend''


    # Use the kubectl command to get information about the pods

    # Include the specified context and namespace, as well as a field selector to
    only show running pods

    # Output the result in JSON format

    kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson |


    # Pipe the output to jq for processing and filtering

    jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]''

    '
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    '
  explanation: This command uses kubectl to retrieve information on running pods in
    a specified namespace and context, filtering by specific labels and only including
    those that do not have resource limits defined for their containers. It then formats
    the output in JSON using jq.
  multi_line_details: '

    # Retrieve information about all running pods in the specified namespace and with
    the specified labels

    # Store the context, namespace, and labels in environment variables for ease of
    use

    CONTEXT=my-context

    NAMESPACE=my-namespace

    LABELS=''app=my-app,tier=frontend''


    # Use the kubectl command to get information about the pods

    # Include the specified context and namespace, as well as a field selector to
    only show running pods

    # Output the result in JSON format

    kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson |


    # Pipe the output to jq for processing and filtering

    jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]''

    '
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes jq JSON Processor](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about pods in a specific namespace
    and context, filtering by labels and only showing those that are currently running.
    It then uses the jq tool to parse the JSON output and list the pods and containers
    that do not have resource requests specified.
  multi_line_details: "\n# This command retrieves information about pods in a specific\
    \ context, namespace, and with certain labels\n\nkubectl get pods --context=${CONTEXT}\
    \ -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running -ojson | \n\n\
    # This part of the command uses jq to process the JSON output and extract specific\
    \ information about pods and containers\n\njq -r '[.items[] as $pod | ($pod.spec.containers\
    \ // [][])[] | \n\n# This part filters out containers that do not have resource\
    \ requests defined\n\nselect(.resources.requests == null) | {pod: $pod.metadata.name,\
    \ container_without_requests: .name}]'\n"
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes jq JSON Processor](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about pods in a specific namespace
    and context, filtering by labels and only showing those that are currently running.
    It then uses the jq tool to parse the JSON output and list the pods and containers
    that do not have resource requests specified.
  multi_line_details: "\n# This command retrieves information about pods in a specific\
    \ context, namespace, and with certain labels\n\nkubectl get pods --context=${CONTEXT}\
    \ -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running -ojson | \n\n\
    # This part of the command uses jq to process the JSON output and extract specific\
    \ information about pods and containers\n\njq -r '[.items[] as $pod | ($pod.spec.containers\
    \ // [][])[] | \n\n# This part filters out containers that do not have resource\
    \ requests defined\n\nselect(.resources.requests == null) | {pod: $pod.metadata.name,\
    \ container_without_requests: .name}]'\n"
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [Kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Labels and Selectors in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Monitoring Resource Usage in Kubernetes](https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve the names of running pods with
    specific labels in a specific namespace and context, and then gathers resource
    usage data for each pod and its containers.
  multi_line_details: "\n# Retrieve a list of running pods in the specified namespace\
    \ and context\nfor pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o custom-columns=\":metadata.name\" --field-selector=status.phase=Running);\
    \ do \n    # For each running pod, use kubectl top command to view resource usage\
    \ for each container within the pod\n    kubectl top pod $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} --containers; \ndone\n\n\nThis multi-line command breaks\
    \ down the original one-liner and provides comments to explain what each part\
    \ of the command is doing. This can be especially helpful for newer or less experienced\
    \ devops engineers who may not be familiar with all the intricacies of working\
    \ with Kubernetes."
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [Kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Labels and Selectors in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Monitoring Resource Usage in Kubernetes](https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve the names of running pods with
    specific labels in a specific namespace and context, and then gathers resource
    usage data for each pod and its containers.
  multi_line_details: "\n# Retrieve a list of running pods in the specified namespace\
    \ and context\nfor pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o custom-columns=\":metadata.name\" --field-selector=status.phase=Running);\
    \ do \n    # For each running pod, use kubectl top command to view resource usage\
    \ for each container within the pod\n    kubectl top pod $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} --containers; \ndone\n\n\nThis multi-line command breaks\
    \ down the original one-liner and provides comments to explain what each part\
    \ of the command is doing. This can be especially helpful for newer or less experienced\
    \ devops engineers who may not be familiar with all the intricacies of working\
    \ with Kubernetes."
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
