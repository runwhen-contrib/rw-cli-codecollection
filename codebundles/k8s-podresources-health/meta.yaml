commands:
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    - [Kubernetes Documentation - Get a single pod](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation - Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Documentation - Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation - Resource Requirements and Limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command is used to retrieve information about running pods in
    a Kubernetes cluster, specifically targeting pods in a specific namespace with
    certain labels and filtering for those without resource limits set. The output
    is then formatted as JSON using the jq tool.
  multi_line_details: "\n# Get the list of pods in a Kubernetes cluster\nkubectl get\
    \ pods \\\n  # Use specified context for the command\n  --context=${CONTEXT} \\\
    \n  # Specify the namespace where the pods are located\n  -n ${NAMESPACE} \\\n\
    \  # Filter pods by specific labels\n  ${LABELS} \\\n  # Select only pods that\
    \ are in the \"Running\" status\n  --field-selector=status.phase=Running \\\n\
    \  # Output the result in JSON format\n  -ojson | jq -r '[.items[] as $pod |\n\
    \    ($pod.spec.containers // [][])[] |\n      select(.resources.limits == null)\
    \ |\n        {pod: $pod.metadata.name, container_without_limits: .name}]'\n\n\
    This multi-line command provides clear and detailed explanations of each section,\
    \ making it easier to understand and modify for newer or less experienced devops\
    \ engineers. It also includes comments to explain each option used in the `kubectl`\
    \ and `jq` commands."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
  when_is_it_useful: '1. Investigating performance issues in a Kubernetes cluster
    by identifying pods without resource limits set, which could be causing them to
    consume excessive resources and lead to CrashLoopBackoff events.


    2. Troubleshooting application failures or instability by examining running pods
    in a specific namespace with certain labels to identify any patterns or dependencies
    between the affected pods.


    3. Conducting a regular audit of resource allocation in a Kubernetes cluster to
    ensure best practices are being followed and to optimize resource usage.


    4. Monitoring and managing compliance and security requirements by identifying
    pods without resource limits set, which could potentially pose a security risk
    or violate organizational policies.


    5. Performing capacity planning and resource management by analyzing the resource
    limits and usage of pods in a specific namespace to determine if additional resources
    are needed or if existing resources are being underutilized.'
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.limits
    == null) | {pod: $pod.metadata.name, container_without_limits: .name}]'''
  doc_links: '

    - [Kubernetes Documentation - Get a single pod](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubernetes Documentation - Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes Documentation - Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Documentation - Resource Requirements and Limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq Manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command is used to retrieve information about running pods in
    a Kubernetes cluster, specifically targeting pods in a specific namespace with
    certain labels and filtering for those without resource limits set. The output
    is then formatted as JSON using the jq tool.
  multi_line_details: "\n# Get the list of pods in a Kubernetes cluster\nkubectl get\
    \ pods \\\n  # Use specified context for the command\n  --context=${CONTEXT} \\\
    \n  # Specify the namespace where the pods are located\n  -n ${NAMESPACE} \\\n\
    \  # Filter pods by specific labels\n  ${LABELS} \\\n  # Select only pods that\
    \ are in the \"Running\" status\n  --field-selector=status.phase=Running \\\n\
    \  # Output the result in JSON format\n  -ojson | jq -r '[.items[] as $pod |\n\
    \    ($pod.spec.containers // [][])[] |\n      select(.resources.limits == null)\
    \ |\n        {pod: $pod.metadata.name, container_without_limits: .name}]'\n\n\
    This multi-line command provides clear and detailed explanations of each section,\
    \ making it easier to understand and modify for newer or less experienced devops\
    \ engineers. It also includes comments to explain each option used in the `kubectl`\
    \ and `jq` commands."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
  when_is_it_useful: '1. Investigating performance issues in a Kubernetes cluster
    by identifying pods without resource limits set, which could be causing them to
    consume excessive resources and lead to CrashLoopBackoff events.


    2. Troubleshooting application failures or instability by examining running pods
    in a specific namespace with certain labels to identify any patterns or dependencies
    between the affected pods.


    3. Conducting a regular audit of resource allocation in a Kubernetes cluster to
    ensure best practices are being followed and to optimize resource usage.


    4. Monitoring and managing compliance and security requirements by identifying
    pods without resource limits set, which could potentially pose a security risk
    or violate organizational policies.


    5. Performing capacity planning and resource management by analyzing the resource
    limits and usage of pods in a specific namespace to determine if additional resources
    are needed or if existing resources are being underutilized.'
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes official documentation on kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Label Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes resource requests and limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about running pods in a specific
    context and namespace, filtering the results by a specific label and only including
    pods with containers that have no resource requests specified. The output is then
    formatted as JSON using the `jq` tool.
  multi_line_details: "\n# This command retrieves information about running pods in\
    \ a specific context and namespace, filtering them by certain labels.\n\nkubectl\
    \ get pods \n  --context=${CONTEXT} # Specifies the context to be used for the\
    \ command\n  -n ${NAMESPACE}       # Specifies the namespace of the pods to be\
    \ retrieved\n  ${LABELS}             # Any additional label filters for the pods\n\
    \  --field-selector=status.phase=Running # Filters the pods based on their running\
    \ status\n  -ojson                # Outputs the information in JSON format\n\n\
    # The output of the previous command is then piped into jq, which is a lightweight\
    \ and flexible command-line JSON processor.\n| jq -r '[.items[] as $pod | ($pod.spec.containers\
    \ // [][])[] | select(.resources.requests == null) | {pod: $pod.metadata.name,\
    \ container_without_requests: .name}]'\n# The jq command filters the information\
    \ even further, selecting only containers without resource requests and formatting\
    \ the output in a readable JSON format, displaying each pod's name and the name\
    \ of the container without resource requests.\n\nBy breaking down the command\
    \ and including helpful comments, newer or less experienced devops engineers can\
    \ better understand what each part of the command does and how it contributes\
    \ to the overall functionality."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
  when_is_it_useful: '1. Investigating performance issues: If there are performance
    issues in a specific context and namespace, a DevOps or Site Reliability Engineer
    may use this command to retrieve information about running pods and identify potential
    resource request discrepancies causing the problem.


    2. Monitoring resource utilization: The command can be used to monitor resource
    utilization by filtering out pods with containers that have no resource requests
    specified, allowing the engineer to better understand where resources are being
    utilized and potentially optimize resource allocation.


    3. Troubleshooting CrashLoopBackoff events: When faced with Kubernetes CrashLoopBackoff
    events, the engineer may need to gather detailed information about running pods
    to identify any issues with resource requests that could be contributing to the
    recurring crashes.


    4. Identifying non-compliant pods: In an environment where strict resource allocation
    policies are enforced, the command can be used to identify non-compliant pods
    that do not have resource requests specified, helping the engineer to ensure compliance
    with resource allocation guidelines.


    5. Capacity planning: For capacity planning purposes, the engineer may want to
    analyze the resource requests of running pods to determine current resource usage
    patterns and make informed decisions about future resource allocation.'
- command: 'kubectl get pods --context=${CONTEXT} -n ${NAMESPACE} ${LABELS} --field-selector=status.phase=Running
    -ojson | jq -r ''[.items[] as $pod | ($pod.spec.containers // [][])[] | select(.resources.requests
    == null) | {pod: $pod.metadata.name, container_without_requests: .name}]'''
  doc_links: '

    - [Kubernetes official documentation on kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Label Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubernetes resource requests and limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/){:target="_blank"}

    - [jq manual](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about running pods in a specific
    context and namespace, filtering the results by a specific label and only including
    pods with containers that have no resource requests specified. The output is then
    formatted as JSON using the `jq` tool.
  multi_line_details: "\n# This command retrieves information about running pods in\
    \ a specific context and namespace, filtering them by certain labels.\n\nkubectl\
    \ get pods \n  --context=${CONTEXT} # Specifies the context to be used for the\
    \ command\n  -n ${NAMESPACE}       # Specifies the namespace of the pods to be\
    \ retrieved\n  ${LABELS}             # Any additional label filters for the pods\n\
    \  --field-selector=status.phase=Running # Filters the pods based on their running\
    \ status\n  -ojson                # Outputs the information in JSON format\n\n\
    # The output of the previous command is then piped into jq, which is a lightweight\
    \ and flexible command-line JSON processor.\n| jq -r '[.items[] as $pod | ($pod.spec.containers\
    \ // [][])[] | select(.resources.requests == null) | {pod: $pod.metadata.name,\
    \ container_without_requests: .name}]'\n# The jq command filters the information\
    \ even further, selecting only containers without resource requests and formatting\
    \ the output in a readable JSON format, displaying each pod's name and the name\
    \ of the container without resource requests.\n\nBy breaking down the command\
    \ and including helpful comments, newer or less experienced devops engineers can\
    \ better understand what each part of the command does and how it contributes\
    \ to the overall functionality."
  name: show_pods_without_resource_limit_or_resource_requests_set_in_namespace_namespace
  when_is_it_useful: '1. Investigating performance issues: If there are performance
    issues in a specific context and namespace, a DevOps or Site Reliability Engineer
    may use this command to retrieve information about running pods and identify potential
    resource request discrepancies causing the problem.


    2. Monitoring resource utilization: The command can be used to monitor resource
    utilization by filtering out pods with containers that have no resource requests
    specified, allowing the engineer to better understand where resources are being
    utilized and potentially optimize resource allocation.


    3. Troubleshooting CrashLoopBackoff events: When faced with Kubernetes CrashLoopBackoff
    events, the engineer may need to gather detailed information about running pods
    to identify any issues with resource requests that could be contributing to the
    recurring crashes.


    4. Identifying non-compliant pods: In an environment where strict resource allocation
    policies are enforced, the command can be used to identify non-compliant pods
    that do not have resource requests specified, helping the engineer to ensure compliance
    with resource allocation guidelines.


    5. Capacity planning: For capacity planning purposes, the engineer may want to
    analyze the resource requests of running pods to determine current resource usage
    patterns and make informed decisions about future resource allocation.'
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [kubectl top](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-em-top-em-){:target="_blank"}'
  explanation: This command uses kubectl to retrieve a list of running pods in a specific
    namespace and context, then uses the kubectl top command to display CPU and memory
    usage for each pod and its containers.
  multi_line_details: "\n# Set up variables for easy modification\nLABELS=\"app=myapp\"\
    \ # replace with the appropriate label for your pods\nNAMESPACE=\"my-namespace\"\
    \ # replace with the namespace where your pods are located\nCONTEXT=\"my-context\"\
    \ # replace with the appropriate context for your Kubernetes cluster\n\n# Use\
    \ kubectl to get a list of running pods based on specified labels, namespace,\
    \ and context\nrunning_pods=$(kubectl get pods -l $LABELS -n $NAMESPACE --context\
    \ $CONTEXT --field-selector=status.phase=Running -o custom-columns=\":metadata.name\"\
    )\n\n# Iterate through the list of running pods and use kubectl top to display\
    \ resource usage for each pod and its containers\nfor pod in $running_pods; do\n\
    \    kubectl top pod $pod -n $NAMESPACE --context $CONTEXT --containers\ndone\n\
    \nThis multi-line command is broken down into several steps and includes helpful\
    \ comments to explain the purpose of each section. It also provides clear instructions\
    \ for newer or less experienced devops engineers on how to modify the command\
    \ to suit their specific environment."
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
  when_is_it_useful: '1. Monitoring and optimizing resource usage in a Kubernetes
    cluster

    2. Investigating performance issues with specific pods or containers

    3. Identifying potential bottlenecks and optimizing resource allocation

    4. Troubleshooting CrashLoopBackoff events or other container restart issues

    5. Analyzing and understanding the resource consumption patterns of different
    pods and containers to inform scaling decisions'
- command: for pod in $(kubectl get pods ${LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o custom-columns=":metadata.name" --field-selector=status.phase=Running); do
    kubectl top pod $pod -n ${NAMESPACE} --context ${CONTEXT} --containers; done
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [kubectl top](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-em-top-em-){:target="_blank"}'
  explanation: This command uses kubectl to retrieve a list of running pods in a specific
    namespace and context, then uses the kubectl top command to display CPU and memory
    usage for each pod and its containers.
  multi_line_details: "\n# Set up variables for easy modification\nLABELS=\"app=myapp\"\
    \ # replace with the appropriate label for your pods\nNAMESPACE=\"my-namespace\"\
    \ # replace with the namespace where your pods are located\nCONTEXT=\"my-context\"\
    \ # replace with the appropriate context for your Kubernetes cluster\n\n# Use\
    \ kubectl to get a list of running pods based on specified labels, namespace,\
    \ and context\nrunning_pods=$(kubectl get pods -l $LABELS -n $NAMESPACE --context\
    \ $CONTEXT --field-selector=status.phase=Running -o custom-columns=\":metadata.name\"\
    )\n\n# Iterate through the list of running pods and use kubectl top to display\
    \ resource usage for each pod and its containers\nfor pod in $running_pods; do\n\
    \    kubectl top pod $pod -n $NAMESPACE --context $CONTEXT --containers\ndone\n\
    \nThis multi-line command is broken down into several steps and includes helpful\
    \ comments to explain the purpose of each section. It also provides clear instructions\
    \ for newer or less experienced devops engineers on how to modify the command\
    \ to suit their specific environment."
  name: get_pod_resource_utilization_with_top_in_namespace_namespace
  when_is_it_useful: '1. Monitoring and optimizing resource usage in a Kubernetes
    cluster

    2. Investigating performance issues with specific pods or containers

    3. Identifying potential bottlenecks and optimizing resource allocation

    4. Troubleshooting CrashLoopBackoff events or other container restart issues

    5. Analyzing and understanding the resource consumption patterns of different
    pods and containers to inform scaling decisions'
- command: bash 'vpa_recommendations.sh'
  doc_links: '

    - [Kubernetes cluster documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Bash scripting documentation](https://www.gnu.org/software/bash/manual/bash.html){:target="_blank"}

    - [JSON format documentation](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This script is a bash script that fetches VPA (Vertical Pod Autoscaler)
    recommendations from the Kubernetes cluster for a specific namespace and context,
    analyzes the current CPU and Memory requests in the cluster, and generates recommendations
    to adjust pod resources such as CPU and Memory based on the VPA recommendations.
    The final output is provided in JSON format.
  multi_line_details: "\n# Start a bash script\n\n# Initialize recommendations array\n\
    declare -a recommendations\n\n# Function to convert memory to Mi\nconvert_memory_to_mib()\
    \ {\n    local memory=$1\n\n    # Extract the number and unit separately\n   \
    \ local number=${memory//[!0-9]/}\n    local unit=${memory//[0-9]/}\n\n    case\
    \ $unit in\n        Gi)\n            echo $(( number * 1024 ))  # Convert Gi to\
    \ Mi\n            ;;\n        Mi)\n            echo $number  # Already in Mi\n\
    \            ;;\n        Ki)\n            echo $(( number / 1024 ))  # Convert\
    \ Ki to Mi\n            ;;\n        *)\n            echo $(( number / (1024 *\
    \ 1024) ))  # Convert bytes to Mi\n            ;;\n    esac\n}\n\n# Function to\
    \ convert CPU to millicores\nconvert_cpu_to_millicores() {\n    local cpu=$1\n\
    \    if [[ $cpu =~ ^[0-9]+m$ ]]; then\n        echo ${cpu%m}\n    else\n     \
    \   echo $(($cpu * 1000))  # Convert CPU cores to millicores\n    fi\n}\n\n# ...\n\
    # (Remaining script left for comment...)\n"
  name: identify_vpa_pod_resource_recommendations_in_namespace_namespace
  when_is_it_useful: '1. Scaling a Kubernetes application: When a DevOps or SRE needs
    to scale an application in Kubernetes, they may use this script to fetch VPA recommendations
    and adjust pod resources accordingly in order to optimize performance and resource
    utilization.


    2. Performance optimization: If there are performance issues with an application
    running on Kubernetes, the DevOps or SRE might use this script to analyze VPA
    recommendations and make adjustments to pod resources to improve performance.


    3. Resource management: To manage resource allocation within a Kubernetes cluster,
    the script can be used to provide insights into current resource usage and make
    recommendations for adjusting pod resources based on VPA suggestions.


    4. Troubleshooting CrashLoopBackoff events: During troubleshooting of CrashLoopBackoff
    events in Kubernetes, the script can be utilized to analyze VPA recommendations
    and adjust pod resources to resolve the issue and prevent the recurrence of such
    events.


    5. Capacity planning: For capacity planning purposes, the script can be used to
    analyze VPA recommendations and propose adjustments to pod resources in order
    to efficiently utilize the available resources and ensure scalability for future
    workloads.'
- command: Could not render command
  doc_links: '

    - [Managing File and Directory Permissions in Linux](https://linuxize.com/post/linux-file-permissions/){:target="_blank"}'
  explanation: It seems like the command you're trying to run isn't able to be processed
    or executed properly. It could be due to a variety of factors, such as incorrect
    syntax, missing software dependencies, or insufficient permissions.
  multi_line_details: "# This command is used to create a multi-line command with\
    \ helpful comments for newer or less experienced devops engineers\n# First, let's\
    \ start by setting up a variable for the directory path \ndirectory_path=\"/path/to/directory\"\
    \n\n# Next, change into the specified directory using the cd command\ncd $directory_path\n\
    \n# Then, list all the files in the directory using the ls command\nls -l\n\n\
    # Finally, check the disk usage of the files in the directory using the du command\n\
    du -sh *"
  name: identify_resource_constrained_pods_in_namespace_namespace
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or Site Reliability Engineer might be tasked with identifying and resolving the
    root cause of CrashLoopBackoff events in a Kubernetes cluster, which could be
    caused by issues such as misconfigured pod settings, resource constraints, or
    application errors.


    2. Investigating and resolving high CPU or memory usage in a cluster: In this
    scenario, a DevOps or Site Reliability Engineer may need to analyze and address
    performance issues related to high CPU or memory usage within a Kubernetes cluster,
    potentially caused by inefficient resource allocation, poorly optimized applications,
    or excessive load.


    3. Debugging network connectivity problems within a microservices architecture:
    When encountering network connectivity issues between services in a microservices
    architecture deployed on Kubernetes, a DevOps or Site Reliability Engineer might
    need to troubleshoot and resolve issues related to service discovery, load balancing,
    firewall rules, or communication protocols.


    4. Investigating and addressing application failures or errors: If an application
    deployed on Kubernetes is experiencing frequent failures, errors, or unexpected
    behavior, a DevOps or Site Reliability Engineer might be responsible for diagnosing
    and resolving the underlying issues, which could be related to compatibility problems,
    configuration errors, or software bugs.


    5. Managing container orchestration and scaling: As part of their responsibilities,
    a DevOps or Site Reliability Engineer may need to oversee the orchestration and
    scaling of containers within a Kubernetes cluster, ensuring that applications
    are efficiently distributed across nodes, and scaling resources according to demand.
    This could involve tasks such as configuring horizontal pod autoscaling, managing
    replica sets, or optimizing resource utilization.'
