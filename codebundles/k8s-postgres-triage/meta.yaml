commands:
- command: kubectl get all -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [kubectl official documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes resource labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve all resources labeled with ${RESOURCE_LABELS}
    in the specified ${NAMESPACE} and ${CONTEXT}.
  multi_line_details: "```bash\n# Use kubectl to get all resources that match the\
    \ specified label selector \n# in the specified namespace and context\n\n# Set\
    \ the label selector for filtering resources\nRESOURCE_LABELS=\"app=myapp\"\n\n\
    # Set the namespace where the resources are located\nNAMESPACE=\"my-namespace\"\
    \n\n# Set the context to use for this command (e.g. a specific Kubernetes cluster\
    \ or user)\nCONTEXT=\"my-context\"\n\n# Use kubectl to get all resources that\
    \ match the label selector in the specified namespace\n# and context, and display\
    \ verbose information about each resource\nkubectl get all -l ${RESOURCE_LABELS}\
    \ -n ${NAMESPACE} --context ${CONTEXT}\n```"
  name: get_standard_postgres_resource_information
- command: kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath='{.items[*].metadata.name}'
  doc_links: '

    '
  explanation: This command retrieves the custom resource definitions (CRDs) in a
    specific Kubernetes namespace and context, and then outputs only the names of
    those CRDs using the JSONPath format.
  multi_line_details: "```bash\n# Set the namespace where the custom resource definitions\
    \ (CRD) are located\nNAMESPACE=\"your-namespace\"\n\n# Set the context for the\
    \ Kubernetes cluster\nCONTEXT=\"your-context\"\n\n# Use kubectl to get the custom\
    \ resource definitions in the specified namespace and context\nkubectl get crd\
    \ -n ${NAMESPACE} --context ${CONTEXT} \\\n  # Output the results in JSON format,\
    \ using jsonpath to specify the metadata name of each item\n  -o=jsonpath='{.items[*].metadata.name}'\n\
    ```"
  name: describe_postgres_custom_resources
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: "```bash\n# Set the resource labels for filtering pods\nRESOURCE_LABELS=\"\
    app=myapp,env=prod\"\n# Set the namespace where the pods are located\nNAMESPACE=\"\
    my-namespace\"\n# Set the context to specify which Kubernetes cluster to interact\
    \ with\nCONTEXT=\"my-kube-context\"\n\n# Use kubectl command to get information\
    \ about pods\nkubectl get pods \n  # Filter the pods based on specified resource\
    \ labels\n  -l ${RESOURCE_LABELS} \n  # Specify the namespace where the pods are\
    \ located\n  -n ${NAMESPACE} \n  # Specify the context to use for accessing the\
    \ Kubernetes cluster\n  --context ${CONTEXT} \n  # Output only the names of the\
    \ pods that are running\n  -o=name \n  # Filter based on the status of the pods\
    \ to only show running pods\n  --field-selector=status.phase=Running\n```"
  name: get_postgres_pod_logs_events
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: "```bash\n# Set the resource labels for filtering pods\nRESOURCE_LABELS=\"\
    app=myapp,env=prod\"\n# Set the namespace where the pods are located\nNAMESPACE=\"\
    my-namespace\"\n# Set the context to specify which Kubernetes cluster to interact\
    \ with\nCONTEXT=\"my-kube-context\"\n\n# Use kubectl command to get information\
    \ about pods\nkubectl get pods \n  # Filter the pods based on specified resource\
    \ labels\n  -l ${RESOURCE_LABELS} \n  # Specify the namespace where the pods are\
    \ located\n  -n ${NAMESPACE} \n  # Specify the context to use for accessing the\
    \ Kubernetes cluster\n  --context ${CONTEXT} \n  # Output only the names of the\
    \ pods that are running\n  -o=name \n  # Filter based on the status of the pods\
    \ to only show running pods\n  --field-selector=status.phase=Running\n```"
  name: get_postgres_pod_resource_utilization
- command: patronictl list
  doc_links: '

    - [patronictl command reference](https://patroni.readthedocs.io/en/latest/patronictl.html){:target="_blank"}

    - [Understanding PostgreSQL clusters](https://www.postgresql.org/docs/current/creating-cluster.html){:target="_blank"}'
  explanation: The "patronictl list" command is used to display a list of all the
    PostgreSQL clusters managed by Patroni, which is a high availability solution
    for PostgreSQL. It shows the status and information about each cluster.
  multi_line_details: '```bash

    # This command is used to list all the Patroni clusters managed by Patroni.

    # First, we need to list all the available namespaces in the Kubernetes cluster

    kubectl get namespaces


    # Next, we need to find the namespace where Patroni is deployed

    # Replace `<namespace>` with the actual namespace name

    kubectl get pods -n <namespace>


    # Finally, we can list the Patroni clusters using patronictl

    patronictl list

    ```'
  name: get_patroni_output
