commands:
- command: kubectl get all -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '


    * [`kubectl` Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)

    * [`get` Command for `kubectl`](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get)

    * [Resource Labels Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)

    * [Namespace Overview Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)

    * [Context Documentation](https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-access-multiple-clusters/#use-contexts-to-switch-between-clusters)'
  explanation: "\n \nThis command is used to view all of the Kubernetes resources\
    \ in a specific namespace within a specific context. It will \"get\" all of the\
    \ resources that have labels matching the value for \"$RESOURCE_LABELS\" in this\
    \ context and in the given namespace. The Kubernetes context helps specify where\
    \ exactly these resources are located. The namespace allows you to specify which\
    \ group of related resources you want to query."
  multi_line_details: "\n\n# This command runs 'get' action on the Kubernetes api\
    \ to fetch all resources\n# which have labels matching ${RESOURCE_LABELS} in namespace\
    \ ${NAMESPACE}.\n# The --context flag specifies which cluster should be queried.\n\
    \nkubectl \\\n    get \\\n    all \\\n    -l ${RESOURCE_LABELS} \\\n    -n ${NAMESPACE}\
    \ \\\n    --context ${CONTEXT}"
  name: get_standard_postgres_resource_information
- command: kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath='{.items[*].metadata.name}'
  doc_links: '


    - [Kubernetes Documentation: kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)

    - [Kubernetes Documentation: Command Line Tool Reference](https://kubernetes.io/docs/reference/kubectl/overview/)

    - [Kubernetes Documentation: CustomResourceDefinitions (CRDs)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)

    - [Kubernetes Documentation: Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)

    - [Kubernetes Documentation: Contexts](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#context)

    - [Kubernetes Documentation: Using JSONPath with kubectl](https://kubernetes.io/docs/reference/kubectl/jsonpath/)'
  explanation: '


    This command is used to get the list of Custom Resource Definitions (CRDs) from
    a Kubernetes cluster. Specifically, it retrieves the names of CRDs in the specified
    ''namespace'' and ''context''. Kubernetes allows users to define custom resource
    objects, or CRDs, that map to real-world objects within their organization or
    environment. By retrieving a list of CRDs, an engineer can inspect what resources
    are available in the cluster.'
  multi_line_details: "\n\n#This command will output a list of the Custom Resource\
    \ Definitions (CRD) in a given namespace for the given context. \n#The context\
    \ argument sets a user with preconfigured access rights and Kubernetes cluster\
    \ configuration. \n#The namespace argument sets the scope of resources that are\
    \ returned from the kubectl command.\n\n#Begin multi-line command:\nNAMESPACE=\"\
    my-namespace\"   #set the desired namespace\nCONTEXT=\"my-context\"       #set\
    \ the desired context\n\n#Use kubectl to get the Custom Resource Definition in\
    \ specified namespace for specified context\nkubectl get \\\n    crd \\\n    -n\
    \ ${NAMESPACE} \\\n    --context ${CONTEXT} \\\n    -o=jsonpath='{.items[*].metadata.name}'\
    \    #output CRDs as list of names"
  name: describe_postgres_custom_resources
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: "\n\n- [Kubernetes Documentation on \"Getting Started with Kubernetes\"\
    ](https://kubernetes.io/docs/tutorials/kubernetes-basics/) \n- [Official Documentation\
    \ on Kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)\n\
    - [Kubernetes Documentation on \"Label Selectors\"](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)\
    \ \n- [Kubernetes Documentation on the \"Namespace Concept\"](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\
    \ \n- [Kubernetes Documentation on the \"Field Selector Concept\"](https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/)"
  explanation: '


    This command is used to list running pods in a Kubernetes cluster. Kubectl is
    the command line tool for controlling Kubernetes clusters, and ''get'' retrieves
    information about the objects in the cluster. ''pods'' means we are retrieving
    information about containers in the cluster. The ''-l'' flag allows you to select
    resources based on labels (i.e., RESOURCE_LABELS). The `-n` flag allows you to
    specify the namespace in which to look for resources. The ''--context'' flag allows
    you to specify the context in which the command is run. This can be used to switch
    between multiple clusters. The -o=name flag provides output as Pod names only.
    Finally, the `--field-selector=status.phase=Running` limits the results to only
    those pods that are in the Running status phase.'
  multi_line_details: "\n\n# With this command we can select and list the running\
    \ pods matching these labels in a particular namespace. \n# This assumes that\
    \ we have created context, RESOURCE_LABELS and NAMESPACE variables before.\nCONTEXT=${CONTEXT}\n\
    RESOURCE_LABELS=${RESOURCE_LABELS}\nNAMESPACE=${NAMESPACE}\n\n# Let's get the\
    \ running pods:\nkubectl get pods \\ \n    -l ${RESOURCE_LABELS} \\ # Here we're\
    \ specifying our resource labels filter\n    -n ${NAMESPACE} \\ # Let's filter\
    \ by the namespace of interest\n    --context ${CONTEXT} \\ # We should also point\
    \ to the right context\n    -o=name \\ # This will let our output be only the\
    \ names of the objects found\n    --field-selector=status.phase=Running # This\
    \ selector only allows running pods"
  name: get_postgres_pod_logs_events
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: "\n\n- [Kubernetes Documentation on \"Getting Started with Kubernetes\"\
    ](https://kubernetes.io/docs/tutorials/kubernetes-basics/) \n- [Official Documentation\
    \ on Kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)\n\
    - [Kubernetes Documentation on \"Label Selectors\"](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)\
    \ \n- [Kubernetes Documentation on the \"Namespace Concept\"](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\
    \ \n- [Kubernetes Documentation on the \"Field Selector Concept\"](https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/)"
  explanation: '


    This command is used to list running pods in a Kubernetes cluster. Kubectl is
    the command line tool for controlling Kubernetes clusters, and ''get'' retrieves
    information about the objects in the cluster. ''pods'' means we are retrieving
    information about containers in the cluster. The ''-l'' flag allows you to select
    resources based on labels (i.e., RESOURCE_LABELS). The `-n` flag allows you to
    specify the namespace in which to look for resources. The ''--context'' flag allows
    you to specify the context in which the command is run. This can be used to switch
    between multiple clusters. The -o=name flag provides output as Pod names only.
    Finally, the `--field-selector=status.phase=Running` limits the results to only
    those pods that are in the Running status phase.'
  multi_line_details: "\n\n# With this command we can select and list the running\
    \ pods matching these labels in a particular namespace. \n# This assumes that\
    \ we have created context, RESOURCE_LABELS and NAMESPACE variables before.\nCONTEXT=${CONTEXT}\n\
    RESOURCE_LABELS=${RESOURCE_LABELS}\nNAMESPACE=${NAMESPACE}\n\n# Let's get the\
    \ running pods:\nkubectl get pods \\ \n    -l ${RESOURCE_LABELS} \\ # Here we're\
    \ specifying our resource labels filter\n    -n ${NAMESPACE} \\ # Let's filter\
    \ by the namespace of interest\n    --context ${CONTEXT} \\ # We should also point\
    \ to the right context\n    -o=name \\ # This will let our output be only the\
    \ names of the objects found\n    --field-selector=status.phase=Running # This\
    \ selector only allows running pods"
  name: get_postgres_pod_resource_utilization
- command: patronictl list
  doc_links: " all\n\n- [patronictl Documentation](https://patroni.readthedocs.io/en/latest/patronictl.html)\n\
    - [How to Install and Configure PostgreSQL with Patroni High Availability System](https://systembelts.com/database/how-to-install-and-configure-postgresql-with-patroni-high-availability-system/)\
    \ \n- [How to Deploy Patroni in Kubernetes Environment - AKS](https://www.symmetricalit.com/deploy-patroni-in-kubernetes-environment-aks/)\
    \ \n- [Patroni Cluster Maintenance and Performance Tuning](https://severalnines.com/blog/patroni-cluster-maintenance-performance-tuning)\
    \  \n- [Overview of Patroni - Automated failover and distributed configuration](https://www.slideshare.net/chzbrgr71/overview-of-patroni-automated-failover-and-distributed-configuration)"
  explanation: '


    This command lists all of the Patroni instances that are currently running on
    your Kubernetes cluster. It provides information such as the name, state, high-availability
    role, age, and so on. This is a useful tool to get an overview of the Patroni
    clusters that are in use and see what nodes are available for operation. This
    command helps make sure that your databases are operating optimally, no databases
    are missing, and that the infrastructure is set up correctly with the necessary
    settings.'
  multi_line_details: ' dc --cluster-name=nebula


    # This command will list all of the Patroni distributed configurations (DC) for
    a Kubernetes cluster.


    # Set the name of the cluster to "nebula"

    CLUSTER_NAME="nebula"


    # Run the patronictl list dc command with the cluster name

    patronictl list dc --cluster-name=$CLUSTER_NAME'
  name: get_patroni_output
