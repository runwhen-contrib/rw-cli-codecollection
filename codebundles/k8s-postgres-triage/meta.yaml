commands:
- command: kubectl get all -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [kubectl official documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes resource labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve all resources labeled with ${RESOURCE_LABELS}
    in the specified ${NAMESPACE} and ${CONTEXT}.
  multi_line_details: '```bash

    # Set the resource labels to filter the resources by

    RESOURCE_LABELS="key=value"


    # Set the namespace to search within

    NAMESPACE="example-namespace"


    # Set the context for the specific Kubernetes cluster

    CONTEXT="example-context"


    # Use kubectl to list all resources with the specified labels in the specified
    namespace and context

    kubectl get all -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}

    ```'
  name: get_standard_postgres_resource_information
- command: kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath='{.items[*].metadata.name}'
  doc_links: '

    '
  explanation: This command retrieves the custom resource definitions (CRDs) in a
    specific Kubernetes namespace and context, and then outputs only the names of
    those CRDs using the JSONPath format.
  multi_line_details: '```bash

    # Set the Kubernetes namespace variable

    NAMESPACE="your_namespace_here"

    # Set the Kubernetes context variable

    CONTEXT="your_context_here"

    # Use kubectl to get custom resource definitions in the specified namespace and
    context, then output the names in JSON format

    kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath=''{.items[*].metadata.name}''

    ```'
  name: describe_postgres_custom_resources
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: '```shell

    # Set the resource labels variable

    RESOURCE_LABELS="app=k8s-app,env=prod"

    # Set the namespace variable

    NAMESPACE="my-namespace"

    # Set the context variable

    CONTEXT="my-context"

    # Use kubectl to get pods with specific resource labels in a specific namespace
    and context,

    # outputting only the names of pods whose status.phase is Running

    kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT} -o=name
    --field-selector=status.phase=Running

    ```'
  name: get_postgres_pod_logs_events
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: '```shell

    # Set the resource labels variable

    RESOURCE_LABELS="app=k8s-app,env=prod"

    # Set the namespace variable

    NAMESPACE="my-namespace"

    # Set the context variable

    CONTEXT="my-context"

    # Use kubectl to get pods with specific resource labels in a specific namespace
    and context,

    # outputting only the names of pods whose status.phase is Running

    kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT} -o=name
    --field-selector=status.phase=Running

    ```'
  name: get_postgres_pod_resource_utilization
- command: patronictl list
  doc_links: '

    - [patronictl command reference](https://patroni.readthedocs.io/en/latest/patronictl.html){:target="_blank"}

    - [Understanding PostgreSQL clusters](https://www.postgresql.org/docs/current/creating-cluster.html){:target="_blank"}'
  explanation: The "patronictl list" command is used to display a list of all the
    PostgreSQL clusters managed by Patroni, which is a high availability solution
    for PostgreSQL. It shows the status and information about each cluster.
  multi_line_details: '```sh

    # Set the command to list all clusters managed by Patroni

    command="patronictl list"

    # Execute the command

    $command

    ```'
  name: get_patroni_output
