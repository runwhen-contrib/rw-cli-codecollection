commands:
- command: kubectl get all -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [kubectl official documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes resource labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve all resources labeled with ${RESOURCE_LABELS}
    in the specified ${NAMESPACE} and ${CONTEXT}.
  multi_line_details: "```bash\n#!/bin/bash\n\n# Description: \n# This script runs\
    \ the kubectl command to get all resources labeled with the specified labels in\
    \ the given namespace and context.\n\n# Set the resource labels, namespace, and\
    \ context\nRESOURCE_LABELS=\"app=example\"\nNAMESPACE=\"my-namespace\"\nCONTEXT=\"\
    my-context\"\n\n# Run the kubectl command to get all resources with the specified\
    \ labels in the specified namespace and context\nkubectl get all -l ${RESOURCE_LABELS}\
    \ -n ${NAMESPACE} --context ${CONTEXT}\n```\nThis multi-line command is also a\
    \ bash script that can be run in a shell environment. It adds comments and docstrings\
    \ for better understanding of the purpose of the script and the individual steps\
    \ within it."
  name: get_standard_postgres_resource_information
- command: kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath='{.items[*].metadata.name}'
  doc_links: '

    '
  explanation: This command retrieves the custom resource definitions (CRDs) in a
    specific Kubernetes namespace and context, and then outputs only the names of
    those CRDs using the JSONPath format.
  multi_line_details: '```bash

    # This command retrieves the names of custom resource definitions (CRDs) in a
    specified namespace using a specific context


    # Assign the namespace to a variable

    NAMESPACE=example-namespace


    # Assign the context to a variable

    CONTEXT=example-context


    # Use kubectl to get all CRDs in a specific namespace and context

    kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath=''{.items[*].metadata.name}''

    ```'
  name: describe_postgres_custom_resources
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: "```bash\n# The following command retrieves pods with specific\
    \ resource labels and running status in a specific namespace using the given context\n\
    \nkubectl get pods \\\n  -l ${RESOURCE_LABELS} \\ # select pods with specified\
    \ resource labels\n  -n ${NAMESPACE} \\       # specify the namespace\n  --context\
    \ ${CONTEXT} \\  # use the specified context\n  -o=name \\               # output\
    \ only the name of the pods\n  --field-selector=status.phase=Running # filter\
    \ pods that are in the running phase\n```"
  name: get_postgres_pod_logs_events
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: "```bash\n# The following command retrieves pods with specific\
    \ resource labels and running status in a specific namespace using the given context\n\
    \nkubectl get pods \\\n  -l ${RESOURCE_LABELS} \\ # select pods with specified\
    \ resource labels\n  -n ${NAMESPACE} \\       # specify the namespace\n  --context\
    \ ${CONTEXT} \\  # use the specified context\n  -o=name \\               # output\
    \ only the name of the pods\n  --field-selector=status.phase=Running # filter\
    \ pods that are in the running phase\n```"
  name: get_postgres_pod_resource_utilization
- command: patronictl list
  doc_links: '

    - [patronictl command reference](https://patroni.readthedocs.io/en/latest/patronictl.html){:target="_blank"}

    - [Understanding PostgreSQL clusters](https://www.postgresql.org/docs/current/creating-cluster.html){:target="_blank"}'
  explanation: The "patronictl list" command is used to display a list of all the
    PostgreSQL clusters managed by Patroni, which is a high availability solution
    for PostgreSQL. It shows the status and information about each cluster.
  multi_line_details: '```python

    # The following command is used to list all clusters managed by Patroni


    # Import the necessary module

    import patronictl


    # List all clusters

    patronictl.list()

    ```'
  name: get_patroni_output
