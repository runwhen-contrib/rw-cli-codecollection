commands:
- command: kubectl get all -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
  doc_links: '

    - [kubectl official documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes resource labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve all resources labeled with ${RESOURCE_LABELS}
    in the specified ${NAMESPACE} and ${CONTEXT}.
  multi_line_details: "#!/bin/bash\n\n# This command retrieves all resources labeled\
    \ with the specified RESOURCE_LABELS in the given NAMESPACE under the specified\
    \ CONTEXT.\n\nkubectl get all \\\n  -l ${RESOURCE_LABELS} \\\n  -n ${NAMESPACE}\
    \ \\\n  --context ${CONTEXT}"
  name: get_standard_postgres_resource_information
- command: kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath='{.items[*].metadata.name}'
  doc_links: '

    '
  explanation: This command retrieves the custom resource definitions (CRDs) in a
    specific Kubernetes namespace and context, and then outputs only the names of
    those CRDs using the JSONPath format.
  multi_line_details: '# Set the Kubernetes namespace and context

    NAMESPACE="example-namespace"

    CONTEXT="example-context"


    # Use kubectl to get the names of custom resource definitions in the specified
    namespace and context

    kubectl get crd -n ${NAMESPACE} --context ${CONTEXT} -o=jsonpath=''{.items[*].metadata.name}'''
  name: describe_postgres_custom_resources
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: "#!/bin/bash\n\n# Query Kubernetes API to get pods with specific\
    \ labels, in a specific namespace and context, with status.phase=Running\nkubectl\
    \ get pods \\\n  -l ${RESOURCE_LABELS} \\\n  -n ${NAMESPACE} \\\n  --context ${CONTEXT}\
    \ \\\n  -o=name \\\n  --field-selector=status.phase=Running"
  name: get_postgres_pod_logs_events
- command: kubectl get pods -l ${RESOURCE_LABELS} -n ${NAMESPACE} --context ${CONTEXT}
    -o=name --field-selector=status.phase=Running
  doc_links: '

    '
  explanation: This command retrieves the names of all running pods in a specific
    namespace and context, based on certain resource labels.
  multi_line_details: "#!/bin/bash\n\n# Query Kubernetes API to get pods with specific\
    \ labels, in a specific namespace and context, with status.phase=Running\nkubectl\
    \ get pods \\\n  -l ${RESOURCE_LABELS} \\\n  -n ${NAMESPACE} \\\n  --context ${CONTEXT}\
    \ \\\n  -o=name \\\n  --field-selector=status.phase=Running"
  name: get_postgres_pod_resource_utilization
- command: patronictl list
  doc_links: '

    - [patronictl command reference](https://patroni.readthedocs.io/en/latest/patronictl.html){:target="_blank"}

    - [Understanding PostgreSQL clusters](https://www.postgresql.org/docs/current/creating-cluster.html){:target="_blank"}'
  explanation: The "patronictl list" command is used to display a list of all the
    PostgreSQL clusters managed by Patroni, which is a high availability solution
    for PostgreSQL. It shows the status and information about each cluster.
  multi_line_details: '# The following command lists all clusters managed by Patroni

    patronictl \

    list'
  name: get_patroni_output
