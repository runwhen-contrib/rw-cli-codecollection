commands:
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(load.*.fail)" || true
  doc_links: '

    '
  explanation: This command is using kubectl to retrieve and display the logs from
    a Kubernetes pod running Prometheus in a specific namespace, and then it's filtering
    the logs for lines that contain "load" followed by "fail" with case-insensitivity.
    If no such lines are found, it returns true.
  multi_line_details: '

    # Set the context and namespace for the kubectl command

    CONTEXT="your_context_name"

    PROM_NAMESPACE="your_prometheus_namespace"


    # Get the name of the pod running prometheus in the specified namespace

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Use the pod name to retrieve the logs for the prometheus container

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs ${PROM_POD_NAME} -c prometheus


    # Filter the logs for any lines containing "load" and "fail", case-insensitively

    grep -iP "(load.*.fail)"


    # If no matching lines are found, the grep command will return a non-zero exit
    code

    # By using the ''|| true'' at the end, we ensure that the overall command does
    not fail even if grep does not find a match

    # This is useful when running the command as part of a larger script or automation
    process

    '
  name: check_for_successful_rule_setup_in_kubernetes_namespace_namespace
  when_is_it_useful: '1. Monitoring and troubleshooting the overall health and performance
    of Kubernetes clusters

    2. Investigating issues with applications or microservices running on Kubernetes
    pods, such as service failures or high resource usage

    3. Identifying and addressing problems with containerized applications, such as
    crashes or network connectivity issues

    4. Analyzing and debugging system and application logs for specific error patterns
    or anomalies

    5. Proactively monitoring and detecting potential security threats or unauthorized
    access within Kubernetes environments'
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(load.*.fail)" || true
  doc_links: '

    '
  explanation: This command is using kubectl to retrieve and display the logs from
    a Kubernetes pod running Prometheus in a specific namespace, and then it's filtering
    the logs for lines that contain "load" followed by "fail" with case-insensitivity.
    If no such lines are found, it returns true.
  multi_line_details: '

    # Set the context and namespace for the kubectl command

    CONTEXT="your_context_name"

    PROM_NAMESPACE="your_prometheus_namespace"


    # Get the name of the pod running prometheus in the specified namespace

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Use the pod name to retrieve the logs for the prometheus container

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs ${PROM_POD_NAME} -c prometheus


    # Filter the logs for any lines containing "load" and "fail", case-insensitively

    grep -iP "(load.*.fail)"


    # If no matching lines are found, the grep command will return a non-zero exit
    code

    # By using the ''|| true'' at the end, we ensure that the overall command does
    not fail even if grep does not find a match

    # This is useful when running the command as part of a larger script or automation
    process

    '
  name: check_for_successful_rule_setup_in_kubernetes_namespace_namespace
  when_is_it_useful: '1. Monitoring and troubleshooting the overall health and performance
    of Kubernetes clusters

    2. Investigating issues with applications or microservices running on Kubernetes
    pods, such as service failures or high resource usage

    3. Identifying and addressing problems with containerized applications, such as
    crashes or network connectivity issues

    4. Analyzing and debugging system and application logs for specific error patterns
    or anomalies

    5. Proactively monitoring and detecting potential security threats or unauthorized
    access within Kubernetes environments'
- command: kubectl get clusterrole/kube-prometheus-stack-operator -ojson
  doc_links: '

    - [Kubernetes kubectl Command Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes ClusterRole API Documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole){:target="_blank"}

    - [Understanding JSON](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command retrieves the details of a specific ClusterRole named
    "kube-prometheus-stack-operator" in JSON format using the Kubernetes command line
    tool (kubectl). It is commonly used to view and manage resources within a Kubernetes
    cluster.
  multi_line_details: '

    # This command is used to retrieve information about the cluster role for the
    kube-prometheus-stack-operator in Kubernetes.


    # kubectl: The command-line tool for interacting with Kubernetes clusters.

    # get: The action to retrieve resources from the cluster.

    # clusterrole/kube-prometheus-stack-operator: The specific cluster role resource
    being targeted.

    # -ojson: The flag to output the result in JSON format.


    kubectl get clusterrole/kube-prometheus-stack-operator -ojson

    '
  name: verify_prometheus_rbac_can_access_servicemonitors_in_namespace_prom_namespace
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or Site Reliability Engineer might use this command to retrieve the details of
    a specific ClusterRole in order to investigate if the role permissions are causing
    the CrashLoopBackoff events.


    2. Managing and auditing access control: This command can be used to view and
    manage the permissions and access controls for different resources within a Kubernetes
    cluster. A DevOps or Site Reliability Engineer might use this command to audit
    and update the permissions of a specific ClusterRole.


    3. Debugging deployment issues: If there are issues with deploying certain resources
    within the Kubernetes cluster, a DevOps or Site Reliability Engineer might use
    this command to retrieve the details of a specific ClusterRole to ensure that
    the necessary permissions are in place for the deployment to succeed.


    4. Monitoring and troubleshooting resource usage: This command can be used to
    retrieve information about the resources allocated and used by a specific ClusterRole
    within the Kubernetes cluster. A DevOps or Site Reliability Engineer might use
    this command to monitor and troubleshoot any resource usage issues related to
    the role.


    5. Performing routine maintenance and upgrades: As part of routine maintenance
    and upgrade tasks, a DevOps or Site Reliability Engineer might use this command
    to review and update the permissions of a specific ClusterRole to ensure compatibility
    and compliance with the latest changes and updates in the Kubernetes cluster.'
- command: kubectl get clusterrole/kube-prometheus-stack-operator -ojson
  doc_links: '

    - [Kubernetes kubectl Command Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes ClusterRole API Documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole){:target="_blank"}

    - [Understanding JSON](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command retrieves the details of a specific ClusterRole named
    "kube-prometheus-stack-operator" in JSON format using the Kubernetes command line
    tool (kubectl). It is commonly used to view and manage resources within a Kubernetes
    cluster.
  multi_line_details: '

    # This command is used to retrieve information about the cluster role for the
    kube-prometheus-stack-operator in Kubernetes.


    # kubectl: The command-line tool for interacting with Kubernetes clusters.

    # get: The action to retrieve resources from the cluster.

    # clusterrole/kube-prometheus-stack-operator: The specific cluster role resource
    being targeted.

    # -ojson: The flag to output the result in JSON format.


    kubectl get clusterrole/kube-prometheus-stack-operator -ojson

    '
  name: verify_prometheus_rbac_can_access_servicemonitors_in_namespace_prom_namespace
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or Site Reliability Engineer might use this command to retrieve the details of
    a specific ClusterRole in order to investigate if the role permissions are causing
    the CrashLoopBackoff events.


    2. Managing and auditing access control: This command can be used to view and
    manage the permissions and access controls for different resources within a Kubernetes
    cluster. A DevOps or Site Reliability Engineer might use this command to audit
    and update the permissions of a specific ClusterRole.


    3. Debugging deployment issues: If there are issues with deploying certain resources
    within the Kubernetes cluster, a DevOps or Site Reliability Engineer might use
    this command to retrieve the details of a specific ClusterRole to ensure that
    the necessary permissions are in place for the deployment to succeed.


    4. Monitoring and troubleshooting resource usage: This command can be used to
    retrieve information about the resources allocated and used by a specific ClusterRole
    within the Kubernetes cluster. A DevOps or Site Reliability Engineer might use
    this command to monitor and troubleshoot any resource usage issues related to
    the role.


    5. Performing routine maintenance and upgrades: As part of routine maintenance
    and upgrade tasks, a DevOps or Site Reliability Engineer might use this command
    to review and update the permissions of a specific ClusterRole to ensure compatibility
    and compliance with the latest changes and updates in the Kubernetes cluster.'
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(scrape.*.error)" || true
  doc_links: '

    '
  explanation: This command retrieves and displays the logs from the Prometheus container
    in the specified Kubernetes context and namespace, and then filters for any lines
    containing "scrape" followed by "error". If no such lines are found, it returns
    a status of true.
  multi_line_details: '

    # Set the context to the specified value

    CURRENT_CONTEXT=${CONTEXT}


    # Set the namespace to the specified value

    NAMESPACE=${PROM_NAMESPACE}


    # Get the name of the Prometheus pod using label selectors and JSONPath

    PROMETHEUS_POD=$(kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} get pods
    -l app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Get the logs of the prometheus container in the Prometheus pod

    # Filtering for lines containing "scrape.*error" and case insensitive

    kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} logs $PROMETHEUS_POD -c prometheus
    | grep -iP "(scrape.*.error)" || true

    '
  name: inspect_prometheus_operator_logs_for_scraping_errors_in_namespace_namespace
  when_is_it_useful: "1. Monitoring the health and performance of the Prometheus container\
    \ in a Kubernetes environment\n2. Troubleshooting issues with data scraping or\
    \ ingestion in a Prometheus instance running in a Kubernetes cluster\n3. Investigating\
    \ errors or anomalies related to Prometheus metrics collection and storage\n4.\
    \ Performing log analysis and troubleshooting for Prometheus containers experiencing\
    \ CrashLoopBackoff events \n5. Verifying the successful retrieval and filtering\
    \ of logs from the Prometheus container for proactive monitoring and alerting\
    \ purposes"
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(scrape.*.error)" || true
  doc_links: '

    '
  explanation: This command retrieves and displays the logs from the Prometheus container
    in the specified Kubernetes context and namespace, and then filters for any lines
    containing "scrape" followed by "error". If no such lines are found, it returns
    a status of true.
  multi_line_details: '

    # Set the context to the specified value

    CURRENT_CONTEXT=${CONTEXT}


    # Set the namespace to the specified value

    NAMESPACE=${PROM_NAMESPACE}


    # Get the name of the Prometheus pod using label selectors and JSONPath

    PROMETHEUS_POD=$(kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} get pods
    -l app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Get the logs of the prometheus container in the Prometheus pod

    # Filtering for lines containing "scrape.*error" and case insensitive

    kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} logs $PROMETHEUS_POD -c prometheus
    | grep -iP "(scrape.*.error)" || true

    '
  name: inspect_prometheus_operator_logs_for_scraping_errors_in_namespace_namespace
  when_is_it_useful: "1. Monitoring the health and performance of the Prometheus container\
    \ in a Kubernetes environment\n2. Troubleshooting issues with data scraping or\
    \ ingestion in a Prometheus instance running in a Kubernetes cluster\n3. Investigating\
    \ errors or anomalies related to Prometheus metrics collection and storage\n4.\
    \ Performing log analysis and troubleshooting for Prometheus containers experiencing\
    \ CrashLoopBackoff events \n5. Verifying the successful retrieval and filtering\
    \ of logs from the Prometheus container for proactive monitoring and alerting\
    \ purposes"
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    --container prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/"
    | awk '{print $2}'
  doc_links: '

    - [kubectl command overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Prometheus documentation](https://prometheus.io/docs/introduction/overview/){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific Kubernetes
    context and namespace, targeting the Prometheus container to check the health
    status of the application at the specified address and port. It retrieves the
    HTTP status code from the response and prints it to the console.
  multi_line_details: '

    # Set the kubectl context and namespace for executing the command

    CONTEXT=my_cluster_context

    PROM_NAMESPACE=my_prometheus_namespace


    # Get the pod name of Prometheus using a label selector and store it in a variable

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command inside the Prometheus container to check its health

    # Use the stored pod name and specify the container name as ''prometheus''

    # Retrieve the response headers from a health check endpoint on port 9090

    # Extract the HTTP status code using grep and awk

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $PROM_POD_NAME --container
    prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/" | awk
    ''{print $2}''

    '
  name: check_prometheus_api_healthy_in_namespace_prom_namespace
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or Site Reliability Engineer might use this command to check the health status
    of the Prometheus container after it experiences CrashLoopBackoff events, in order
    to diagnose and resolve any issues causing the continuous crashing.


    2. Monitoring application health during deployment: During the deployment of a
    new version of an application on Kubernetes, a DevOps or Site Reliability Engineer
    might use this command to continuously monitor the health status of the Prometheus
    container to ensure that the new version is functioning properly.


    3. Investigating intermittent connectivity issues: If there are intermittent connectivity
    issues reported by users accessing the application hosted on Kubernetes, a DevOps
    or Site Reliability Engineer might use this command to check the health status
    of the Prometheus container and investigate if there are any underlying network
    issues affecting the application.


    4. Performance troubleshooting: When performance issues are reported with an application
    running on Kubernetes, a DevOps or Site Reliability Engineer might use this command
    to monitor the health status of the Prometheus container and gather insights into
    potential performance bottlenecks.


    5. Post-incident analysis: After an incident or outage involving the application
    on Kubernetes, a DevOps or Site Reliability Engineer might use this command to
    analyze the health status of the Prometheus container and identify any issues
    that contributed to the incident, in order to prevent similar problems in the
    future.'
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    --container prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/"
    | awk '{print $2}'
  doc_links: '

    - [kubectl command overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Prometheus documentation](https://prometheus.io/docs/introduction/overview/){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific Kubernetes
    context and namespace, targeting the Prometheus container to check the health
    status of the application at the specified address and port. It retrieves the
    HTTP status code from the response and prints it to the console.
  multi_line_details: '

    # Set the kubectl context and namespace for executing the command

    CONTEXT=my_cluster_context

    PROM_NAMESPACE=my_prometheus_namespace


    # Get the pod name of Prometheus using a label selector and store it in a variable

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command inside the Prometheus container to check its health

    # Use the stored pod name and specify the container name as ''prometheus''

    # Retrieve the response headers from a health check endpoint on port 9090

    # Extract the HTTP status code using grep and awk

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $PROM_POD_NAME --container
    prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/" | awk
    ''{print $2}''

    '
  name: check_prometheus_api_healthy_in_namespace_prom_namespace
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or Site Reliability Engineer might use this command to check the health status
    of the Prometheus container after it experiences CrashLoopBackoff events, in order
    to diagnose and resolve any issues causing the continuous crashing.


    2. Monitoring application health during deployment: During the deployment of a
    new version of an application on Kubernetes, a DevOps or Site Reliability Engineer
    might use this command to continuously monitor the health status of the Prometheus
    container to ensure that the new version is functioning properly.


    3. Investigating intermittent connectivity issues: If there are intermittent connectivity
    issues reported by users accessing the application hosted on Kubernetes, a DevOps
    or Site Reliability Engineer might use this command to check the health status
    of the Prometheus container and investigate if there are any underlying network
    issues affecting the application.


    4. Performance troubleshooting: When performance issues are reported with an application
    running on Kubernetes, a DevOps or Site Reliability Engineer might use this command
    to monitor the health status of the Prometheus container and gather insights into
    potential performance bottlenecks.


    5. Post-incident analysis: After an incident or outage involving the application
    on Kubernetes, a DevOps or Site Reliability Engineer might use this command to
    analyze the health status of the Prometheus container and identify any issues
    that contributed to the incident, in order to prevent similar problems in the
    future.'
