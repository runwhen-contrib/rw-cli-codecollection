commands:
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(load.*.fail)" || true
  doc_links: '

    - [Retrieving logs from a specific pod in Kubernetes](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [Searching for specific lines in logs](https://www.loggly.com/ultimate-guide/searching-kubernetes-logs/){:target="_blank"}

    - [Understanding exit status codes](https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html){:target="_blank"}'
  explanation: This command retrieves the logs from a specific pod running in a Kubernetes
    cluster and searches for any lines containing the phrase "load failure", ignoring
    case. If no matches are found, it returns a status of true.
  multi_line_details: '# Assign the context and namespace to variables for easier
    readability

    CONTEXT=my-context

    PROM_NAMESPACE=my-prom-namespace


    # Get the pod name of the Prometheus application using label selector and store
    it in a variable

    PROM_POD=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus
    -o=jsonpath=''{.items[0].metadata.name}'')


    # Use kubectl logs command to retrieve logs from the specified pod and container,
    then filter them using grep for any lines containing "load" and "fail"

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $PROM_POD -c prometheus
    | grep -iP "(load.*.fail)" || true'
  name: check_for_successful_rule_setup
- command: kubectl get clusterrole/kube-prometheus-stack-operator -ojson
  doc_links: '

    - [kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Cluster Role Binding Documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/){:target="_blank"}

    - [JSON Format in kubectl Output](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about the cluster
    role named kube-prometheus-stack-operator in JSON format. It's a way to inspect
    the permissions and access control settings for this specific role in a Kubernetes
    cluster.
  multi_line_details: '# This is a command to get the clusterrole "kube-prometheus-stack-operator"
    in JSON format using kubectl


    # First, use the ''kubectl get'' command to retrieve information about the specified
    resource

    # Use the resource type ''clusterrole'' followed by the specific name ''kube-prometheus-stack-operator''

    # Use the output flag ''-o'' to specify the desired format, in this case ''json''


    kubectl get clusterrole/kube-prometheus-stack-operator -o json'
  name: verify_prometheus_rbac_can_access_servicemonitors
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(scrape.*.error)" || true
  doc_links: '

    - [Retrieving logs from a specific Kubernetes pod](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Using grep to search for a phrase in logs](https://www.gnu.org/software/grep/manual/grep.html){:target="_blank"}

    - [Ignoring case when using grep](https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/){:target="_blank"}'
  explanation: This command retrieves the logs from a specific Prometheus pod in a
    Kubernetes cluster, and then uses grep to search for any lines containing the
    phrase "scrape error," ignoring case. If no errors are found, the command returns
    a status of "true."
  multi_line_details: "# Set the kubectl context to the specified value\n# Set the\
    \ namespace variable to the given PROM_NAMESPACE\n# Get the logs for the Prometheus\
    \ pod by selecting the first item from the pods with the label app.kubernetes.io/name=prometheus\n\
    # Then specify the container name as prometheus\n# Pipe the logs to a grep command\
    \ to search for any lines containing \"scrape.*.error\" case insensitively\n#\
    \ If no matching lines are found, return a true statement\n\nkubectl --context=${CONTEXT}\
    \ \\\n  -n ${PROM_NAMESPACE} \\\n  logs $(kubectl --context=${CONTEXT} \\\n  -n\
    \ ${PROM_NAMESPACE} \\\n  get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')\
    \ \\\n  -c prometheus | grep -iP \"(scrape.*.error)\" || true"
  name: identify_endpoint_scraping_errors
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    --container prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/"
    | awk '{print $2}'
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Prometheus](https://prometheus.io/docs/introduction/overview/){:target="_blank"}

    - [wget command](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a command within a specific Kubernetes
    context and namespace, specifically targeting the Prometheus pod. It then uses
    wget to check the health status of the local Prometheus server and outputs the
    HTTP status code.
  multi_line_details: "# First, we need to use kubectl to execute a command in a pod\n\
    # We specify the context using --context=${CONTEXT} and namespace using -n ${PROM_NAMESPACE}\n\
    # We use kubectl get pods to find the pod with label app.kubernetes.io/name=prometheus\n\
    # Then we use jsonpath to extract the name of the pod and pass it to the exec\
    \ command\n# We want to execute the command in the container named prometheus\
    \ inside that pod\n# The command itself is using wget to make a request to 127.0.0.1:9090/-/healthy\
    \ \n# We then use grep and awk to extract the HTTP status code from the output\n\
    \nkubectl --context=${CONTEXT} \\\n  -n ${PROM_NAMESPACE} \\\n  exec $(kubectl\
    \ --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus\
    \ -o=jsonpath='{.items[0].metadata.name}') \\\n  --container prometheus \\\n \
    \ -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep \"HTTP/\" | awk '{print\
    \ $2}'"
  name: check_prometheus_api_healthy
