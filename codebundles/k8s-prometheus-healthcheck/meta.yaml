commands:
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(load.*.fail)" || true
  doc_links: '

    '
  explanation: This command is using kubectl to retrieve and display the logs from
    a Kubernetes pod running Prometheus in a specific namespace, and then it's filtering
    the logs for lines that contain "load" followed by "fail" with case-insensitivity.
    If no such lines are found, it returns true.
  multi_line_details: '

    # Set the context and namespace for the kubectl command

    CONTEXT="your_context_name"

    PROM_NAMESPACE="your_prometheus_namespace"


    # Get the name of the pod running prometheus in the specified namespace

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Use the pod name to retrieve the logs for the prometheus container

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs ${PROM_POD_NAME} -c prometheus


    # Filter the logs for any lines containing "load" and "fail", case-insensitively

    grep -iP "(load.*.fail)"


    # If no matching lines are found, the grep command will return a non-zero exit
    code

    # By using the ''|| true'' at the end, we ensure that the overall command does
    not fail even if grep does not find a match

    # This is useful when running the command as part of a larger script or automation
    process

    '
  name: check_for_successful_rule_setup
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(load.*.fail)" || true
  doc_links: '

    '
  explanation: This command is using kubectl to retrieve and display the logs from
    a Kubernetes pod running Prometheus in a specific namespace, and then it's filtering
    the logs for lines that contain "load" followed by "fail" with case-insensitivity.
    If no such lines are found, it returns true.
  multi_line_details: '

    # Set the context and namespace for the kubectl command

    CONTEXT="your_context_name"

    PROM_NAMESPACE="your_prometheus_namespace"


    # Get the name of the pod running prometheus in the specified namespace

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Use the pod name to retrieve the logs for the prometheus container

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs ${PROM_POD_NAME} -c prometheus


    # Filter the logs for any lines containing "load" and "fail", case-insensitively

    grep -iP "(load.*.fail)"


    # If no matching lines are found, the grep command will return a non-zero exit
    code

    # By using the ''|| true'' at the end, we ensure that the overall command does
    not fail even if grep does not find a match

    # This is useful when running the command as part of a larger script or automation
    process

    '
  name: check_for_successful_rule_setup
- command: kubectl get clusterrole/kube-prometheus-stack-operator -ojson
  doc_links: '

    - [Kubernetes kubectl Command Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes ClusterRole API Documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole){:target="_blank"}

    - [Understanding JSON](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command retrieves the details of a specific ClusterRole named
    "kube-prometheus-stack-operator" in JSON format using the Kubernetes command line
    tool (kubectl). It is commonly used to view and manage resources within a Kubernetes
    cluster.
  multi_line_details: '

    # This command is used to retrieve information about the cluster role for the
    kube-prometheus-stack-operator in Kubernetes.


    # kubectl: The command-line tool for interacting with Kubernetes clusters.

    # get: The action to retrieve resources from the cluster.

    # clusterrole/kube-prometheus-stack-operator: The specific cluster role resource
    being targeted.

    # -ojson: The flag to output the result in JSON format.


    kubectl get clusterrole/kube-prometheus-stack-operator -ojson

    '
  name: verify_prometheus_rbac_can_access_servicemonitors
- command: kubectl get clusterrole/kube-prometheus-stack-operator -ojson
  doc_links: '

    - [Kubernetes kubectl Command Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes ClusterRole API Documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole){:target="_blank"}

    - [Understanding JSON](https://www.json.org/json-en.html){:target="_blank"}'
  explanation: This command retrieves the details of a specific ClusterRole named
    "kube-prometheus-stack-operator" in JSON format using the Kubernetes command line
    tool (kubectl). It is commonly used to view and manage resources within a Kubernetes
    cluster.
  multi_line_details: '

    # This command is used to retrieve information about the cluster role for the
    kube-prometheus-stack-operator in Kubernetes.


    # kubectl: The command-line tool for interacting with Kubernetes clusters.

    # get: The action to retrieve resources from the cluster.

    # clusterrole/kube-prometheus-stack-operator: The specific cluster role resource
    being targeted.

    # -ojson: The flag to output the result in JSON format.


    kubectl get clusterrole/kube-prometheus-stack-operator -ojson

    '
  name: verify_prometheus_rbac_can_access_servicemonitors
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(scrape.*.error)" || true
  doc_links: '

    '
  explanation: This command retrieves and displays the logs from the Prometheus container
    in the specified Kubernetes context and namespace, and then filters for any lines
    containing "scrape" followed by "error". If no such lines are found, it returns
    a status of true.
  multi_line_details: '

    # Set the context to the specified value

    CURRENT_CONTEXT=${CONTEXT}


    # Set the namespace to the specified value

    NAMESPACE=${PROM_NAMESPACE}


    # Get the name of the Prometheus pod using label selectors and JSONPath

    PROMETHEUS_POD=$(kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} get pods
    -l app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Get the logs of the prometheus container in the Prometheus pod

    # Filtering for lines containing "scrape.*error" and case insensitive

    kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} logs $PROMETHEUS_POD -c prometheus
    | grep -iP "(scrape.*.error)" || true

    '
  name: identify_endpoint_scraping_errors
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(scrape.*.error)" || true
  doc_links: '

    '
  explanation: This command retrieves and displays the logs from the Prometheus container
    in the specified Kubernetes context and namespace, and then filters for any lines
    containing "scrape" followed by "error". If no such lines are found, it returns
    a status of true.
  multi_line_details: '

    # Set the context to the specified value

    CURRENT_CONTEXT=${CONTEXT}


    # Set the namespace to the specified value

    NAMESPACE=${PROM_NAMESPACE}


    # Get the name of the Prometheus pod using label selectors and JSONPath

    PROMETHEUS_POD=$(kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} get pods
    -l app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Get the logs of the prometheus container in the Prometheus pod

    # Filtering for lines containing "scrape.*error" and case insensitive

    kubectl --context=${CURRENT_CONTEXT} -n ${NAMESPACE} logs $PROMETHEUS_POD -c prometheus
    | grep -iP "(scrape.*.error)" || true

    '
  name: identify_endpoint_scraping_errors
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    --container prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/"
    | awk '{print $2}'
  doc_links: '

    - [kubectl command overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Prometheus documentation](https://prometheus.io/docs/introduction/overview/){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific Kubernetes
    context and namespace, targeting the Prometheus container to check the health
    status of the application at the specified address and port. It retrieves the
    HTTP status code from the response and prints it to the console.
  multi_line_details: '

    # Set the kubectl context and namespace for executing the command

    CONTEXT=my_cluster_context

    PROM_NAMESPACE=my_prometheus_namespace


    # Get the pod name of Prometheus using a label selector and store it in a variable

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command inside the Prometheus container to check its health

    # Use the stored pod name and specify the container name as ''prometheus''

    # Retrieve the response headers from a health check endpoint on port 9090

    # Extract the HTTP status code using grep and awk

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $PROM_POD_NAME --container
    prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/" | awk
    ''{print $2}''

    '
  name: check_prometheus_api_healthy
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    --container prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/"
    | awk '{print $2}'
  doc_links: '

    - [kubectl command overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Prometheus documentation](https://prometheus.io/docs/introduction/overview/){:target="_blank"}'
  explanation: This command uses kubectl to execute a command in a specific Kubernetes
    context and namespace, targeting the Prometheus container to check the health
    status of the application at the specified address and port. It retrieves the
    HTTP status code from the response and prints it to the console.
  multi_line_details: '

    # Set the kubectl context and namespace for executing the command

    CONTEXT=my_cluster_context

    PROM_NAMESPACE=my_prometheus_namespace


    # Get the pod name of Prometheus using a label selector and store it in a variable

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute a command inside the Prometheus container to check its health

    # Use the stored pod name and specify the container name as ''prometheus''

    # Retrieve the response headers from a health check endpoint on port 9090

    # Extract the HTTP status code using grep and awk

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $PROM_POD_NAME --container
    prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/" | awk
    ''{print $2}''

    '
  name: check_prometheus_api_healthy
