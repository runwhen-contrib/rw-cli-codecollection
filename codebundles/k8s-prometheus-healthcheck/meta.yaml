commands:
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(load.*.fail)" || true
  doc_links: '

    - [Retrieving logs from a specific pod in Kubernetes](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [Searching for specific lines in logs](https://www.loggly.com/ultimate-guide/searching-kubernetes-logs/){:target="_blank"}

    - [Understanding exit status codes](https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html){:target="_blank"}'
  explanation: This command retrieves the logs from a specific pod running in a Kubernetes
    cluster and searches for any lines containing the phrase "load failure", ignoring
    case. If no matches are found, it returns a status of true.
  multi_line_details: '```shell

    # Set the context for kubectl command

    CONTEXT=${CONTEXT}

    # Set the namespace for Prometheus

    PROM_NAMESPACE=${PROM_NAMESPACE}


    # Get the name of the pod running Prometheus in the specified namespace

    PROM_POD_NAME=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods -l
    app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Use the pod name to retrieve the logs of the prometheus container and filter
    for lines containing "load" and "fail". If no matching lines are found, the command
    still returns a success status code.

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs ${PROM_POD_NAME} -c prometheus
    | grep -iP "(load.*.fail)" || true

    ```'
  name: check_for_successful_rule_setup
- command: kubectl get clusterrole/kube-prometheus-stack-operator -ojson
  doc_links: '

    - [kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Cluster Role Binding Documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/){:target="_blank"}

    - [JSON Format in kubectl Output](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about the cluster
    role named kube-prometheus-stack-operator in JSON format. It's a way to inspect
    the permissions and access control settings for this specific role in a Kubernetes
    cluster.
  multi_line_details: '```bash

    # Store the output of ''kubectl get'' command for the resource ''clusterrole/kube-prometheus-stack-operator''
    in JSON format into a variable

    result=$(kubectl get clusterrole/kube-prometheus-stack-operator -o json)


    # Print the result

    echo $result

    ```'
  name: verify_prometheus_rbac_can_access_servicemonitors
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} logs $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    -c prometheus | grep -iP "(scrape.*.error)" || true
  doc_links: '

    - [Retrieving logs from a specific Kubernetes pod](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Using grep to search for a phrase in logs](https://www.gnu.org/software/grep/manual/grep.html){:target="_blank"}

    - [Ignoring case when using grep](https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/){:target="_blank"}'
  explanation: This command retrieves the logs from a specific Prometheus pod in a
    Kubernetes cluster, and then uses grep to search for any lines containing the
    phrase "scrape error," ignoring case. If no errors are found, the command returns
    a status of "true."
  multi_line_details: "```bash\n# Set the kubectl context to the value of the CONTEXT\
    \ variable and\n# limit operations to the PROM_NAMESPACE namespace;\nkubectl --context=${CONTEXT}\
    \ -n ${PROM_NAMESPACE} logs \n    # Get the logs from the Prometheus pod in the\
    \ PROM_NAMESPACE namespace;\n    $(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE}\
    \ get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')\
    \ \n    # Limit for specific container named prometheus;\n    -c prometheus \n\
    \    # Filter for lines containing \"scrape\" followed by any characters and \"\
    error\" in a case insensitive manner;\n    | grep -iP \"(scrape.*.error)\" \n\
    \    # Suppress errors if no match is found;\n    || true\n```"
  name: identify_endpoint_scraping_errors
- command: kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $(kubectl --context=${CONTEXT}
    -n ${PROM_NAMESPACE} get pods -l app.kubernetes.io/name=prometheus -o=jsonpath='{.items[0].metadata.name}')
    --container prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/"
    | awk '{print $2}'
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Prometheus](https://prometheus.io/docs/introduction/overview/){:target="_blank"}

    - [wget command](https://www.gnu.org/software/wget/manual/wget.html){:target="_blank"}'
  explanation: This command uses kubectl to execute a command within a specific Kubernetes
    context and namespace, specifically targeting the Prometheus pod. It then uses
    wget to check the health status of the local Prometheus server and outputs the
    HTTP status code.
  multi_line_details: '```bash

    # Store the name of the Prometheus pod in a variable

    prometheus_pod_name=$(kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} get pods
    -l app.kubernetes.io/name=prometheus -o=jsonpath=''{.items[0].metadata.name}'')


    # Execute the command inside the Prometheus pod to check its health

    kubectl --context=${CONTEXT} -n ${PROM_NAMESPACE} exec $prometheus_pod_name --container
    prometheus -- wget -qO- -S 127.0.0.1:9090/-/healthy 2>&1 | grep "HTTP/" | awk
    ''{print $2}''

    ```'
  name: check_prometheus_api_healthy
