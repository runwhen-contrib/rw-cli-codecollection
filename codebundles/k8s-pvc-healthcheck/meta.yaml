commands:
- command: 'for pvc in $(kubectl get pvc -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r ''.items[] | select(.status.phase != "Bound") | .metadata.name''); do
    kubectl get events -n ${NAMESPACE} --context ${CONTEXT} --field-selector involvedObject.name=$pvc
    -o json | jq ''.items[]| "Last Timestamp: " + .lastTimestamp + ", Name: " + .involvedObject.name
    + ", Message: " + .message''; done'
  doc_links: '

    '
  explanation: This command uses kubectl to check for any unbound PersistentVolumeClaims
    (PVC) in a specific namespace and context, and then retrieves events for each
    unbound PVC, including the last timestamp, name, and message associated with each
    event.
  multi_line_details: "# Iterate over each PVC in the specified namespace and context\n\
    for pvc in $(kubectl get pvc -n ${NAMESPACE} --context ${CONTEXT} -o json | jq\
    \ -r '.items[] | select(.status.phase != \"Bound\") | .metadata.name'); do \n\
    \  # Get events related to the current PVC\n  kubectl get events -n ${NAMESPACE}\
    \ --context ${CONTEXT} --field-selector involvedObject.name=$pvc -o json | \n\
    \  # Extract relevant information and format it\n  jq '.items[]| \"Last Timestamp:\
    \ \" + .lastTimestamp + \", Name: \" + .involvedObject.name + \", Message: \"\
    \ + .message'; \ndone"
  name: fetch_events_for_unhealthy_kubernetes_persistentvolumeclaims_in_namespace_namespace
- command: 'for pvc in $(kubectl get pvc -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r ''.items[] | select(.status.phase != "Bound") | .metadata.name''); do
    kubectl get events -n ${NAMESPACE} --context ${CONTEXT} --field-selector involvedObject.name=$pvc
    -o json | jq ''.items[]| "Last Timestamp: " + .lastTimestamp + ", Name: " + .involvedObject.name
    + ", Message: " + .message''; done'
  doc_links: '

    '
  explanation: This command uses kubectl to check for any unbound PersistentVolumeClaims
    (PVC) in a specific namespace and context, and then retrieves events for each
    unbound PVC, including the last timestamp, name, and message associated with each
    event.
  multi_line_details: "# Iterate over each PVC in the specified namespace and context\n\
    for pvc in $(kubectl get pvc -n ${NAMESPACE} --context ${CONTEXT} -o json | jq\
    \ -r '.items[] | select(.status.phase != \"Bound\") | .metadata.name'); do \n\
    \  # Get events related to the current PVC\n  kubectl get events -n ${NAMESPACE}\
    \ --context ${CONTEXT} --field-selector involvedObject.name=$pvc -o json | \n\
    \  # Extract relevant information and format it\n  jq '.items[]| \"Last Timestamp:\
    \ \" + .lastTimestamp + \", Name: \" + .involvedObject.name + \", Message: \"\
    \ + .message'; \ndone"
  name: fetch_events_for_unhealthy_kubernetes_persistentvolumeclaims_in_namespace_namespace
- command: 'namespace=${NAMESPACE}; context=${CONTEXT}; kubectl get pvc -n $namespace
    --context=$context -o json | jq -r ''.items[] | select(.metadata.deletionTimestamp
    != null) | .metadata.name as $name | .metadata.deletionTimestamp as $deletion_time
    | .metadata.finalizers as $finalizers | "\($name) is in Terminating state (Deletion
    started at: \($deletion_time)). Finalizers: \($finalizers)"'''
  doc_links: '

    - [Persistent Volume Claims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}

    - [Kubectl Command Line Tool](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [jq formatting tool](https://stedolan.github.io/jq/){:target="_blank"}'
  explanation: This command uses the Kubernetes command line tool (kubectl) to get
    information about persistent volume claims (pvc) in a specific namespace and context,
    displaying the ones that are in a "Terminating" state along with their deletion
    timestamp and finalizers. It also uses jq to format the output as human-readable
    text.
  multi_line_details: "\n# First, assign the values of NAMESPACE and CONTEXT to variables\n\
    namespace=${NAMESPACE}\ncontext=${CONTEXT}\n\n# Then use kubectl command to get\
    \ the list of PersistentVolumeClaims in the specified namespace and context in\
    \ JSON format\nkubectl get pvc -n $namespace --context=$context -o json |\n\n\
    # Next, use jq to filter the output and select only the items which have a deletionTimestamp\n\
    jq -r '.items[] | \n  select(.metadata.deletionTimestamp != null) | \n\n# For\
    \ each selected item, set the name, deletion time, and finalizers as variables\
    \ and create a custom message\n  .metadata.name as $name | \n  .metadata.deletionTimestamp\
    \ as $deletion_time | \n  .metadata.finalizers as $finalizers | \n  \"\\($name)\
    \ is in Terminating state (Deletion started at: \\($deletion_time)). Finalizers:\
    \ \\($finalizers)\"'\n"
  name: list_persistentvolumeclaims_in_terminating_state_in_namespace_namespace
- command: 'namespace=${NAMESPACE}; context=${CONTEXT}; kubectl get pvc -n $namespace
    --context=$context -o json | jq -r ''.items[] | select(.metadata.deletionTimestamp
    != null) | .metadata.name as $name | .metadata.deletionTimestamp as $deletion_time
    | .metadata.finalizers as $finalizers | "\($name) is in Terminating state (Deletion
    started at: \($deletion_time)). Finalizers: \($finalizers)"'''
  doc_links: '

    - [Persistent Volume Claims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}

    - [Kubectl Command Line Tool](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [jq formatting tool](https://stedolan.github.io/jq/){:target="_blank"}'
  explanation: This command uses the Kubernetes command line tool (kubectl) to get
    information about persistent volume claims (pvc) in a specific namespace and context,
    displaying the ones that are in a "Terminating" state along with their deletion
    timestamp and finalizers. It also uses jq to format the output as human-readable
    text.
  multi_line_details: "\n# First, assign the values of NAMESPACE and CONTEXT to variables\n\
    namespace=${NAMESPACE}\ncontext=${CONTEXT}\n\n# Then use kubectl command to get\
    \ the list of PersistentVolumeClaims in the specified namespace and context in\
    \ JSON format\nkubectl get pvc -n $namespace --context=$context -o json |\n\n\
    # Next, use jq to filter the output and select only the items which have a deletionTimestamp\n\
    jq -r '.items[] | \n  select(.metadata.deletionTimestamp != null) | \n\n# For\
    \ each selected item, set the name, deletion time, and finalizers as variables\
    \ and create a custom message\n  .metadata.name as $name | \n  .metadata.deletionTimestamp\
    \ as $deletion_time | \n  .metadata.finalizers as $finalizers | \n  \"\\($name)\
    \ is in Terminating state (Deletion started at: \\($deletion_time)). Finalizers:\
    \ \\($finalizers)\"'\n"
  name: list_persistentvolumeclaims_in_terminating_state_in_namespace_namespace
- command: 'for pv in $(kubectl get pv --context ${CONTEXT} -o json | jq -r ''.items[]
    | select(.status.phase == "Terminating") | .metadata.name''); do kubectl get events
    --all-namespaces --field-selector involvedObject.name=$pv --context ${CONTEXT}
    -o json | jq ''.items[]| "Last Timestamp: " + .lastTimestamp + " Name: " + .involvedObject.name
    + " Message: " + .message''; done'
  doc_links: '

    - [Terminating Persistent Volumes in Kubernetes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}

    - [Kubernetes Cluster Querying](https://kubernetes.io/docs/tasks/debug/debug-cluster/){:target="_blank"}

    - [jq Documentation](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about events associated with terminating
    persistent volumes in a Kubernetes cluster by querying the cluster for relevant
    data and outputting it in a readable format using jq.
  multi_line_details: "\n# Iterate through each Persistent Volume (pv) that is in\
    \ the \"Terminating\" phase\nfor pv in $(kubectl get pv --context ${CONTEXT} -o\
    \ json | jq -r '.items[] | select(.status.phase == \"Terminating\") | .metadata.name');\
    \ do \n    # Use kubectl to get events from all namespaces associated with the\
    \ current pv\n    kubectl get events --all-namespaces --field-selector involvedObject.name=$pv\
    \ --context ${CONTEXT} -o json | \n        # Use jq to format the output into\
    \ a more readable and informative format\n        jq '.items[]| \"Last Timestamp:\
    \ \" + .lastTimestamp + \" Name: \" + .involvedObject.name + \" Message: \" +\
    \ .message'; \n    # End of the loop for each pv\ndone\n"
  name: list_persistentvolumes_in_terminating_state_in_namespace_namespace
- command: 'for pv in $(kubectl get pv --context ${CONTEXT} -o json | jq -r ''.items[]
    | select(.status.phase == "Terminating") | .metadata.name''); do kubectl get events
    --all-namespaces --field-selector involvedObject.name=$pv --context ${CONTEXT}
    -o json | jq ''.items[]| "Last Timestamp: " + .lastTimestamp + " Name: " + .involvedObject.name
    + " Message: " + .message''; done'
  doc_links: '

    - [Terminating Persistent Volumes in Kubernetes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}

    - [Kubernetes Cluster Querying](https://kubernetes.io/docs/tasks/debug/debug-cluster/){:target="_blank"}

    - [jq Documentation](https://stedolan.github.io/jq/manual/){:target="_blank"}'
  explanation: This command retrieves information about events associated with terminating
    persistent volumes in a Kubernetes cluster by querying the cluster for relevant
    data and outputting it in a readable format using jq.
  multi_line_details: "\n# Iterate through each Persistent Volume (pv) that is in\
    \ the \"Terminating\" phase\nfor pv in $(kubectl get pv --context ${CONTEXT} -o\
    \ json | jq -r '.items[] | select(.status.phase == \"Terminating\") | .metadata.name');\
    \ do \n    # Use kubectl to get events from all namespaces associated with the\
    \ current pv\n    kubectl get events --all-namespaces --field-selector involvedObject.name=$pv\
    \ --context ${CONTEXT} -o json | \n        # Use jq to format the output into\
    \ a more readable and informative format\n        jq '.items[]| \"Last Timestamp:\
    \ \" + .lastTimestamp + \" Name: \" + .involvedObject.name + \" Message: \" +\
    \ .message'; \n    # End of the loop for each pv\ndone\n"
  name: list_persistentvolumes_in_terminating_state_in_namespace_namespace
- command: 'for pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running
    --context ${CONTEXT} -o jsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{"\n"}{end}'');
    do pv=$(kubectl get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.spec.volumeName}'')
    && status=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.status.phase}'')
    && node=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.spec.nodeName}'')
    && zone=$(kubectl get nodes $node --context ${CONTEXT} -o jsonpath=''{.metadata.labels.topology\.kubernetes\.io/zone}'')
    && ingressclass=$(kubectl get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{.spec.storageClassName}'') && accessmode=$(kubectl get pvc $pvc -n
    ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.status.accessModes[0]}'') &&
    reclaimpolicy=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.spec.persistentVolumeReclaimPolicy}'')
    && csidriver=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.spec.csi.driver}'')&&
    echo -e "\n------------\nPod: $pod\nPVC: $pvc\nPV: $pv\nStatus: $status\nNode:
    $node\nZone: $zone\nIngressClass: $ingressclass\nAccessModes: $accessmode\nReclaimPolicy:
    $reclaimpolicy\nCSIDriver: $csidriver\n"; done; done'
  doc_links: '

    Documentation links not available'
  explanation: This command uses kubectl to retrieve information about running pods
    in a specific namespace, including details about the persistent volume claims
    (PVC) and their associated storage volumes. It then prints out various attributes
    of each PVC and its related resources, such as status, node location, storage
    class, access mode, reclaim policy, and CSI driver.
  multi_line_details: "\n# Iterate through each running pod in the specified namespace\
    \ and context\nfor pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running\
    \ --context ${CONTEXT} -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"\
    }{end}');\ndo\n  # Iterate through each persistent volume claim associated with\
    \ the current pod\n  for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o jsonpath='{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{\"\
    \\n\"}{end}');\n  do\n    # Retrieve information about the persistent volume associated\
    \ with the current PVC\n    pv=$(kubectl get pvc $pvc -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o jsonpath='{.spec.volumeName}') && \n    status=$(kubectl get pv\
    \ $pv --context ${CONTEXT} -o jsonpath='{.status.phase}') &&\n    node=$(kubectl\
    \ get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{.spec.nodeName}')\
    \ &&\n    zone=$(kubectl get nodes $node --context ${CONTEXT} -o jsonpath='{.metadata.labels.topology\\\
    .kubernetes\\.io/zone}') &&\n    ingressclass=$(kubectl get pvc $pvc -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o jsonpath='{.spec.storageClassName}') &&\n    accessmode=$(kubectl\
    \ get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{.status.accessModes[0]}')\
    \ &&\n    reclaimpolicy=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath='{.spec.persistentVolumeReclaimPolicy}')\
    \ &&\n    csidriver=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath='{.spec.csi.driver}')&&\n\
    \    # Print out the gathered information in a formatted manner\n    echo -e \"\
    \\n------------\\nPod: $pod\\nPVC: $pvc\\nPV: $pv\\nStatus: $status\\nNode: $node\\\
    nZone: $zone\\nIngressClass: $ingressclass\\nAccessModes: $accessmode\\nReclaimPolicy:\
    \ $reclaimpolicy\\nCSIDriver: $csidriver\\n\"; \n  done;\ndone\n \n\nThis script\
    \ retrieves detailed information about all running pods in a specific Kubernetes\
    \ namespace, including details about their associated Persistent Volume Claims\
    \ (PVCs) and Persistent Volumes (PVs). This information can be useful for troubleshooting\
    \ storage-related issues and understanding the storage configuration of running\
    \ pods."
  name: list_pods_with_attached_volumes_and_related_persistentvolume_details_in_namespace_namespace
- command: 'for pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running
    --context ${CONTEXT} -o jsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{"\n"}{end}'');
    do pv=$(kubectl get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.spec.volumeName}'')
    && status=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.status.phase}'')
    && node=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.spec.nodeName}'')
    && zone=$(kubectl get nodes $node --context ${CONTEXT} -o jsonpath=''{.metadata.labels.topology\.kubernetes\.io/zone}'')
    && ingressclass=$(kubectl get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{.spec.storageClassName}'') && accessmode=$(kubectl get pvc $pvc -n
    ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.status.accessModes[0]}'') &&
    reclaimpolicy=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.spec.persistentVolumeReclaimPolicy}'')
    && csidriver=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.spec.csi.driver}'')&&
    echo -e "\n------------\nPod: $pod\nPVC: $pvc\nPV: $pv\nStatus: $status\nNode:
    $node\nZone: $zone\nIngressClass: $ingressclass\nAccessModes: $accessmode\nReclaimPolicy:
    $reclaimpolicy\nCSIDriver: $csidriver\n"; done; done'
  doc_links: '

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Persistent Volume Claims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims){:target="_blank"}

    - [Storage Classes in Kubernetes](https://kubernetes.io/docs/concepts/storage/storage-classes/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about running pods
    in a specific namespace, including details about the persistent volume claims
    (PVC) and their associated storage volumes. It then prints out various attributes
    of each PVC and its related resources, such as status, node location, storage
    class, access mode, reclaim policy, and CSI driver.
  multi_line_details: "\n# Iterate through each running pod in the specified namespace\
    \ and context\nfor pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running\
    \ --context ${CONTEXT} -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"\
    }{end}');\ndo\n  # Iterate through each persistent volume claim associated with\
    \ the current pod\n  for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o jsonpath='{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{\"\
    \\n\"}{end}');\n  do\n    # Retrieve information about the persistent volume associated\
    \ with the current PVC\n    pv=$(kubectl get pvc $pvc -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o jsonpath='{.spec.volumeName}') && \n    status=$(kubectl get pv\
    \ $pv --context ${CONTEXT} -o jsonpath='{.status.phase}') &&\n    node=$(kubectl\
    \ get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{.spec.nodeName}')\
    \ &&\n    zone=$(kubectl get nodes $node --context ${CONTEXT} -o jsonpath='{.metadata.labels.topology\\\
    .kubernetes\\.io/zone}') &&\n    ingressclass=$(kubectl get pvc $pvc -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o jsonpath='{.spec.storageClassName}') &&\n    accessmode=$(kubectl\
    \ get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{.status.accessModes[0]}')\
    \ &&\n    reclaimpolicy=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath='{.spec.persistentVolumeReclaimPolicy}')\
    \ &&\n    csidriver=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath='{.spec.csi.driver}')&&\n\
    \    # Print out the gathered information in a formatted manner\n    echo -e \"\
    \\n------------\\nPod: $pod\\nPVC: $pvc\\nPV: $pv\\nStatus: $status\\nNode: $node\\\
    nZone: $zone\\nIngressClass: $ingressclass\\nAccessModes: $accessmode\\nReclaimPolicy:\
    \ $reclaimpolicy\\nCSIDriver: $csidriver\\n\"; \n  done;\ndone\n \n\nThis script\
    \ retrieves detailed information about all running pods in a specific Kubernetes\
    \ namespace, including details about their associated Persistent Volume Claims\
    \ (PVCs) and Persistent Volumes (PVs). This information can be useful for troubleshooting\
    \ storage-related issues and understanding the storage configuration of running\
    \ pods."
  name: list_pods_with_attached_volumes_and_related_persistentvolume_details_in_namespace_namespace
- command: 'for pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running
    --context ${CONTEXT} -o jsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{"\n"}{end}'');
    do for volumeName in $(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT}
    -o json | jq -r ''.spec.volumes[] | select(has("persistentVolumeClaim")) | .name'');
    do mountPath=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r --arg vol "$volumeName" ''.spec.containers[].volumeMounts[] | select(.name
    == $vol) | .mountPath''); containerName=$(kubectl get pod $pod -n ${NAMESPACE}
    --context ${CONTEXT} -o json | jq -r --arg vol "$volumeName" ''.spec.containers[]
    | select(.volumeMounts[].name == $vol) | .name''); echo -e "\n------------\nPod:
    $pod, PVC: $pvc, volumeName: $volumeName, containerName: $containerName, mountPath:
    $mountPath"; kubectl exec $pod -n ${NAMESPACE} --context ${CONTEXT} -c $containerName
    -- df -h $mountPath; done; done; done;'
  doc_links: '

    - [Kubernetes Documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Understanding Kubernetes Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/){:target="_blank"}

    - [Using Persistent Volumes in Kubernetes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}

    - [Linux Disk Usage (du) Command](https://linux.die.net/man/1/du){:target="_blank"}'
  explanation: This command is a complex series of nested loops that uses the Kubernetes
    command line tool (kubectl) to gather information about running pods in a specific
    namespace and context. It then retrieves information about the persistent volume
    claims, volumes, container names, and mount paths associated with these pods and
    prints the information along with disk usage statistics for each mount path.
  multi_line_details: "\n# Start by iterating through each running pod in the specified\
    \ namespace and context\nfor pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running\
    \ --context ${CONTEXT} -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"\
    }{end}');\ndo \n  # For each pod, iterate through the persistent volume claims\
    \ (PVCs) associated with it\n  for pvc in $(kubectl get pods $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o jsonpath='{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{\"\
    \\n\"}{end}');\n  do \n    # Then, for each PVC, iterate through the volumes to\
    \ find the mount path\n    for volumeName in $(kubectl get pod $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o json | jq -r '.spec.volumes[] | select(has(\"persistentVolumeClaim\"\
    )) | .name');\n    do \n      # Use JSONPath and jq to retrieve the mount path\
    \ and container name for the specific volume\n      mountPath=$(kubectl get pod\
    \ $pod -n ${NAMESPACE} --context ${CONTEXT} -o json | jq -r --arg vol \"$volumeName\"\
    \ '.spec.containers[].volumeMounts[] | select(.name == $vol) | .mountPath');\n\
    \      containerName=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT}\
    \ -o json | jq -r --arg vol \"$volumeName\" '.spec.containers[] | select(.volumeMounts[].name\
    \ == $vol) | .name');\n      \n      # Print out the details of the pod, PVC,\
    \ volume name, container name, and mount path\n     echo -e \"\\n------------\\\
    nPod: $pod, PVC: $pvc, volumeName: $volumeName, containerName: $containerName,\
    \ mountPath: $mountPath\"; \n\n      # Finally, execute a disk usage command within\
    \ the pod to check the storage consumption at that mount path\n      kubectl exec\
    \ $pod -n ${NAMESPACE} --context ${CONTEXT} -c $containerName -- df -h $mountPath;\
    \ \n    done;\n  done;\ndone;\n"
  name: fetch_the_storage_utilization_for_pvc_mounts_in_namespace_namespace
- command: 'for pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running
    --context ${CONTEXT} -o jsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{"\n"}{end}'');
    do for volumeName in $(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT}
    -o json | jq -r ''.spec.volumes[] | select(has("persistentVolumeClaim")) | .name'');
    do mountPath=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r --arg vol "$volumeName" ''.spec.containers[].volumeMounts[] | select(.name
    == $vol) | .mountPath''); containerName=$(kubectl get pod $pod -n ${NAMESPACE}
    --context ${CONTEXT} -o json | jq -r --arg vol "$volumeName" ''.spec.containers[]
    | select(.volumeMounts[].name == $vol) | .name''); echo -e "\n------------\nPod:
    $pod, PVC: $pvc, volumeName: $volumeName, containerName: $containerName, mountPath:
    $mountPath"; kubectl exec $pod -n ${NAMESPACE} --context ${CONTEXT} -c $containerName
    -- df -h $mountPath; done; done; done;'
  doc_links: '

    - [Kubernetes Documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Understanding Kubernetes Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/){:target="_blank"}

    - [Using Persistent Volumes in Kubernetes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}

    - [Linux Disk Usage (du) Command](https://linux.die.net/man/1/du){:target="_blank"}'
  explanation: This command is a complex series of nested loops that uses the Kubernetes
    command line tool (kubectl) to gather information about running pods in a specific
    namespace and context. It then retrieves information about the persistent volume
    claims, volumes, container names, and mount paths associated with these pods and
    prints the information along with disk usage statistics for each mount path.
  multi_line_details: "\n# Start by iterating through each running pod in the specified\
    \ namespace and context\nfor pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running\
    \ --context ${CONTEXT} -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"\
    }{end}');\ndo \n  # For each pod, iterate through the persistent volume claims\
    \ (PVCs) associated with it\n  for pvc in $(kubectl get pods $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o jsonpath='{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{\"\
    \\n\"}{end}');\n  do \n    # Then, for each PVC, iterate through the volumes to\
    \ find the mount path\n    for volumeName in $(kubectl get pod $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o json | jq -r '.spec.volumes[] | select(has(\"persistentVolumeClaim\"\
    )) | .name');\n    do \n      # Use JSONPath and jq to retrieve the mount path\
    \ and container name for the specific volume\n      mountPath=$(kubectl get pod\
    \ $pod -n ${NAMESPACE} --context ${CONTEXT} -o json | jq -r --arg vol \"$volumeName\"\
    \ '.spec.containers[].volumeMounts[] | select(.name == $vol) | .mountPath');\n\
    \      containerName=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT}\
    \ -o json | jq -r --arg vol \"$volumeName\" '.spec.containers[] | select(.volumeMounts[].name\
    \ == $vol) | .name');\n      \n      # Print out the details of the pod, PVC,\
    \ volume name, container name, and mount path\n     echo -e \"\\n------------\\\
    nPod: $pod, PVC: $pvc, volumeName: $volumeName, containerName: $containerName,\
    \ mountPath: $mountPath\"; \n\n      # Finally, execute a disk usage command within\
    \ the pod to check the storage consumption at that mount path\n      kubectl exec\
    \ $pod -n ${NAMESPACE} --context ${CONTEXT} -c $containerName -- df -h $mountPath;\
    \ \n    done;\n  done;\ndone;\n"
  name: fetch_the_storage_utilization_for_pvc_mounts_in_namespace_namespace
- command: 'NAMESPACE="${NAMESPACE}"; CONTEXT="${CONTEXT}"; PODS=$(kubectl get pods
    -n $NAMESPACE --context=$CONTEXT -o json); for pod in $(jq -r ''.items[] | @base64''
    <<< "$PODS"); do _jq() { jq -r \${1} <<< "$(base64 --decode <<< \${pod})"; };
    POD_NAME=$(_jq ''.metadata.name''); POD_NODE_NAME=$(kubectl get pod $POD_NAME
    -n $NAMESPACE --context=$CONTEXT -o custom-columns=:.spec.nodeName --no-headers);
    PVC_NAMES=$(kubectl get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT -o jsonpath=''{.spec.volumes[*].persistentVolumeClaim.claimName}'');
    for pvc_name in $PVC_NAMES; do PVC=$(kubectl get pvc $pvc_name -n $NAMESPACE --context=$CONTEXT
    -o json); ACCESS_MODE=$(jq -r ''.spec.accessModes[0]'' <<< "$PVC"); if [[ "$ACCESS_MODE"
    == "ReadWriteOnce" ]]; then PV_NAME=$(jq -r ''.spec.volumeName'' <<< "$PVC");
    STORAGE_NODE_NAME=$(jq -r --arg pv "$PV_NAME" ''.items[] | select(.status.volumesAttached
    != null) | select(.status.volumesInUse[] | contains($pv)) | .metadata.name'' <<<
    "$(kubectl get nodes --context=$CONTEXT -o json)"); echo "------------"; if [[
    "$POD_NODE_NAME" == "$STORAGE_NODE_NAME" ]]; then echo "OK: Pod and Storage Node
    Matched"; else echo "Error: Pod and Storage Node Mismatched - If the issue persists,
    the node requires attention."; fi; echo "Pod: $POD_NAME"; echo "PVC: $pvc_name";
    echo "PV: $PV_NAME"; echo "Node with Pod: $POD_NODE_NAME"; echo "Node with Storage:
    $STORAGE_NODE_NAME"; echo; fi; done; done'
  doc_links: '

    - [Bash scripting tutorial](https://www.tutorialspoint.com/unix/shell_scripting.htm){:target="_blank"}

    - [Kubectl documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [Understanding Kubernetes Persistent Volume Claims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}'
  explanation: This command is a bash script that uses the kubectl command to retrieve
    information about pods and their associated persistent volume claims and check
    if the storage node matches the pod node. If there is a mismatch, it will display
    an error message.
  multi_line_details: "\n# Set the namespace and context variables\nNAMESPACE=\"${NAMESPACE}\"\
    \nCONTEXT=\"${CONTEXT}\"\n\n# Retrieve pods on the given namespace and context\
    \ in JSON format\nPODS=$(kubectl get pods -n $NAMESPACE --context=$CONTEXT -o\
    \ json)\n\n# Loop through each pod and gather relevant information\nfor pod in\
    \ $(jq -r '.items[] | @base64' <<< \"$PODS\"); do\n    _jq() { jq -r \\${1} <<<\
    \ \"$(base64 --decode <<< \\${pod})\"; }\n    POD_NAME=$(_jq '.metadata.name')\n\
    \    \n    # Get the node where the pod is running\n    POD_NODE_NAME=$(kubectl\
    \ get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT -o custom-columns=:.spec.nodeName\
    \ --no-headers)\n    \n    # Get the PVC names associated with the pod\n    PVC_NAMES=$(kubectl\
    \ get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT -o jsonpath='{.spec.volumes[*].persistentVolumeClaim.claimName}')\n\
    \    \n    # Loop through each PVC name and gather relevant information\n    for\
    \ pvc_name in $PVC_NAMES; do\n        PVC=$(kubectl get pvc $pvc_name -n $NAMESPACE\
    \ --context=$CONTEXT -o json)\n        ACCESS_MODE=$(jq -r '.spec.accessModes[0]'\
    \ <<< \"$PVC\")\n        \n        # Check if the PVC access mode is ReadWriteOnce\n\
    \        if [[ \"$ACCESS_MODE\" == \"ReadWriteOnce\" ]]; then\n            PV_NAME=$(jq\
    \ -r '.spec.volumeName' <<< \"$PVC\")\n            \n            # Get the node\
    \ where the storage belonging to the PVC is attached\n            STORAGE_NODE_NAME=$(jq\
    \ -r --arg pv \"$PV_NAME\" '.items[] | select(.status.volumesAttached != null)\
    \ | select(.status.volumesInUse[] | contains($pv)) | .metadata.name' <<< \"$(kubectl\
    \ get nodes --context=$CONTEXT -o json)\")\n            \n            # Print\
    \ the corresponding information based on the comparison between the pod node and\
    \ storage node\n            echo \"------------\"\n            \n            if\
    \ [[ \"$POD_NODE_NAME\" == \"$STORAGE_NODE_NAME\" ]]; then\n                echo\
    \ \"OK: Pod and Storage Node Matched\"\n            else\n                echo\
    \ \"Error: Pod and Storage Node Mismatched - If the issue persists, the node requires\
    \ attention.\"\n            fi\n            \n            echo \"Pod: $POD_NAME\"\
    \n            echo \"PVC: $pvc_name\"\n            echo \"PV: $PV_NAME\"\n   \
    \         echo \"Node with Pod: $POD_NODE_NAME\"\n            echo \"Node with\
    \ Storage: $STORAGE_NODE_NAME\"\n            echo\n        fi\n    done\ndone\n"
  name: check_for_rwo_persistent_volume_node_attachment_issues_in_namespace_namespace
- command: 'NAMESPACE="${NAMESPACE}"; CONTEXT="${CONTEXT}"; PODS=$(kubectl get pods
    -n $NAMESPACE --context=$CONTEXT -o json); for pod in $(jq -r ''.items[] | @base64''
    <<< "$PODS"); do _jq() { jq -r \${1} <<< "$(base64 --decode <<< \${pod})"; };
    POD_NAME=$(_jq ''.metadata.name''); POD_NODE_NAME=$(kubectl get pod $POD_NAME
    -n $NAMESPACE --context=$CONTEXT -o custom-columns=:.spec.nodeName --no-headers);
    PVC_NAMES=$(kubectl get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT -o jsonpath=''{.spec.volumes[*].persistentVolumeClaim.claimName}'');
    for pvc_name in $PVC_NAMES; do PVC=$(kubectl get pvc $pvc_name -n $NAMESPACE --context=$CONTEXT
    -o json); ACCESS_MODE=$(jq -r ''.spec.accessModes[0]'' <<< "$PVC"); if [[ "$ACCESS_MODE"
    == "ReadWriteOnce" ]]; then PV_NAME=$(jq -r ''.spec.volumeName'' <<< "$PVC");
    STORAGE_NODE_NAME=$(jq -r --arg pv "$PV_NAME" ''.items[] | select(.status.volumesAttached
    != null) | select(.status.volumesInUse[] | contains($pv)) | .metadata.name'' <<<
    "$(kubectl get nodes --context=$CONTEXT -o json)"); echo "------------"; if [[
    "$POD_NODE_NAME" == "$STORAGE_NODE_NAME" ]]; then echo "OK: Pod and Storage Node
    Matched"; else echo "Error: Pod and Storage Node Mismatched - If the issue persists,
    the node requires attention."; fi; echo "Pod: $POD_NAME"; echo "PVC: $pvc_name";
    echo "PV: $PV_NAME"; echo "Node with Pod: $POD_NODE_NAME"; echo "Node with Storage:
    $STORAGE_NODE_NAME"; echo; fi; done; done'
  doc_links: '

    - [Bash scripting tutorial](https://www.tutorialspoint.com/unix/shell_scripting.htm){:target="_blank"}

    - [Kubectl documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [Understanding Kubernetes Persistent Volume Claims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/){:target="_blank"}'
  explanation: This command is a bash script that uses the kubectl command to retrieve
    information about pods and their associated persistent volume claims and check
    if the storage node matches the pod node. If there is a mismatch, it will display
    an error message.
  multi_line_details: "\n# Set the namespace and context variables\nNAMESPACE=\"${NAMESPACE}\"\
    \nCONTEXT=\"${CONTEXT}\"\n\n# Retrieve pods on the given namespace and context\
    \ in JSON format\nPODS=$(kubectl get pods -n $NAMESPACE --context=$CONTEXT -o\
    \ json)\n\n# Loop through each pod and gather relevant information\nfor pod in\
    \ $(jq -r '.items[] | @base64' <<< \"$PODS\"); do\n    _jq() { jq -r \\${1} <<<\
    \ \"$(base64 --decode <<< \\${pod})\"; }\n    POD_NAME=$(_jq '.metadata.name')\n\
    \    \n    # Get the node where the pod is running\n    POD_NODE_NAME=$(kubectl\
    \ get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT -o custom-columns=:.spec.nodeName\
    \ --no-headers)\n    \n    # Get the PVC names associated with the pod\n    PVC_NAMES=$(kubectl\
    \ get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT -o jsonpath='{.spec.volumes[*].persistentVolumeClaim.claimName}')\n\
    \    \n    # Loop through each PVC name and gather relevant information\n    for\
    \ pvc_name in $PVC_NAMES; do\n        PVC=$(kubectl get pvc $pvc_name -n $NAMESPACE\
    \ --context=$CONTEXT -o json)\n        ACCESS_MODE=$(jq -r '.spec.accessModes[0]'\
    \ <<< \"$PVC\")\n        \n        # Check if the PVC access mode is ReadWriteOnce\n\
    \        if [[ \"$ACCESS_MODE\" == \"ReadWriteOnce\" ]]; then\n            PV_NAME=$(jq\
    \ -r '.spec.volumeName' <<< \"$PVC\")\n            \n            # Get the node\
    \ where the storage belonging to the PVC is attached\n            STORAGE_NODE_NAME=$(jq\
    \ -r --arg pv \"$PV_NAME\" '.items[] | select(.status.volumesAttached != null)\
    \ | select(.status.volumesInUse[] | contains($pv)) | .metadata.name' <<< \"$(kubectl\
    \ get nodes --context=$CONTEXT -o json)\")\n            \n            # Print\
    \ the corresponding information based on the comparison between the pod node and\
    \ storage node\n            echo \"------------\"\n            \n            if\
    \ [[ \"$POD_NODE_NAME\" == \"$STORAGE_NODE_NAME\" ]]; then\n                echo\
    \ \"OK: Pod and Storage Node Matched\"\n            else\n                echo\
    \ \"Error: Pod and Storage Node Mismatched - If the issue persists, the node requires\
    \ attention.\"\n            fi\n            \n            echo \"Pod: $POD_NAME\"\
    \n            echo \"PVC: $pvc_name\"\n            echo \"PV: $PV_NAME\"\n   \
    \         echo \"Node with Pod: $POD_NODE_NAME\"\n            echo \"Node with\
    \ Storage: $STORAGE_NODE_NAME\"\n            echo\n        fi\n    done\ndone\n"
  name: check_for_rwo_persistent_volume_node_attachment_issues_in_namespace_namespace
