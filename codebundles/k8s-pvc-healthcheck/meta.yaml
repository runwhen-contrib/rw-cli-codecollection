commands:
- command: 'for pvc in $(kubectl get pvc -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r ''.items[] | select(.status.phase != "Bound") | .metadata.name''); do
    kubectl get events -n ${NAMESPACE} --context ${CONTEXT} --field-selector involvedObject.name=$pvc
    -o json | jq ''.items[]| "Last Timestamp: " + .lastTimestamp + " Name: " + .involvedObject.name
    + " Message: " + .message''; done'
  doc_links: "\n\n- [Kubernetes - Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)\
    \ \n- [Using the kubectl Command Line Interface](https://kubernetes.io/docs/tasks/tools/install-kubectl/#using-the-kubectl-command-line-interface)\
    \ \n- [jq Manual (v1.6)](https://stedolan.github.io/jq/manual/)\n- [Field Selectors\
    \ Kubernetes Documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#field-selectors)"
  explanation: '


    This command is used to get information about any pending Persistent Volume Claims
    (PVCs) in a Kubernetes namespace. It begins by getting all PVCs in the provided
    ${NAMESPACE} using the "$kubectl get" command, but excluding those that have already
    been bound. Then, for each of these PVCs, a new command is run to get events associated
    with them and will output the last timestamp, name and message of each event.'
  multi_line_details: "\n\n# Get all Persistent Volume Claims in the given namespace\
    \ and context, and store them in a variable.\npvcs=$(kubectl get pvc -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o json)\n \n# Use 'jq' to filter out PVCS that aren't\
    \ in the 'Bound' phase\nfor pvc in $(echo $pvcs | jq -r '.items[] | select(.status.phase\
    \ != \"Bound\") | .metadata.name'); do\n \n    # Get events for the current PVC\n\
    \    events=$(kubectl get events -n ${NAMESPACE} --context ${CONTEXT} --field-selector\
    \ involvedObject.name=$pvc -o json)\n \n    # Print the last timestamp, event\
    \ name and message for each event\n    echo $events | jq '.items[]| \"Last Timestamp:\
    \ \" + .lastTimestamp + \" Name: \" + .involvedObject.name + \" Message: \" +\
    \ .message'\n done"
  name: fetch_events_for_unhealthy_kubernetes_persistentvolumeclaims
- command: 'namespace=${NAMESPACE}; context=${CONTEXT}; kubectl get pvc -n $namespace
    --context=$context -o json | jq -r ''.items[] | select(.metadata.deletionTimestamp
    != null) | .metadata.name as $name | .metadata.deletionTimestamp as $deletion_time
    | .metadata.finalizers as $finalizers | "\($name) is in Terminating state (Deletion
    started at: \($deletion_time)). Finalizers: \($finalizers)"'''
  doc_links: '


    - [Kubernetes Documentation: kubectl](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)

    - [JSONPath Basics](http://goessner.net/articles/JsonPath/)

    - [Python json.load() and jq](https://www.programcreek.com/python/example/104578/json.load)

    - [jq Manual](https://stedolan.github.io/jq/manual/)

    - [jq FAQ](https://stedolan.github.io/jq/faq/)'
  explanation: '


    This command is used to get information about Persistent Volume Claims (PVC) in
    the specified Kubernetes namespace, through the specified context. This command
    will output a list of PVCs that are currently in a Terminating state (i.e. they
    have had their deletion process started). The output of the command includes information
    such as the PVC name, the time its deletion process began, and the list of finalizers
    associated with it.'
  multi_line_details: '


    # Store the intended namespace and context variables in easy to use variables.

    NAMESPACE=my-namespace

    CONTEXT=my-context


    # kubectl get pvc

    # Get a list of all Persistent Volume Claims (pvc) from the namespace ''my-namespace'',
    using the context ''my-context''

    kubectl get pvc -n $NAMESPACE --context=$CONTEXT -o json


    # jq command

    # Parse the returned JSON file using the ''jq'' command and filter out any PVCs
    that don''t have a deletion timestamp

    # Also select the name, deletion timestamp and finalizers properties for each
    item

    jq -r ''.items[] | select(.metadata.deletionTimestamp != null) | .metadata.name
    as $name | .metadata.deletionTimestamp as $deletion_time | .metadata.finalizers
    as $finalizers | "\($name) is in Terminating state (Deletion started at: \($deletion_time)).
    Finalizers: \($finalizers)"'''
  name: list_persistentvolumeclaims_in_terminating_state
- command: 'for pv in $(kubectl get pv --context ${CONTEXT} -o json | jq -r ''.items[]
    | select(.status.phase == "Terminating") | .metadata.name''); do kubectl get events
    --all-namespaces --field-selector involvedObject.name=$pv --context ${CONTEXT}
    -o json | jq ''.items[]| "Last Timestamp: " + .lastTimestamp + " Name: " + .involvedObject.name
    + " Message: " + .message''; done'
  doc_links: '


    - [Kubernetes Documentation - Persistent Volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)

    - [Kubernetes Documentation - Events Object](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#events-v1-core)

    - [Kubernetes Documentation - kubectl Overview](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)

    - [jq Documentation](https://stedolan.github.io/jq/)'
  explanation: '


    This command is used to fetch information about Persistent Volumes (PVs) that
    are being terminated in a Kubernetes cluster. It uses the kubectl get pv command,
    which can be used to list all of the available PVs and their statuses in the cluster.
    After that, it then uses jq, which is a command-line JSON processor, to filter
    out and identify only those PVs that have a status of ''Terminating''. Once those
    PVs have been identified, the command then uses the kubectl get events command
    to fetch and display the relevant events related to those PVs, such as the timestamp
    when they were last updated and the message associated with them. The result of
    this command is a display of the PVs that are being terminated in your Kubernetes
    cluster along with useful details about them.'
  multi_line_details: " \n\n# Get a list of Persistent Volumes in the current context\n\
    PV_LIST=$(kubectl get pv --context ${CONTEXT} -o json | jq -r '.items[]') \n\n\
    # Iterate over each PV and check for \"Terminating\" status\nfor pv in $PV_LIST;\
    \ do\n    PV_STATUS=$(echo $pv | jq -r .status.phase)\n    # If status is \"Terminating\"\
    , get events for respective PV\n    if [ \"$PV_STATUS\" = \"Terminating\" ]; then\n\
    \        PV_NAME=$(echo $pv | jq -r .metadata.name)\n        # Get Events related\
    \ to the PV\n        PV_EVENTS=$(kubectl get events --all-namespaces --field-selector\
    \ involvedObject.name=$PV_NAME --context ${CONTEXT} -o json | jq)\n        # Loop\
    \ over each event and output lastTimestamp, name and message\n        for event\
    \ in $\u0420V_EVENTS; do \n            echo $(echo $event | jq '\"Last Timestamp:\
    \ \" + .lastTimestamp + \" Name: \" + .involvedObject.name + \" Message: \" +\
    \ .message')\n        done\n    fi\ndone"
  name: list_persistentvolumes_in_terminating_state
- command: 'for pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running
    --context ${CONTEXT} -o jsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{"\n"}{end}'');
    do pv=$(kubectl get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.spec.volumeName}'')
    && status=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.status.phase}'')
    && node=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.spec.nodeName}'')
    && zone=$(kubectl get nodes $node --context ${CONTEXT} -o jsonpath=''{.metadata.labels.topology\.kubernetes\.io/zone}'')
    && ingressclass=$(kubectl get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{.spec.storageClassName}'') && accessmode=$(kubectl get pvc $pvc -n
    ${NAMESPACE} --context ${CONTEXT} -o jsonpath=''{.status.accessModes[0]}'') &&
    reclaimpolicy=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.spec.persistentVolumeReclaimPolicy}'')
    && csidriver=$(kubectl get pv $pv --context ${CONTEXT} -o jsonpath=''{.spec.csi.driver}'')&&
    echo -e "\n---\nPod: $pod\nPVC: $pvc\nPV: $pv\nStatus: $status\nNode: $node\nZone:
    $zone\nIngressClass: $ingressclass\nAccessModes: $accessmode\nReclaimPolicy: $reclaimpolicy\nCSIDriver:
    $csidriver\n"; done; done'
  doc_links: "\n\n- kubectl Documentation: https://kubernetes.io/docs/reference/generated/kubectl/\n\
    - Kubernetes Tasks with kubectl: https://kubernetes.io/docs/tasks/tools/install-kubectl/#common-kubectl-commands\n\
    - Volumes in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/\n\
    - PersistentVolumes Specification: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#specifications\
    \ \n- Access Modes for PersistentVolumes: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes\n\
    - Reclaim Policies for PersistentVolumes: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaim-policies\n\
    - Topology Aware Volume Provisioning: https://kubernetes.io/docs/concepts/storage/storage-classes/#topology-aware-volume-provisioning\n\
    - Configure Default StorageClass: https://kubernetes.io/docs/tasks/administer-cluster/configure-default-storage-class/\n\
    - CSI Drivers: https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/csi-drivers/"
  explanation: '


    This command is used to display several important metrics about each running pod
    and related persistent volumes in a Kubernetes cluster. It collects information
    such as the name of the pod, associated persistent volume claim (PVC), persistent
    volume (PV) name, PV status, node name, node availability zone, storage class
    name, access mode, reclaim policy, and CSI driver of the PVC. To do this, it utilizes
    several kubectl commands including get pods, get nodes, and get pv and pvc. The
    command also applies the selected context, namespace, and field-selector values
    to ensure just running pods are returned. Once looped through all running pods,
    the output will show a summary of the collected information for each one. '
  multi_line_details: "\n\n# This command gets running pods, persistent volume claims\
    \ and persistent volumes associated with those pods in a given namespace and context.\n\
    # It loops through the list of pods and prints information about each pod, its\
    \ associated PVC and PV.\n\n# Get all the pods in the namespace and context\n\
    for pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running\
    \ --context ${CONTEXT} -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"\
    }{end}'); do \n    # Loop through the pod and get the PVC\n    for pvc in $(kubectl\
    \ get pods $pod -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{\"\
    \\n\"}{end}'); do \n        # Get persistent volume associated with the PVC \n\
    \        pv=$(kubectl get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{.spec.volumeName}')\
    \ \n        \n        # Get status of the persistent volume \n        status=$(kubectl\
    \ get pv $pv --context ${CONTEXT} -o jsonpath='{.status.phase}') \n\n        #\
    \ Get node associated with the pod\n        node=$(kubectl get pod $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} -o jsonpath='{.spec.nodeName}') \n        \n        # Get\
    \ zone associated with the node\n        zone=$(kubectl get nodes $node --context\
    \ ${CONTEXT} -o jsonpath='{.metadata.labels.topology\\.kubernetes\\.io/zone}')\
    \ \n        \n        # Get ingressclass associated with the PVC\n        ingressclass=$(kubectl\
    \ get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{.spec.storageClassName}')\
    \ \n        \n        # Get accessmode associated with the PVC\n        accessmode=$(kubectl\
    \ get pvc $pvc -n ${NAMESPACE} --context ${CONTEXT} -o jsonpath='{.status.accessModes[0]}')\
    \ \n        \n        # Get reclaimpolicy associated with the PV\n        reclaimpolicy=$(kubectl\
    \ get pv $pv --context ${CONTEXT} -o jsonpath='{.spec.persistentVolumeReclaimPolicy}')\
    \ \n        \n        # Get csidriver associated with the PV\n        csidriver=$(kubectl\
    \ get pv $pv --context ${CONTEXT} -o jsonpath='{.spec.csi.driver}')\n      \n\
    \        # Print information about the pod, VC and PV\n        echo -e \"\\n---\\\
    nPod: $pod\\nPVC: $pvc\\nPV: $pv\\nStatus: $status\\nNode: $node\\nZone: $zone\\\
    nIngressClass: $ingressclass\\nAccessModes: $accessmode\\nReclaimPolicy: $reclaimpolicy\\\
    nCSIDriver: $csidriver\\n\"; \n    done;  \ndone"
  name: list_pods_with_attached_volumes_and_related_persistentvolume_details
- command: 'for pod in $(kubectl get pods -n ${NAMESPACE} --field-selector=status.phase=Running
    --context ${CONTEXT} -o jsonpath=''{range .items[*]}{.metadata.name}{"\n"}{end}'');
    do for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context ${CONTEXT} -o
    jsonpath=''{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{"\n"}{end}'');
    do for volumeName in $(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT}
    -o json | jq -r ''.spec.volumes[] | select(has("persistentVolumeClaim")) | .name'');
    do mountPath=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o json
    | jq -r --arg vol "$volumeName" ''.spec.containers[].volumeMounts[] | select(.name
    == $vol) | .mountPath''); containerName=$(kubectl get pod $pod -n ${NAMESPACE}
    --context ${CONTEXT} -o json | jq -r --arg vol "$volumeName" ''.spec.containers[]
    | select(.volumeMounts[].name == $vol) | .name''); echo -e "\n---\nPod: $pod,
    PVC: $pvc, volumeName: $volumeName, containerName: $containerName, mountPath:
    $mountPath"; kubectl exec $pod -n ${NAMESPACE} --context ${CONTEXT} -c $containerName
    -- df -h $mountPath; done; done; done;'
  doc_links: "\n\n* [kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get_pods)\
    \ \n* [kubectl get pods with field selector](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get_all_pods)\n\
    * [JSONPath syntax reference](https://goessner.net/articles/JsonPath/)\n* [jq\
    \ Language Guide (CLI JSON Processor)](https://stedolan.github.io/jq/manual/)\n\
    * [kubectl exec](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec)\
    \ \n* [df (Unix/Linux command)](https://pubs.vmware.com/vsphere-50/index.jsp?topic=%2Fcom.vmware.vcli.ref.doc_50%2Fvcli-right-df.html)"
  explanation: '


    This command looks for all the running pods in a given namespace and context.
    It then looks at each of those pods to find the PersistentVolumeClaims (PVCs)
    that are connected to it. After finding the PVCs, it searches for the VolumeNames
    associated with them. It also finds the mountPath where the VolumeName is mounted
    in its container and the name of the container. Finally, it runs the ''df -h''
    command against the mountPath and outputs the results for each Pod, PVC, Volume
    Name, Container Name and Mount Path.'
  multi_line_details: "\n\n# This command will list the mount paths, mount name and\
    \ container name of every running pod in a given Namespace. It takes several individual\
    \ commands to complete. \n# First, use the `kubectl get` command to generate a\
    \ list of all running pods in the desired namespace and store it in a variable\
    \ named \"pod\".\n# Loop through each running pod:\nfor pod in $(kubectl get pods\
    \ -n ${NAMESPACE} --field-selector=status.phase=Running --context ${CONTEXT} -o\
    \ jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"}{end}'); do \n    # Get\
    \ a list of all associated persistent volume claims and store it in a variable\
    \ named \"pvc\":\n    for pvc in $(kubectl get pods $pod -n ${NAMESPACE} --context\
    \ ${CONTEXT} -o jsonpath='{range .spec.volumes[*]}{.persistentVolumeClaim.claimName}{\"\
    \\n\"}{end}'); do \n        # Retrieve all related volume names:\n        for\
    \ volumeName in $(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o\
    \ json | jq -r '.spec.volumes[] | select(has(\"persistentVolumeClaim\")) | .name');\
    \ do \n            # Find the mountPath of a given volume name:\n            mountPath=$(kubectl\
    \ get pod $pod -n ${NAMESPACE} --context ${CONTEXT} -o json | jq -r --arg vol\
    \ \"$volumeName\" '.spec.containers[].volumeMounts[] | select(.name == $vol) |\
    \ .mountPath'); \n            # Find the associated container name:\n        \
    \    containerName=$(kubectl get pod $pod -n ${NAMESPACE} --context ${CONTEXT}\
    \ -o json | jq -r --arg vol \"$volumeName\" '.spec.containers[] | select(.volumeMounts[].name\
    \ == $vol) | .name'); \n            # Output the relevant info\n            echo\
    \ -e \"\\n---\\nPod: $pod, PVC: $pvc, volumeName: $volumeName, containerName:\
    \ $containerName, mountPath: $mountPath\"; \n            # Use `kubectl exec`\
    \ to query disk usage on the mountPath:\n            kubectl exec $pod -n ${NAMESPACE}\
    \ --context ${CONTEXT} -c $containerName -- df -h $mountPath; \n        done;\
    \ \n    done; \ndone;"
  name: fetch_the_storage_utilization_for_pvc_mounts
- command: 'NAMESPACE="${NAMESPACE}"; CONTEXT="${CONTEXT}"; PODS=$(kubectl get pods
    -n $NAMESPACE --context=$CONTEXT -o json); for pod in $(jq -r ''.items[] | @base64''
    <<< "$PODS"); do _jq() { jq -r \${1} <<< "$(base64 --decode <<< \${pod})"; };
    POD_NAME=$(_jq ''.metadata.name''); POD_NODE_NAME=$(kubectl get pod $POD_NAME
    -n $NAMESPACE --context=$CONTEXT -o custom-columns=:.spec.nodeName --no-headers);
    PVC_NAMES=$(kubectl get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT -o jsonpath=''{.spec.volumes[*].persistentVolumeClaim.claimName}'');
    for pvc_name in $PVC_NAMES; do PVC=$(kubectl get pvc $pvc_name -n $NAMESPACE --context=$CONTEXT
    -o json); ACCESS_MODE=$(jq -r ''.spec.accessModes[0]'' <<< "$PVC"); if [[ "$ACCESS_MODE"
    == "ReadWriteOnce" ]]; then PV_NAME=$(jq -r ''.spec.volumeName'' <<< "$PVC");
    STORAGE_NODE_NAME=$(jq -r --arg pv "$PV_NAME" ''.items[] | select(.status.volumesAttached
    != null) | select(.status.volumesInUse[] | contains($pv)) | .metadata.name'' <<<
    "$(kubectl get nodes --context=$CONTEXT -o json)"); echo "-----"; if [[ "$POD_NODE_NAME"
    == "$STORAGE_NODE_NAME" ]]; then echo "OK: Pod and Storage Node Matched"; else
    echo "Error: Pod and Storage Node Mismatched - If the issue persists, the node
    requires attention."; fi; echo "Pod: $POD_NAME"; echo "PVC: $pvc_name"; echo "PV:
    $PV_NAME"; echo "Node with Pod: $POD_NODE_NAME"; echo "Node with Storage: $STORAGE_NODE_NAME";
    echo; fi; done; done'
  doc_links: ";\n\n* [kubectl](https://kubernetes.io/docs/reference/generated/kubectl/)\n\
    * [NAMESPACE](https://kubernetes.io/docs/tasks/administer-cluster/namespaces/)\
    \ \n* [CONTEXT](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#set-the-current-context)\n\
    * [jq](https://stedolan.github.io/jq/manual/)\n* [base64](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding)\n\
    * [PersistentVolumeClaims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims)\n\
    * [Kubernetes nodes](https://kubernetes.io/docs/concepts/architecture/nodes/)"
  explanation: "\n\nThis command checks that all pods in a Kubernetes Namespace are\
    \ using Persistent Volumes from the same node. Specifically, it performs the following\
    \ steps: \n1. It sets the NAMESPACE and CONTEXT variables so that Kubernetes knows\
    \ which namespace and context you're working with.\n2. It gets a list of all of\
    \ the pods in the namespace at the given context. \n3. It loops through each pod\
    \ and gets its name. \n4. It then gets the node name for the pod. \n5. For each\
    \ pod, it finds all of the Persistent Volume Claims (PVCs).\n6. It gets more information\
    \ about each PVC (including the access mode and the name of the Persistent Volume\
    \ associated with it). \n7. It looks at the Access Mode for each PVC and only\
    \ runs the remaining steps if the Access Mode is \"ReadWriteOnce\". \n8. It looks\
    \ up the node name associated with the Persistent Volume (the storage node). \n\
    9. Lastly, it compares the two node names: the node hosting the pod, and the node\
    \ hosting the storage. If the nodes match, an \"OK\" message is printed, otherwise\
    \ an \"Error\" message is printed. "
  multi_line_details: "\n\n# Get the Kubernetes namespace and context from variables\
    \ \nNAMESPACE=\"${NAMESPACE}\";\nCONTEXT=\"${CONTEXT}\";\n\n# Get information\
    \ about all pods in the specified namespace and context\nPODS=$(kubectl get pods\
    \ -n $NAMESPACE --context=$CONTEXT -o json)\n\n# Loop through each of the pods\
    \ found in the query\nfor pod in $(jq -r '.items[] | @base64' <<< \"$PODS\");\
    \ do\n    # Define a function that can be used to extract any given JSON field\
    \ using jq\n    _jq() {\n        jq -r \\${1} <<< \"$(base64 --decode <<< \\${pod})\"\
    ;\n    };\n\n    # Use the jq function to retrieve the Pod's name\n    POD_NAME=$(_jq\
    \ '.metadata.name');\n\n    # Retrieve the Node on which the Pod is running\n\
    \    POD_NODE_NAME=$(kubectl get pod $POD_NAME -n $NAMESPACE --context=$CONTEXT\
    \ -o custom-columns=:.spec.nodeName --no-headers);\n\n    # Retrieve the PVCs\
    \ associated with this Pod\n    PVC_NAMES=$(kubectl get pod $POD_NAME -n $NAMESPACE\
    \ --context=$CONTEXT -o jsonpath='{.spec.volumes[*].persistentVolumeClaim.claimName}');\n\
    \n    # Loop through all associated PVCs\n    for pvc_name in $PVC_NAMES; do\n\
    \        # Retrieve information about the PVC\n        PVC=$(kubectl get pvc $pvc_name\
    \ -n $NAMESPACE --context=$CONTEXT -o json);\n\n        # Check the Access Mode\
    \ - We only need to check if it is ReadWriteOnce\n        ACCESS_MODE=$(jq -r\
    \ '.spec.accessModes[0]' <<< \"$PVC\");\n        \n        # If the Access Mode\
    \ is ReadWriteOnce\n        if [[ \"$ACCESS_MODE\" == \"ReadWriteOnce\" ]]; then\n\
    \            # Extract the PV's name\n            PV_NAME=$(jq -r '.spec.volumeName'\
    \ <<< \"$PVC\");\n\n            # Retrieve the Node where the PV is mounted\n\
    \            STORAGE_NODE_NAME=$(jq -r --arg pv \"$PV_NAME\" '.items[] | select(.status.volumesAttached\
    \ != null) | select(.status.volumesInUse[] | contains($pv)) | .metadata.name'\
    \ <<< \"$(kubectl get nodes --context=$CONTEXT -o json)\");\n\n            # Print\
    \ some information about the checks we have done\n            echo \"-----\";\n\
    \            if [[ \"$POD_NODE_NAME\" == \"$STORAGE_NODE_NAME\" ]]; then\n   \
    \             # The Node where the Pod is running matches the Node where the PV\
    \ is mounted\n                echo \"OK: Pod and Storage Node Matched\";\n   \
    \         else\n                # The Node where the Pod is running does not match\
    \ the Node where the PV is mounted\n                echo \"Error: Pod and Storage\
    \ Node Mismatched - If the issue persists, the node requires attention.\";\n \
    \           fi;\n            echo \"Pod: $POD_NAME\";\n            echo \"PVC:\
    \ $pvc_name\";\n            echo \"PV: $PV_NAME\";\n            echo \"Node with\
    \ Pod: $POD_NODE_NAME\";\n            echo \"Node with Storage: $STORAGE_NODE_NAME\"\
    ;\n            echo;\n        fi;\n    done;\ndone"
  name: check_for_rwo_persistent_volume_node_attachment_issues
