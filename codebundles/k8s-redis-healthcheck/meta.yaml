commands:
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli PING
  doc_links: '

    - [redis-cli Command Documentation](https://redis.io/topics/rediscli){:target="_blank"}

    - [Kubernetes kubectl Command Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Redis Server Documentation](https://redis.io/documentation){:target="_blank"}'
  explanation: This command allows you to execute the redis-cli PING command on a
    specific deployment within a given namespace, using a specified context. It's
    a way to check if the Redis server is running and responding within a Kubernetes
    cluster.
  multi_line_details: "\n# This command is using kubectl to execute a command inside\
    \ a running container in a Kubernetes deployment.\n# The command being executed\
    \ inside the container is 'redis-cli PING', which checks if the Redis server is\
    \ responding.\n\n# Start the multi-line command by using kubectl exec with the\
    \ appropriate flags and parameters\nkubectl exec deployment/${DEPLOYMENT_NAME}\
    \ \\\n    --context=${CONTEXT} \\\n    -n ${NAMESPACE} \\\n    -- redis-cli PING\n"
  name: ping_deployment_name_redis_workload
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli PING
  doc_links: '

    - [redis-cli Command Documentation](https://redis.io/topics/rediscli){:target="_blank"}

    - [Kubernetes kubectl Command Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Redis Server Documentation](https://redis.io/documentation){:target="_blank"}'
  explanation: This command allows you to execute the redis-cli PING command on a
    specific deployment within a given namespace, using a specified context. It's
    a way to check if the Redis server is running and responding within a Kubernetes
    cluster.
  multi_line_details: "\n# This command is using kubectl to execute a command inside\
    \ a running container in a Kubernetes deployment.\n# The command being executed\
    \ inside the container is 'redis-cli PING', which checks if the Redis server is\
    \ responding.\n\n# Start the multi-line command by using kubectl exec with the\
    \ appropriate flags and parameters\nkubectl exec deployment/${DEPLOYMENT_NAME}\
    \ \\\n    --context=${CONTEXT} \\\n    -n ${NAMESPACE} \\\n    -- redis-cli PING\n"
  name: ping_deployment_name_redis_workload
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [deployment in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [kubectl contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [kubectl namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [redis-cli](https://redis.io/topics/rediscli){:target="_blank"}'
  explanation: This command uses kubectl to execute a command within a specific deployment,
    in a specified context and namespace, and uses the redis-cli tool to set a key
    in Redis to 0 for health check purposes.
  multi_line_details: '

    # Set the deployment name, context and namespace to variables for easier readability
    and reusability

    DEPLOYMENT_NAME=my-deployment

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Use kubectl exec to enter the specified deployment and run the redis-cli command
    to set a specific key in Redis to 0

    kubectl exec deployment/${DEPLOYMENT_NAME} \ # Execute a command on a running
    pod in the specified deployment

    --context=${CONTEXT} \ # Use the specified context to access the Kubernetes cluster

    -n ${NAMESPACE} \ # Specify the namespace where the deployment is located

    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0 # Use redis-cli to set the value of
    a specific key in Redis to 0

    '
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0
  doc_links: '

    - [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [deployment in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [kubectl contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [kubectl namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [redis-cli](https://redis.io/topics/rediscli){:target="_blank"}'
  explanation: This command uses kubectl to execute a command within a specific deployment,
    in a specified context and namespace, and uses the redis-cli tool to set a key
    in Redis to 0 for health check purposes.
  multi_line_details: '

    # Set the deployment name, context and namespace to variables for easier readability
    and reusability

    DEPLOYMENT_NAME=my-deployment

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Use kubectl exec to enter the specified deployment and run the redis-cli command
    to set a specific key in Redis to 0

    kubectl exec deployment/${DEPLOYMENT_NAME} \ # Execute a command on a running
    pod in the specified deployment

    --context=${CONTEXT} \ # Use the specified context to access the Kubernetes cluster

    -n ${NAMESPACE} \ # Specify the namespace where the deployment is located

    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0 # Use redis-cli to set the value of
    a specific key in Redis to 0

    '
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [Kubernetes Documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [redis-cli Documentation](https://redis.io/topics/rediscli){:target="_blank"}'
  explanation: This command allows you to execute a command inside a running container
    in a Kubernetes deployment named ${DEPLOYMENT_NAME} within the specified ${NAMESPACE},
    using the redis-cli tool to increment a key called ${REDIS_HEALTHCHECK_KEY}.
  multi_line_details: "\n#!/bin/bash\n\n# Use kubectl to execute a command inside\
    \ a running container in a Kubernetes deployment\n# We assume the environment\
    \ variables DEPLOYMENT_NAME, CONTEXT, and NAMESPACE have already been set\n\n\
    # Execute the command in the specified context and namespace\nkubectl exec deployment/${DEPLOYMENT_NAME}\
    \ --context=${CONTEXT} -n ${NAMESPACE} -- \n\n# Run the redis-cli tool inside\
    \ the container to increment the value of a key used for health checking in Redis\n\
    redis-cli INCR ${REDIS_HEALTHCHECK_KEY}\n"
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [Kubernetes Documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [redis-cli Documentation](https://redis.io/topics/rediscli){:target="_blank"}'
  explanation: This command allows you to execute a command inside a running container
    in a Kubernetes deployment named ${DEPLOYMENT_NAME} within the specified ${NAMESPACE},
    using the redis-cli tool to increment a key called ${REDIS_HEALTHCHECK_KEY}.
  multi_line_details: "\n#!/bin/bash\n\n# Use kubectl to execute a command inside\
    \ a running container in a Kubernetes deployment\n# We assume the environment\
    \ variables DEPLOYMENT_NAME, CONTEXT, and NAMESPACE have already been set\n\n\
    # Execute the command in the specified context and namespace\nkubectl exec deployment/${DEPLOYMENT_NAME}\
    \ --context=${CONTEXT} -n ${NAMESPACE} -- \n\n# Run the redis-cli tool inside\
    \ the container to increment the value of a key used for health checking in Redis\n\
    redis-cli INCR ${REDIS_HEALTHCHECK_KEY}\n"
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [redis-cli command reference](https://redis.io/topics/rediscli){:target="_blank"}

    - [Kubernetes deployments overview](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Redis database documentation](https://redis.io/documentation){:target="_blank"}'
  explanation: This command allows you to run the redis-cli tool in a specific Kubernetes
    deployment, namespace, and context, and retrieve the value of a key called ${REDIS_HEALTHCHECK_KEY}
    from a Redis database.
  multi_line_details: '

    # Set the variables for deployment name, context, namespace, and redis healthcheck
    key

    DEPLOYMENT_NAME="example-deployment"

    CONTEXT="production-context"

    NAMESPACE="example-namespace"

    REDIS_HEALTHCHECK_KEY="health-check-key"


    # Use kubectl exec to run a command in a container of a pod in a deployment

    # We specify the deployment name, context, and namespace to target the correct
    environment

    # And we use the redis-cli tool to execute the GET command on a specific key for
    health check

    kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}

    '
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [redis-cli command reference](https://redis.io/topics/rediscli){:target="_blank"}

    - [Kubernetes deployments overview](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Redis database documentation](https://redis.io/documentation){:target="_blank"}'
  explanation: This command allows you to run the redis-cli tool in a specific Kubernetes
    deployment, namespace, and context, and retrieve the value of a key called ${REDIS_HEALTHCHECK_KEY}
    from a Redis database.
  multi_line_details: '

    # Set the variables for deployment name, context, namespace, and redis healthcheck
    key

    DEPLOYMENT_NAME="example-deployment"

    CONTEXT="production-context"

    NAMESPACE="example-namespace"

    REDIS_HEALTHCHECK_KEY="health-check-key"


    # Use kubectl exec to run a command in a container of a pod in a deployment

    # We specify the deployment name, context, and namespace to target the correct
    environment

    # And we use the redis-cli tool to execute the GET command on a specific key for
    health check

    kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}

    '
  name: verify_deployment_name_redis_read_write_operation
