commands:
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli PING
  doc_links: '

    - [Redis Documentation](https://redis.io/documentation){:target="_blank"}

    - [Kubernetes Documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Docker Contexts](https://docs.docker.com/engine/reference/commandline/context/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Redis PING Command](https://redis.io/commands/ping){:target="_blank"}'
  explanation: This command allows you to execute a command within a Redis container
    in the specified Kubernetes deployment, using the given context and namespace.
    The specific command being executed in this case is the "PING" command, which
    checks if the Redis server is running.
  multi_line_details: "# This command is used to send a PING command to the redis\
    \ server running in the specified deployment\n# Set the DEPLOYMENT_NAME, CONTEXT,\
    \ and NAMESPACE variables accordingly\n\nkubectl exec deployment/${DEPLOYMENT_NAME}\
    \ \\ \n  --context=${CONTEXT} \\ \n  -n ${NAMESPACE} -- \\\n  redis-cli PING"
  name: ping_deployment_name_redis_workload
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0
  doc_links: '

    - [Kubernetes Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Redis SET Command](https://redis.io/commands/set){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command runs a command in a pod belonging to a specific deployment
    in a Kubernetes cluster, setting a key in a Redis database to 0 for health checking
    purposes. The variables DEPLOYMENT_NAME, CONTEXT, and NAMESPACE need to be replaced
    with specific values.
  multi_line_details: '# Always use comments to explain each part of the command for
    better readability and understanding

    # Set the deployment name as a variable for easier management

    DEPLOYMENT_NAME=mydeployment


    # Set the Kubernetes context for the specific cluster you want to interact with

    CONTEXT=mycontext


    # Set the namespace where the deployment is located

    NAMESPACE=mynamespace


    # Set the key to be used for the health check in Redis

    REDIS_HEALTHCHECK_KEY=mykey


    # Execute a command in a running Kubernetes pod

    # Use the specified context and namespace

    kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0'
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [redis-cli INCR command documentation](https://redis.io/commands/incr){:target="_blank"}

    - [Kubernetes kubectl execute command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#execute){:target="_blank"}

    - [Kubernetes namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command allows you to execute the redis-cli INCR command within
    a specific deployment, context, and namespace, in order to increment the value
    of a key used for health checking in Redis.
  multi_line_details: "#!/bin/bash\n# This is a multi-line command to execute a redis-cli\
    \ command to increment a key in a specified deployment in a Kubernetes cluster.\n\
    \n# Name of the deployment where the redis instance is running\nDEPLOYMENT_NAME=\"\
    your_deployment_name\"\n\n# Kubernetes context to use for executing the command\n\
    CONTEXT=\"your_kubernetes_context\"\n\n# Namespace where the deployment is located\n\
    NAMESPACE=\"your_namespace\"\n\n# Key in Redis to be incremented\nREDIS_HEALTHCHECK_KEY=\"\
    your_healthcheck_key\"\n\n# Executing the redis-cli INCR command on the specified\
    \ deployment\nkubectl exec deployment/${DEPLOYMENT_NAME} \\\n  --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}"
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [Redis Command Line Interface (CLI) Documentation](https://redis.io/topics/rediscli){:target="_blank"}

    - [Kubernetes kubectl Command Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Namespaces Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command allows you to execute a Redis CLI command to retrieve
    the value of a specified key in a specific deployment and namespace within your
    Kubernetes cluster.
  multi_line_details: "# We are using the 'kubectl exec' command to execute a command\
    \ in a container within a pod\n# The deployment name, context, and namespace are\
    \ all being passed as variables for flexibility and reusability\n# We are specifying\
    \ the redis-cli command to perform a GET operation on a specific key\n\nkubectl\
    \ exec deployment/${DEPLOYMENT_NAME} \\  \n  --context=${CONTEXT} \\\n  -n ${NAMESPACE}\
    \ \\\n  -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}"
  name: verify_deployment_name_redis_read_write_operation
