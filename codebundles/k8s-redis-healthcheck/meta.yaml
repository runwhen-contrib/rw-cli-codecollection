commands:
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli PING
  doc_links: '

    - [Redis Documentation](https://redis.io/documentation){:target="_blank"}

    - [Kubernetes Documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Docker Contexts](https://docs.docker.com/engine/reference/commandline/context/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Redis PING Command](https://redis.io/commands/ping){:target="_blank"}'
  explanation: This command allows you to execute a command within a Redis container
    in the specified Kubernetes deployment, using the given context and namespace.
    The specific command being executed in this case is the "PING" command, which
    checks if the Redis server is running.
  multi_line_details: '```sh

    # Set the context for the kubectl command

    kubectl config use-context ${CONTEXT}


    # Execute a command in a container within a pod in the specified deployment and
    namespace, using redis-cli to ping the Redis server

    kubectl exec deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE} -- redis-cli PING

    ```'
  name: ping_deployment_name_redis_workload
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0
  doc_links: '

    - [Kubernetes Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Redis SET Command](https://redis.io/commands/set){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command runs a command in a pod belonging to a specific deployment
    in a Kubernetes cluster, setting a key in a Redis database to 0 for health checking
    purposes. The variables DEPLOYMENT_NAME, CONTEXT, and NAMESPACE need to be replaced
    with specific values.
  multi_line_details: '```shell

    # Set the context for kubectl command to ${CONTEXT}

    kubectl config use-context ${CONTEXT}


    # Execute a command inside a container in a deployment named ${DEPLOYMENT_NAME}
    in the namespace ${NAMESPACE},

    # using the redis-cli tool to set the value of key ${REDIS_HEALTHCHECK_KEY} to
    0

    kubectl exec deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE} -- redis-cli SET ${REDIS_HEALTHCHECK_KEY}
    0

    ```'
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [redis-cli INCR command documentation](https://redis.io/commands/incr){:target="_blank"}

    - [Kubernetes kubectl execute command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#execute){:target="_blank"}

    - [Kubernetes namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command allows you to execute the redis-cli INCR command within
    a specific deployment, context, and namespace, in order to increment the value
    of a key used for health checking in Redis.
  multi_line_details: "```shell\n# Set the command to execute inside the specific\
    \ deployment using kubernetes CLI\n# Use the context and namespace specified and\
    \ run redis-cli to increment a specific key\nkubectl exec deployment/${DEPLOYMENT_NAME}\
    \ \\\n  --context=${CONTEXT} \\\n  -n ${NAMESPACE} \\\n  -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}\n\
    ```"
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [Redis Command Line Interface (CLI) Documentation](https://redis.io/topics/rediscli){:target="_blank"}

    - [Kubernetes kubectl Command Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Namespaces Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command allows you to execute a Redis CLI command to retrieve
    the value of a specified key in a specific deployment and namespace within your
    Kubernetes cluster.
  multi_line_details: '```shell

    # Set the context to the specified context

    kubectl config use-context ${CONTEXT}


    # Execute the redis-cli command on the specified deployment and namespace to get
    the value of a specific key

    kubectl exec deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE} -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}

    ```'
  name: verify_deployment_name_redis_read_write_operation
