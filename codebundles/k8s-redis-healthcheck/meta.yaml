commands:
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli PING
  doc_links: '

    - [Redis Documentation](https://redis.io/documentation){:target="_blank"}

    - [Kubernetes Documentation](https://kubernetes.io/docs/home/){:target="_blank"}

    - [Docker Contexts](https://docs.docker.com/engine/reference/commandline/context/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Redis PING Command](https://redis.io/commands/ping){:target="_blank"}'
  explanation: This command allows you to execute a command within a Redis container
    in the specified Kubernetes deployment, using the given context and namespace.
    The specific command being executed in this case is the "PING" command, which
    checks if the Redis server is running.
  multi_line_details: '#!/bin/bash


    # Set the deployment name

    DEPLOYMENT_NAME="your_deployment_name"


    # Set the context

    CONTEXT="your_context_name"


    # Set the namespace

    NAMESPACE="your_namespace"


    # Execute the redis-cli PING command on the specified deployment

    kubectl exec deployment/${DEPLOYMENT_NAME} \

    --context=${CONTEXT} \

    -n ${NAMESPACE} \

    -- redis-cli PING'
  name: ping_deployment_name_redis_workload
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0
  doc_links: '

    - [Kubernetes Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Redis SET Command](https://redis.io/commands/set){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command runs a command in a pod belonging to a specific deployment
    in a Kubernetes cluster, setting a key in a Redis database to 0 for health checking
    purposes. The variables DEPLOYMENT_NAME, CONTEXT, and NAMESPACE need to be replaced
    with specific values.
  multi_line_details: '#!/bin/bash

    # This script is used to set the value of a Redis health check key to 0


    # Set the deployment name

    DEPLOYMENT_NAME="example-deployment"


    # Set the context

    CONTEXT="example-context"


    # Set the namespace

    NAMESPACE="example-namespace"


    # Set the Redis health check key

    REDIS_HEALTHCHECK_KEY="healthcheck"


    # Execute the kubectl command

    kubectl exec deployment/${DEPLOYMENT_NAME} \

    --context=${CONTEXT} \

    -n ${NAMESPACE} \

    -- redis-cli SET ${REDIS_HEALTHCHECK_KEY} 0'
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [redis-cli INCR command documentation](https://redis.io/commands/incr){:target="_blank"}

    - [Kubernetes kubectl execute command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#execute){:target="_blank"}

    - [Kubernetes namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command allows you to execute the redis-cli INCR command within
    a specific deployment, context, and namespace, in order to increment the value
    of a key used for health checking in Redis.
  multi_line_details: "# Set the deployment name\nDEPLOYMENT_NAME=\"example-deployment\"\
    \n\n# Set the context\nCONTEXT=\"example-context\"\n\n# Set the namespace\nNAMESPACE=\"\
    example-namespace\"\n\n# Set the Redis healthcheck key\nREDIS_HEALTHCHECK_KEY=\"\
    example-key\"\n\n# Execute the command to increment the Redis healthcheck key\
    \ using kubectl exec\nkubectl exec deployment/${DEPLOYMENT_NAME} \\\n  --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  -- redis-cli INCR ${REDIS_HEALTHCHECK_KEY}"
  name: verify_deployment_name_redis_read_write_operation
- command: kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}
  doc_links: '

    - [Redis Command Line Interface (CLI) Documentation](https://redis.io/topics/rediscli){:target="_blank"}

    - [Kubernetes kubectl Command Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes Namespaces Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command allows you to execute a Redis CLI command to retrieve
    the value of a specified key in a specific deployment and namespace within your
    Kubernetes cluster.
  multi_line_details: '# Set the deployment name, context and namespace as variables

    DEPLOYMENT_NAME="your_deployment_name"

    CONTEXT="your_context"

    NAMESPACE="your_namespace"


    # Use kubectl exec to run the redis-cli command in the specified deployment and
    namespace

    kubectl exec deployment/${DEPLOYMENT_NAME} --context=${CONTEXT} -n ${NAMESPACE}
    -- redis-cli GET ${REDIS_HEALTHCHECK_KEY}'
  name: verify_deployment_name_redis_read_write_operation
