commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -oyaml
  doc_links: '

    - [Kubectl Overview and Install Guide](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command uses kubectl to get the YAML configuration of daemonsets,
    deployments, and statefulsets with specific labels within a specified namespace
    and context.
  multi_line_details: "\n# Set the kubectl context to a specific cluster\n# Use the\
    \ value of the CONTEXT variable to specify the context\n# Use the value of the\
    \ NAMESPACE variable to specify the namespace\n# Get the YAML representation of\
    \ daemonset, deployment, and statefulset resources\n# Select resources with specific\
    \ labels using the value of the LABELS variable\nkubectl --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  get daemonset,deployment,statefulset \\\n  -l ${LABELS}\
    \ \\\n  -oyaml\n"
  name: get_current_resource_state
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or SRE would use the command to examine the configuration of daemonsets, deployments,
    and statefulsets with specific labels to identify any misconfigurations or errors
    causing the CrashLoopBackoff events.


    2. Scaling up or down of specific workloads: When a DevOps or SRE needs to scale
    specific workloads within a namespace, they can use this command to review the
    YAML configuration before making any adjustments.


    3. Rolling out updates or changes: Before rolling out updates or changes to specific
    workloads in Kubernetes, a DevOps or SRE may want to review the current configuration
    using this command to ensure everything is set up correctly.


    4. Investigating performance issues: If there are performance issues with specific
    workloads, a DevOps or SRE can use this command to examine the configuration and
    potentially identify any bottlenecks or issues impacting performance.


    5. Auditing and compliance checks: To ensure that workloads are compliant with
    organizational policies and best practices, a DevOps or SRE may use this command
    to review the configuration and make any necessary adjustments.'
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -oyaml
  doc_links: '

    - [Kubectl Overview and Install Guide](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command uses kubectl to get the YAML configuration of daemonsets,
    deployments, and statefulsets with specific labels within a specified namespace
    and context.
  multi_line_details: "\n# Set the kubectl context to a specific cluster\n# Use the\
    \ value of the CONTEXT variable to specify the context\n# Use the value of the\
    \ NAMESPACE variable to specify the namespace\n# Get the YAML representation of\
    \ daemonset, deployment, and statefulset resources\n# Select resources with specific\
    \ labels using the value of the LABELS variable\nkubectl --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  get daemonset,deployment,statefulset \\\n  -l ${LABELS}\
    \ \\\n  -oyaml\n"
  name: get_current_resource_state
  when_is_it_useful: '1. Troubleshooting Kubernetes CrashLoopBackoff events: A DevOps
    or SRE would use the command to examine the configuration of daemonsets, deployments,
    and statefulsets with specific labels to identify any misconfigurations or errors
    causing the CrashLoopBackoff events.


    2. Scaling up or down of specific workloads: When a DevOps or SRE needs to scale
    specific workloads within a namespace, they can use this command to review the
    YAML configuration before making any adjustments.


    3. Rolling out updates or changes: Before rolling out updates or changes to specific
    workloads in Kubernetes, a DevOps or SRE may want to review the current configuration
    using this command to ensure everything is set up correctly.


    4. Investigating performance issues: If there are performance issues with specific
    workloads, a DevOps or SRE can use this command to examine the configuration and
    potentially identify any bottlenecks or issues impacting performance.


    5. Auditing and compliance checks: To ensure that workloads are compliant with
    organizational policies and best practices, a DevOps or SRE may use this command
    to review the configuration and make any necessary adjustments.'
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs daemonset,deployment,statefulset
    -l ${LABELS} --tail=200 --limit-bytes=256000
  doc_links: '

    - [View logs using kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Viewing DaemonSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Viewing Deployment logs](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Viewing StatefulSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Filtering logs by labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Setting limits for log output](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}'
  explanation: This command uses kubectl to view the logs of daemonsets, deployments,
    and statefulsets in a specific namespace, filtered by certain labels, with a limit
    of 200 lines and 256 kilobytes of data. The context and namespace are specified
    using variables for flexibility.
  multi_line_details: '

    # Set the kubectl context to the specified context

    # -n specifies the namespace where the pods are located

    # logs command is used to retrieve the logs of one or more pods


    kubectl --context=${CONTEXT} -n ${NAMESPACE} \


    # Specify the resources whose logs need to be retrieved (daemonset, deployment,
    statefulset)

    logs daemonset,deployment,statefulset \


    # Select pods based on the specified labels

    -l ${LABELS} \


    # Retrieve only the most recent 200 lines of logs

    --tail=200 \


    # Limit the number of bytes returned for each log stream

    --limit-bytes=256000

    '
  name: get_resource_logs
  when_is_it_useful: '1. Investigating and troubleshooting Kubernetes CrashLoopBackoff
    events to identify the root cause and resolve them to ensure the stability and
    reliability of the application.


    2. Monitoring and analyzing the logs of daemonsets, deployments, and statefulsets
    to detect any anomalies or errors that could impact the performance and availability
    of the application.


    3. Troubleshooting performance issues or unexpected behavior in specific namespaces
    by reviewing the logs of relevant resources and identifying potential bottlenecks
    or misconfigurations.


    4. Debugging and diagnosing application failures or disruptions by examining the
    logs of Kubernetes resources to understand the sequence of events leading up to
    the issue.


    5. Performing regular log analysis and monitoring as part of proactive maintenance
    and optimization efforts to ensure the smooth operation of the Kubernetes environment
    and applications running on it.'
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs daemonset,deployment,statefulset
    -l ${LABELS} --tail=200 --limit-bytes=256000
  doc_links: '

    - [View logs using kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Viewing DaemonSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Viewing Deployment logs](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Viewing StatefulSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Filtering logs by labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Setting limits for log output](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}'
  explanation: This command uses kubectl to view the logs of daemonsets, deployments,
    and statefulsets in a specific namespace, filtered by certain labels, with a limit
    of 200 lines and 256 kilobytes of data. The context and namespace are specified
    using variables for flexibility.
  multi_line_details: '

    # Set the kubectl context to the specified context

    # -n specifies the namespace where the pods are located

    # logs command is used to retrieve the logs of one or more pods


    kubectl --context=${CONTEXT} -n ${NAMESPACE} \


    # Specify the resources whose logs need to be retrieved (daemonset, deployment,
    statefulset)

    logs daemonset,deployment,statefulset \


    # Select pods based on the specified labels

    -l ${LABELS} \


    # Retrieve only the most recent 200 lines of logs

    --tail=200 \


    # Limit the number of bytes returned for each log stream

    --limit-bytes=256000

    '
  name: get_resource_logs
  when_is_it_useful: '1. Investigating and troubleshooting Kubernetes CrashLoopBackoff
    events to identify the root cause and resolve them to ensure the stability and
    reliability of the application.


    2. Monitoring and analyzing the logs of daemonsets, deployments, and statefulsets
    to detect any anomalies or errors that could impact the performance and availability
    of the application.


    3. Troubleshooting performance issues or unexpected behavior in specific namespaces
    by reviewing the logs of relevant resources and identifying potential bottlenecks
    or misconfigurations.


    4. Debugging and diagnosing application failures or disruptions by examining the
    logs of Kubernetes resources to understand the sequence of events leading up to
    the issue.


    5. Performing regular log analysis and monitoring as part of proactive maintenance
    and optimization efforts to ensure the smooth operation of the Kubernetes environment
    and applications running on it.'
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'
  doc_links: '

    - [JSONPath documentation](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}

    - [Kubernetes DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployment documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}'
  explanation: This command retrieves the names of the first daemonset, deployment,
    and statefulset with specific labels in the specified namespace and context, using
    JSONPath formatting to only display the kind and name of each resource.
  multi_line_details: '

    # Set the context to the specified Kubernetes cluster

    kubectl --context=${CONTEXT} \


    # Set the namespace where the resources are located

    -n ${NAMESPACE} \


    # Get daemonset, deployment, and statefulset with specific labels

    get daemonset,deployment,statefulset -l ${LABELS} \


    # Output the specified JSON path format for the first item''s kind and name

    -o=jsonpath=''{.items[0].kind}/{.items[0].metadata.name}''

    '
  name: restart_resource
  when_is_it_useful: '1. Monitoring and troubleshooting Kubernetes CrashLoopBackoff
    events to identify and resolve issues that are causing applications to fail.

    2. Managing and monitoring the scaling and deployment of containers using Kubernetes,
    including identifying and resolving any issues that may arise.

    3. Implementing automation and orchestration for various tasks within a Kubernetes
    environment to streamline operations and ensure efficient resource utilization.

    4. Collaborating with developers to optimize and fine-tune Kubernetes configurations
    for specific workloads or applications.

    5. Handling and responding to alerts and incidents in a Kubernetes cluster, ensuring
    fast resolution of any issues to minimize downtime and disruption to services.'
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'
  doc_links: '

    - [JSONPath documentation](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}

    - [Kubernetes DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployment documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}'
  explanation: This command retrieves the names of the first daemonset, deployment,
    and statefulset with specific labels in the specified namespace and context, using
    JSONPath formatting to only display the kind and name of each resource.
  multi_line_details: '

    # Set the context to the specified Kubernetes cluster

    kubectl --context=${CONTEXT} \


    # Set the namespace where the resources are located

    -n ${NAMESPACE} \


    # Get daemonset, deployment, and statefulset with specific labels

    get daemonset,deployment,statefulset -l ${LABELS} \


    # Output the specified JSON path format for the first item''s kind and name

    -o=jsonpath=''{.items[0].kind}/{.items[0].metadata.name}''

    '
  name: restart_resource
  when_is_it_useful: '1. Monitoring and troubleshooting Kubernetes CrashLoopBackoff
    events to identify and resolve issues that are causing applications to fail.

    2. Managing and monitoring the scaling and deployment of containers using Kubernetes,
    including identifying and resolving any issues that may arise.

    3. Implementing automation and orchestration for various tasks within a Kubernetes
    environment to streamline operations and ensure efficient resource utilization.

    4. Collaborating with developers to optimize and fine-tune Kubernetes configurations
    for specific workloads or applications.

    5. Handling and responding to alerts and incidents in a Kubernetes cluster, ensuring
    fast resolution of any issues to minimize downtime and disruption to services.'
- command: kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes context and namespace](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command restarts the specified resource in Kubernetes using kubectl,
    with the context and namespace specified.
  multi_line_details: '

    # Assign the stdout of resource_name to a variable for easier reference

    resource=$(kubectl get ${resource_name} -o=jsonpath=''{.metadata.name}'')


    # Restart the deployment or other rollout object specified by the resource name

    # using the kubectl rollout restart command

    # The --context flag specifies the context for the cluster

    # The -n flag specifies the namespace where the resource is located

    kubectl rollout restart $resource --context=${CONTEXT} -n ${NAMESPACE}

    '
  name: restart_resource
  when_is_it_useful: '1. A pod is experiencing a CrashLoopBackoff event due to an
    application error or configuration issue, and the DevOps or SRE needs to restart
    the pod to attempt a recovery.


    2. A deployment is stuck in a failed state and restarting the resource is necessary
    to try and resolve the issue and restore service functionality.


    3. A new version of a container image has been deployed, and the DevOps or SRE
    needs to restart the relevant pods to ensure they pick up the latest changes.


    4. An environment update or configuration change has been made, and the DevOps
    or SRE needs to restart specific resources to apply the changes without disrupting
    the entire cluster.


    5. An infrastructure upgrade or maintenance activity requires restarting certain
    resources to ensure that they are running with the latest updates and patches.'
- command: kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes context and namespace](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command restarts the specified resource in Kubernetes using kubectl,
    with the context and namespace specified.
  multi_line_details: '

    # Assign the stdout of resource_name to a variable for easier reference

    resource=$(kubectl get ${resource_name} -o=jsonpath=''{.metadata.name}'')


    # Restart the deployment or other rollout object specified by the resource name

    # using the kubectl rollout restart command

    # The --context flag specifies the context for the cluster

    # The -n flag specifies the namespace where the resource is located

    kubectl rollout restart $resource --context=${CONTEXT} -n ${NAMESPACE}

    '
  name: restart_resource
  when_is_it_useful: '1. A pod is experiencing a CrashLoopBackoff event due to an
    application error or configuration issue, and the DevOps or SRE needs to restart
    the pod to attempt a recovery.


    2. A deployment is stuck in a failed state and restarting the resource is necessary
    to try and resolve the issue and restore service functionality.


    3. A new version of a container image has been deployed, and the DevOps or SRE
    needs to restart the relevant pods to ensure they pick up the latest changes.


    4. An environment update or configuration change has been made, and the DevOps
    or SRE needs to restart specific resources to apply the changes without disrupting
    the entire cluster.


    5. An infrastructure upgrade or maintenance activity requires restarting certain
    resources to ensure that they are running with the latest updates and patches.'
