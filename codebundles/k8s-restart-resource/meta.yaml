commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -oyaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [YAML configurations for Kubernetes DaemonSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command is using the kubectl tool to retrieve YAML configurations
    for daemon sets, deployments, and stateful sets in a specific namespace and with
    certain labels, using a specific context.
  multi_line_details: "```bash\n# Set the context to specify the Kubernetes cluster\
    \ to interact with\nkubectl config use-context ${CONTEXT}\n\n# Set the namespace\
    \ to limit the scope of operations to a specific namespace\nkubectl config set-context\
    \ --current --namespace=${NAMESPACE}\n\n# Use 'kubectl get' command to retrieve\
    \ the desired resources (daemonset, deployment, statefulset) based on the specified\
    \ labels\nkubectl get daemonset,deployment,statefulset -l ${LABELS} \n\n# Output\
    \ the results in yaml format for easier readability and understanding of the configurations\n\
    kubectl get daemonset,deployment,statefulset -l ${LABELS} -oyaml\n```"
  name: get_current_resource_state
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs daemonset,deployment,statefulset
    -l ${LABELS} --tail=200 --limit-bytes=256000
  doc_links: '

    - [Retrieving logs for Kubernetes DaemonSets, Deployments, and StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployments overview](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Understanding Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Managing Kubernetes namespaces](https://kubernetes.io/docs/tasks/administer-cluster/namespaces/){:target="_blank"}

    - [Kubernetes labels and selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubectl logs documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubectl context documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#config-context){:target="_blank"}'
  explanation: This command retrieves the logs for daemon sets, deployments, and stateful
    sets within a specific namespace and with certain labels, displaying the last
    200 lines of logs limited to 256,000 bytes. The --context flag specifies the Kubernetes
    cluster context to use for the operation.
  multi_line_details: '```bash

    # Set the context for the kubectl command to the specified Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Set the namespace in which to perform the operation

    kubectl config set-context --current --namespace=${NAMESPACE}


    # Retrieve logs from all daemonset, deployment, and statefulset resources with
    the specified labels

    kubectl logs -l ${LABELS}


    # Display the last 200 lines of the log for each resource

    kubectl logs --tail=200


    # Limit the total size of the logs to 256000 bytes

    kubectl logs --limit-bytes=256000

    ```'
  name: get_resource_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'
  doc_links: '

    - [Kubectl Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Deployment Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [StatefulSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [JSONPath Output Formatting](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve the names of the first-created
    daemonset, deployment, and statefulset in the specified namespace and with the
    specified labels, using JSONPath output formatting. The context and namespace
    are specified by the variables ${CONTEXT} and ${NAMESPACE} and the labels by ${LABELS}.
  multi_line_details: '```bash

    # Set the context to use for the Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Select the specific namespace to operate within

    kubectl config set-context --current --namespace=${NAMESPACE}


    # Get the daemonset, deployment, and statefulset resources that match the specified
    labels

    kubectl get daemonset,deployment,statefulset -l ${LABELS} -o=jsonpath=''{.items[0].kind}/{.items[0].metadata.name}''

    ```


    In this multi-line command, we first set the context to specify which Kubernetes
    cluster we want to work with. Then, we set the namespace to limit our operations
    to a specific logical subset of the cluster. Finally, we use the `kubectl get`
    command to retrieve the desired resources based on the specified labels, and format
    the output using JSONPath to extract the information we need.'
  name: restart_resource
- command: kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes Deployment Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Updating Components in Kubernetes](https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/){:target="_blank"}'
  explanation: This command restarts the deployment of a resource in Kubernetes, using
    the specified context and namespace. It is used to help update or troubleshoot
    a specific component within a Kubernetes cluster.
  multi_line_details: '```bash

    # Get the name of the resource using kubectl and store it in a variable

    resource_name=$(kubectl get <resource_type> -n ${NAMESPACE} -o jsonpath=''{.items[0].metadata.name}'')


    # Restart the specified resource using kubectl rollout restart command, passing
    in the resource name, context, and namespace

    kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n ${NAMESPACE}

    ```


    In this multi-line command:

    - We first use `kubectl get` to fetch the name of the resource based on the resource_type
    and namespace, and store it in a variable called `resource_name`.

    - Then, we use `kubectl rollout restart` command with the retrieved resource name,
    as well as the context and namespace provided. This will trigger a rolling restart
    for the specified resource.'
  name: restart_resource
