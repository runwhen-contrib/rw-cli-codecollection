commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -oyaml
  doc_links: '

    - [Kubectl Overview and Install Guide](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command uses kubectl to get the YAML configuration of daemonsets,
    deployments, and statefulsets with specific labels within a specified namespace
    and context.
  multi_line_details: "\n# Set the kubectl context to a specific cluster\n# Use the\
    \ value of the CONTEXT variable to specify the context\n# Use the value of the\
    \ NAMESPACE variable to specify the namespace\n# Get the YAML representation of\
    \ daemonset, deployment, and statefulset resources\n# Select resources with specific\
    \ labels using the value of the LABELS variable\nkubectl --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  get daemonset,deployment,statefulset \\\n  -l ${LABELS}\
    \ \\\n  -oyaml\n"
  name: get_current_resource_state
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -oyaml
  doc_links: '

    - [Kubectl Overview and Install Guide](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Get Command Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command uses kubectl to get the YAML configuration of daemonsets,
    deployments, and statefulsets with specific labels within a specified namespace
    and context.
  multi_line_details: "\n# Set the kubectl context to a specific cluster\n# Use the\
    \ value of the CONTEXT variable to specify the context\n# Use the value of the\
    \ NAMESPACE variable to specify the namespace\n# Get the YAML representation of\
    \ daemonset, deployment, and statefulset resources\n# Select resources with specific\
    \ labels using the value of the LABELS variable\nkubectl --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  get daemonset,deployment,statefulset \\\n  -l ${LABELS}\
    \ \\\n  -oyaml\n"
  name: get_current_resource_state
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs daemonset,deployment,statefulset
    -l ${LABELS} --tail=200 --limit-bytes=256000
  doc_links: '

    - [View logs using kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Viewing DaemonSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Viewing Deployment logs](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Viewing StatefulSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Filtering logs by labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Setting limits for log output](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}'
  explanation: This command uses kubectl to view the logs of daemonsets, deployments,
    and statefulsets in a specific namespace, filtered by certain labels, with a limit
    of 200 lines and 256 kilobytes of data. The context and namespace are specified
    using variables for flexibility.
  multi_line_details: '

    # Set the kubectl context to the specified context

    # -n specifies the namespace where the pods are located

    # logs command is used to retrieve the logs of one or more pods


    kubectl --context=${CONTEXT} -n ${NAMESPACE} \


    # Specify the resources whose logs need to be retrieved (daemonset, deployment,
    statefulset)

    logs daemonset,deployment,statefulset \


    # Select pods based on the specified labels

    -l ${LABELS} \


    # Retrieve only the most recent 200 lines of logs

    --tail=200 \


    # Limit the number of bytes returned for each log stream

    --limit-bytes=256000

    '
  name: get_resource_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs daemonset,deployment,statefulset
    -l ${LABELS} --tail=200 --limit-bytes=256000
  doc_links: '

    - [View logs using kubectl](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Viewing DaemonSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Viewing Deployment logs](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Viewing StatefulSet logs](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Filtering logs by labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Setting limits for log output](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}'
  explanation: This command uses kubectl to view the logs of daemonsets, deployments,
    and statefulsets in a specific namespace, filtered by certain labels, with a limit
    of 200 lines and 256 kilobytes of data. The context and namespace are specified
    using variables for flexibility.
  multi_line_details: '

    # Set the kubectl context to the specified context

    # -n specifies the namespace where the pods are located

    # logs command is used to retrieve the logs of one or more pods


    kubectl --context=${CONTEXT} -n ${NAMESPACE} \


    # Specify the resources whose logs need to be retrieved (daemonset, deployment,
    statefulset)

    logs daemonset,deployment,statefulset \


    # Select pods based on the specified labels

    -l ${LABELS} \


    # Retrieve only the most recent 200 lines of logs

    --tail=200 \


    # Limit the number of bytes returned for each log stream

    --limit-bytes=256000

    '
  name: get_resource_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'
  doc_links: '

    - [JSONPath documentation](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}

    - [Kubernetes DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployment documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}'
  explanation: This command retrieves the names of the first daemonset, deployment,
    and statefulset with specific labels in the specified namespace and context, using
    JSONPath formatting to only display the kind and name of each resource.
  multi_line_details: '

    # Set the context to the specified Kubernetes cluster

    kubectl --context=${CONTEXT} \


    # Set the namespace where the resources are located

    -n ${NAMESPACE} \


    # Get daemonset, deployment, and statefulset with specific labels

    get daemonset,deployment,statefulset -l ${LABELS} \


    # Output the specified JSON path format for the first item''s kind and name

    -o=jsonpath=''{.items[0].kind}/{.items[0].metadata.name}''

    '
  name: restart_resource
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'
  doc_links: '

    - [JSONPath documentation](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}

    - [Kubernetes DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployment documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}'
  explanation: This command retrieves the names of the first daemonset, deployment,
    and statefulset with specific labels in the specified namespace and context, using
    JSONPath formatting to only display the kind and name of each resource.
  multi_line_details: '

    # Set the context to the specified Kubernetes cluster

    kubectl --context=${CONTEXT} \


    # Set the namespace where the resources are located

    -n ${NAMESPACE} \


    # Get daemonset, deployment, and statefulset with specific labels

    get daemonset,deployment,statefulset -l ${LABELS} \


    # Output the specified JSON path format for the first item''s kind and name

    -o=jsonpath=''{.items[0].kind}/{.items[0].metadata.name}''

    '
  name: restart_resource
- command: kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes context and namespace](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: This command restarts the specified resource in Kubernetes using kubectl,
    with the context and namespace specified.
  multi_line_details: '

    # Assign the stdout of resource_name to a variable for easier reference

    resource=$(kubectl get ${resource_name} -o=jsonpath=''{.metadata.name}'')


    # Restart the deployment or other rollout object specified by the resource name

    # using the kubectl rollout restart command

    # The --context flag specifies the context for the cluster

    # The -n flag specifies the namespace where the resource is located

    kubectl rollout restart $resource --context=${CONTEXT} -n ${NAMESPACE}

    '
  name: restart_resource
- command: kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    '
  explanation: Explanation not available
  multi_line_details: '

    # Assign the stdout of resource_name to a variable for easier reference

    resource=$(kubectl get ${resource_name} -o=jsonpath=''{.metadata.name}'')


    # Restart the deployment or other rollout object specified by the resource name

    # using the kubectl rollout restart command

    # The --context flag specifies the context for the cluster

    # The -n flag specifies the namespace where the resource is located

    kubectl rollout restart $resource --context=${CONTEXT} -n ${NAMESPACE}

    '
  name: restart_resource
