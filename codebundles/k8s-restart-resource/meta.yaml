commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -oyaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [YAML configurations for Kubernetes DaemonSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command is using the kubectl tool to retrieve YAML configurations
    for daemon sets, deployments, and stateful sets in a specific namespace and with
    certain labels, using a specific context.
  multi_line_details: '```bash

    # Set the kubectl context to the provided context variable

    kubectl --context=${CONTEXT} \

    # Specify the namespace to operate within using the provided namespace variable

    -n ${NAMESPACE} \

    # Retrieve resources of type daemonset, deployment, and statefulset that match
    the specified labels

    get daemonset,deployment,statefulset -l ${LABELS} \

    # Output the results in YAML format for easy readability and parsing

    -oyaml

    ```'
  name: get_current_resource_state
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs daemonset,deployment,statefulset
    -l ${LABELS} --tail=200 --limit-bytes=256000
  doc_links: '

    - [Retrieving logs for Kubernetes DaemonSets, Deployments, and StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployments overview](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Understanding Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Managing Kubernetes namespaces](https://kubernetes.io/docs/tasks/administer-cluster/namespaces/){:target="_blank"}

    - [Kubernetes labels and selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubectl logs documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubectl context documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#config-context){:target="_blank"}'
  explanation: This command retrieves the logs for daemon sets, deployments, and stateful
    sets within a specific namespace and with certain labels, displaying the last
    200 lines of logs limited to 256,000 bytes. The --context flag specifies the Kubernetes
    cluster context to use for the operation.
  multi_line_details: "# Set the Kubernetes context to the value of the $CONTEXT environment\
    \ variable\nkubectl --context=${CONTEXT} \\\n  \n  # Set the target namespace\
    \ to the value of the $NAMESPACE environment variable\n  -n ${NAMESPACE} \\\n\
    \  \n  # Get logs from daemonset, deployment, and statefulset with the specified\
    \ labels\n  logs daemonset,deployment,statefulset -l ${LABELS} \\\n  \n  # Show\
    \ only the last 200 lines of logs\n  --tail=200 \\\n  \n  # Limit the log output\
    \ to 256000 bytes\n  --limit-bytes=256000"
  name: get_resource_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'
  doc_links: '

    - [Kubectl Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Deployment Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [StatefulSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [JSONPath Output Formatting](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve the names of the first-created
    daemonset, deployment, and statefulset in the specified namespace and with the
    specified labels, using JSONPath output formatting. The context and namespace
    are specified by the variables ${CONTEXT} and ${NAMESPACE} and the labels by ${LABELS}.
  multi_line_details: "# Set the context to the specified Kubernetes cluster\nkubectl\
    \ --context=${CONTEXT} \\\n  \n  # Specify the namespace where we want to perform\
    \ the operation\n  -n ${NAMESPACE} \\\n  \n  # Get the daemonset, deployment,\
    \ and statefulset resources with the specified labels\n  get daemonset,deployment,statefulset\
    \ -l ${LABELS} \\\n  \n  # Output the kind and name of the first item in JSON\
    \ format\n  -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'"
  name: restart_resource
- command: kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes Deployment Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Updating Components in Kubernetes](https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/){:target="_blank"}'
  explanation: This command restarts the deployment of a resource in Kubernetes, using
    the specified context and namespace. It is used to help update or troubleshoot
    a specific component within a Kubernetes cluster.
  multi_line_details: '# Retrieve the current resource name by running a command and
    storing the output in a variable

    resource_name=$(kubectl get <resource_type> <resource_name> -o=jsonpath=''{.metadata.name}'')


    # Restart the rollout for the specified resource using the retrieved resource
    name, context, and namespace

    kubectl rollout restart $resource_name --context=${CONTEXT} -n ${NAMESPACE}'
  name: restart_resource
