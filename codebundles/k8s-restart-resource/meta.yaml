commands:
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -oyaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [YAML configurations for Kubernetes DaemonSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Kubernetes Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}'
  explanation: This command is using the kubectl tool to retrieve YAML configurations
    for daemon sets, deployments, and stateful sets in a specific namespace and with
    certain labels, using a specific context.
  multi_line_details: "#!/bin/bash\n\n# Set the context and namespace to be used in\
    \ kubectl command\nCONTEXT=\"my-context\"\nNAMESPACE=\"my-namespace\"\n\n# Set\
    \ the labels to filter the resources\nLABELS=\"app=my-app,env=production\"\n\n\
    # Use kubectl to get daemonset, deployment, statefulset resources in YAML format\n\
    kubectl --context=${CONTEXT} \\\n  -n ${NAMESPACE} \\\n  get daemonset,deployment,statefulset\
    \ \\\n  -l ${LABELS} \\\n  -oyaml"
  name: get_current_resource_state
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} logs daemonset,deployment,statefulset
    -l ${LABELS} --tail=200 --limit-bytes=256000
  doc_links: '

    - [Retrieving logs for Kubernetes DaemonSets, Deployments, and StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Deployments overview](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Understanding Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Managing Kubernetes namespaces](https://kubernetes.io/docs/tasks/administer-cluster/namespaces/){:target="_blank"}

    - [Kubernetes labels and selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/){:target="_blank"}

    - [Kubectl logs documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubectl context documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#config-context){:target="_blank"}'
  explanation: This command retrieves the logs for daemon sets, deployments, and stateful
    sets within a specific namespace and with certain labels, displaying the last
    200 lines of logs limited to 256,000 bytes. The --context flag specifies the Kubernetes
    cluster context to use for the operation.
  multi_line_details: '# Set the context and namespace for kubectl

    kubectl --context=${CONTEXT} -n ${NAMESPACE} \


    # Get logs from daemonset, deployment, and statefulset with specified labels

    logs daemonset,deployment,statefulset -l ${LABELS} \


    # Limit the number of lines returned to 200 and the total byte size to 256000

    --tail=200 --limit-bytes=256000'
  name: get_resource_logs
- command: kubectl --context=${CONTEXT} -n ${NAMESPACE} get daemonset,deployment,statefulset
    -l ${LABELS} -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'
  doc_links: '

    - [Kubectl Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Deployment Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [StatefulSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [JSONPath Output Formatting](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve the names of the first-created
    daemonset, deployment, and statefulset in the specified namespace and with the
    specified labels, using JSONPath output formatting. The context and namespace
    are specified by the variables ${CONTEXT} and ${NAMESPACE} and the labels by ${LABELS}.
  multi_line_details: "```bash\n# Set the kubectl context and namespace using the\
    \ provided variables\nkubectl --context=${CONTEXT} -n ${NAMESPACE} \\\n  # Get\
    \ daemonset, deployment, and statefulset resources with specified labels\n  get\
    \ daemonset,deployment,statefulset -l ${LABELS} \\\n  # Output the kind and name\
    \ of the first item in json format\n  -o=jsonpath='{.items[0].kind}/{.items[0].metadata.name}'\n\
    ```"
  name: restart_resource
- command: kubectl rollout restart ${resource_name.stdout} --context=${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes Deployment Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/){:target="_blank"}

    - [Updating Components in Kubernetes](https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/){:target="_blank"}'
  explanation: This command restarts the deployment of a resource in Kubernetes, using
    the specified context and namespace. It is used to help update or troubleshoot
    a specific component within a Kubernetes cluster.
  multi_line_details: '#!/bin/bash


    # This script restarts the specified Kubernetes resource in the given namespace
    and context.


    # Get the resource name using kubectl and store it in a variable

    resource_name=$(kubectl get <resource_type> -o jsonpath="{.items[0].metadata.name}")


    # Restart the resource using kubectl rollout restart command

    kubectl rollout restart ${resource_name} --context=${CONTEXT} -n ${NAMESPACE}'
  name: restart_resource
