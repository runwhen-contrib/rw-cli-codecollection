commands:
- command: 'apiserver=https://kubernetes.default.svc; namespace=${NAMESPACE}; context=${CONTEXT};
    resource=""; serviceaccount=${SERVICE_ACCOUNT}; kubectl run curl-pod --image=curlimages/curl:latest
    --restart=Never --overrides="{ \"spec\": { \"serviceAccountName\": \"$serviceaccount\"
    } }" -n $namespace --context=$context --command -- sleep infinity && echo "Waiting
    for the curl-pod to be running..." && kubectl wait --for=condition=Ready pod/curl-pod
    --timeout=20s -n $namespace --context=$context && TOKEN=$(kubectl exec curl-pod
    -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource && echo "Cleaning up..." && kubectl delete pod curl-pod -n
    $namespace --context=$context && echo "Done"'
  doc_links: '

    - [Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [Curl Command in Linux](https://linuxize.com/post/curl-command-examples/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to set up a pod in Kubernetes that runs a curl
    command to make an API request, using a specified service account and namespace.
    It waits for the pod to be running and then cleans up after the request is made.
  multi_line_details: '

    # Set the variables for the API server, namespace, context, resource, and service
    account

    apiserver=https://kubernetes.default.svc

    namespace=${NAMESPACE}

    context=${CONTEXT}

    resource=""

    serviceaccount=${SERVICE_ACCOUNT}


    # Create a pod running the curl container with specified service account and wait
    for it to be running

    kubectl run curl-pod --image=curlimages/curl:latest --restart=Never --overrides="{
    \"spec\": { \"serviceAccountName\": \"$serviceaccount\" } }" -n $namespace --context=$context
    --command -- sleep infinity && echo "Waiting for the curl-pod to be running..."
    && kubectl wait --for=condition=Ready pod/curl-pod --timeout=20s -n $namespace
    --context=$context


    # Retrieve the token from the service account and perform a curl request to the
    Kubernetes API

    TOKEN=$(kubectl exec curl-pod -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource


    # Clean up by deleting the curl-pod

    echo "Cleaning up..." && kubectl delete pod curl-pod -n $namespace --context=$context
    && echo "Done"

    '
  name: test_service_account_access_to_kubernetes_api_server_in_namespace_namespace
- command: 'apiserver=https://kubernetes.default.svc; namespace=${NAMESPACE}; context=${CONTEXT};
    resource=""; serviceaccount=${SERVICE_ACCOUNT}; kubectl run curl-pod --image=curlimages/curl:latest
    --restart=Never --overrides="{ \"spec\": { \"serviceAccountName\": \"$serviceaccount\"
    } }" -n $namespace --context=$context --command -- sleep infinity && echo "Waiting
    for the curl-pod to be running..." && kubectl wait --for=condition=Ready pod/curl-pod
    --timeout=20s -n $namespace --context=$context && TOKEN=$(kubectl exec curl-pod
    -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource && echo "Cleaning up..." && kubectl delete pod curl-pod -n
    $namespace --context=$context && echo "Done"'
  doc_links: '

    - [Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [Curl Command in Linux](https://linuxize.com/post/curl-command-examples/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to set up a pod in Kubernetes that runs a curl
    command to make an API request, using a specified service account and namespace.
    It waits for the pod to be running and then cleans up after the request is made.
  multi_line_details: '

    # Set the variables for the API server, namespace, context, resource, and service
    account

    apiserver=https://kubernetes.default.svc

    namespace=${NAMESPACE}

    context=${CONTEXT}

    resource=""

    serviceaccount=${SERVICE_ACCOUNT}


    # Create a pod running the curl container with specified service account and wait
    for it to be running

    kubectl run curl-pod --image=curlimages/curl:latest --restart=Never --overrides="{
    \"spec\": { \"serviceAccountName\": \"$serviceaccount\" } }" -n $namespace --context=$context
    --command -- sleep infinity && echo "Waiting for the curl-pod to be running..."
    && kubectl wait --for=condition=Ready pod/curl-pod --timeout=20s -n $namespace
    --context=$context


    # Retrieve the token from the service account and perform a curl request to the
    Kubernetes API

    TOKEN=$(kubectl exec curl-pod -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource


    # Clean up by deleting the curl-pod

    echo "Cleaning up..." && kubectl delete pod curl-pod -n $namespace --context=$context
    && echo "Done"

    '
  name: test_service_account_access_to_kubernetes_api_server_in_namespace_namespace
