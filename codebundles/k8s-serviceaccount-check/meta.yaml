commands:
- command: 'apiserver=https://kubernetes.default.svc; namespace=${NAMESPACE}; context=${CONTEXT};
    resource=""; serviceaccount=${SERVICE_ACCOUNT}; kubectl run curl-pod --image=curlimages/curl:latest
    --restart=Never --overrides="{ \"spec\": { \"serviceAccountName\": \"$serviceaccount\"
    } }" -n $namespace --context=$context --command -- sleep infinity && echo "Waiting
    for the curl-pod to be running..." && kubectl wait --for=condition=Ready pod/curl-pod
    --timeout=20s -n $namespace --context=$context && TOKEN=$(kubectl exec curl-pod
    -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource && echo "Cleaning up..." && kubectl delete pod curl-pod -n
    $namespace --context=$context && echo "Done"'
  doc_links: '

    - [Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [Curl Command in Linux](https://linuxize.com/post/curl-command-examples/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to set up a pod in Kubernetes that runs a curl
    command to make an API request, using a specified service account and namespace.
    It waits for the pod to be running and then cleans up after the request is made.
  multi_line_details: '

    # Set the variables for the API server, namespace, context, resource, and service
    account

    apiserver=https://kubernetes.default.svc

    namespace=${NAMESPACE}

    context=${CONTEXT}

    resource=""

    serviceaccount=${SERVICE_ACCOUNT}


    # Create a pod running the curl container with specified service account and wait
    for it to be running

    kubectl run curl-pod --image=curlimages/curl:latest --restart=Never --overrides="{
    \"spec\": { \"serviceAccountName\": \"$serviceaccount\" } }" -n $namespace --context=$context
    --command -- sleep infinity && echo "Waiting for the curl-pod to be running..."
    && kubectl wait --for=condition=Ready pod/curl-pod --timeout=20s -n $namespace
    --context=$context


    # Retrieve the token from the service account and perform a curl request to the
    Kubernetes API

    TOKEN=$(kubectl exec curl-pod -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource


    # Clean up by deleting the curl-pod

    echo "Cleaning up..." && kubectl delete pod curl-pod -n $namespace --context=$context
    && echo "Done"

    '
  name: test_service_account_access_to_kubernetes_api_server_in_namespace_namespace
  when_is_it_useful: '1. Troubleshooting a Kubernetes CrashLoopBackoff event: A DevOps
    or Site Reliability Engineer might need to use the command to set up a pod in
    Kubernetes to debug and troubleshoot an application that is continuously crashing
    and restarting.


    2. Testing connectivity and authentication to an external API: The engineer might
    use the command to test the connectivity and authentication of a new external
    API by making a curl request from within a Kubernetes pod using a specific service
    account and namespace.


    3. Monitoring and collecting data from an API endpoint: The engineer could use
    the command to create a temporary pod in Kubernetes to make a curl request to
    an API endpoint and collect specific data for monitoring and analysis purposes.


    4. Troubleshooting network issues within a Kubernetes cluster: The engineer might
    need to run the command to test network connectivity and troubleshoot any potential
    issues within the Kubernetes cluster, such as DNS resolution problems or firewall
    rules.


    5. Performing ad-hoc testing of a new feature or service: The engineer may use
    the command to quickly spin up a pod in Kubernetes for ad-hoc testing of a new
    feature or service by making API requests and validating the expected behavior.'
- command: 'apiserver=https://kubernetes.default.svc; namespace=${NAMESPACE}; context=${CONTEXT};
    resource=""; serviceaccount=${SERVICE_ACCOUNT}; kubectl run curl-pod --image=curlimages/curl:latest
    --restart=Never --overrides="{ \"spec\": { \"serviceAccountName\": \"$serviceaccount\"
    } }" -n $namespace --context=$context --command -- sleep infinity && echo "Waiting
    for the curl-pod to be running..." && kubectl wait --for=condition=Ready pod/curl-pod
    --timeout=20s -n $namespace --context=$context && TOKEN=$(kubectl exec curl-pod
    -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource && echo "Cleaning up..." && kubectl delete pod curl-pod -n
    $namespace --context=$context && echo "Done"'
  doc_links: '

    - [Kubernetes Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/){:target="_blank"}

    - [Curl Command in Linux](https://linuxize.com/post/curl-command-examples/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to set up a pod in Kubernetes that runs a curl
    command to make an API request, using a specified service account and namespace.
    It waits for the pod to be running and then cleans up after the request is made.
  multi_line_details: '

    # Set the variables for the API server, namespace, context, resource, and service
    account

    apiserver=https://kubernetes.default.svc

    namespace=${NAMESPACE}

    context=${CONTEXT}

    resource=""

    serviceaccount=${SERVICE_ACCOUNT}


    # Create a pod running the curl container with specified service account and wait
    for it to be running

    kubectl run curl-pod --image=curlimages/curl:latest --restart=Never --overrides="{
    \"spec\": { \"serviceAccountName\": \"$serviceaccount\" } }" -n $namespace --context=$context
    --command -- sleep infinity && echo "Waiting for the curl-pod to be running..."
    && kubectl wait --for=condition=Ready pod/curl-pod --timeout=20s -n $namespace
    --context=$context


    # Retrieve the token from the service account and perform a curl request to the
    Kubernetes API

    TOKEN=$(kubectl exec curl-pod -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource


    # Clean up by deleting the curl-pod

    echo "Cleaning up..." && kubectl delete pod curl-pod -n $namespace --context=$context
    && echo "Done"

    '
  name: test_service_account_access_to_kubernetes_api_server_in_namespace_namespace
  when_is_it_useful: '1. Troubleshooting a Kubernetes CrashLoopBackoff event: A DevOps
    or Site Reliability Engineer might need to use the command to set up a pod in
    Kubernetes to debug and troubleshoot an application that is continuously crashing
    and restarting.


    2. Testing connectivity and authentication to an external API: The engineer might
    use the command to test the connectivity and authentication of a new external
    API by making a curl request from within a Kubernetes pod using a specific service
    account and namespace.


    3. Monitoring and collecting data from an API endpoint: The engineer could use
    the command to create a temporary pod in Kubernetes to make a curl request to
    an API endpoint and collect specific data for monitoring and analysis purposes.


    4. Troubleshooting network issues within a Kubernetes cluster: The engineer might
    need to run the command to test network connectivity and troubleshoot any potential
    issues within the Kubernetes cluster, such as DNS resolution problems or firewall
    rules.


    5. Performing ad-hoc testing of a new feature or service: The engineer may use
    the command to quickly spin up a pod in Kubernetes for ad-hoc testing of a new
    feature or service by making API requests and validating the expected behavior.'
