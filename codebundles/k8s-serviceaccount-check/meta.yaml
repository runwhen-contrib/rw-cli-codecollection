commands:
- command: 'apiserver=https://kubernetes.default.svc; namespace=${NAMESPACE}; context=${CONTEXT};
    resource=""; serviceaccount=${SERVICE_ACCOUNT}; kubectl run curl-pod --image=curlimages/curl:latest
    --restart=Never --overrides="{ \"spec\": { \"serviceAccountName\": \"$serviceaccount\"
    } }" -n $namespace --context=$context --command -- sleep infinity && echo "Waiting
    for the curl-pod to be running..." && kubectl wait --for=condition=Ready pod/curl-pod
    --timeout=20s -n $namespace --context=$context && TOKEN=$(kubectl exec curl-pod
    -n $namespace --context=$context -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    && echo "Performing a curl request to the Kubernetes API..." && kubectl exec curl-pod
    -n $namespace --context=$context -- curl -s -k -H "Authorization: Bearer $TOKEN"
    $apiserver$resource && echo "Cleaning up..." && kubectl delete pod curl-pod -n
    $namespace --context=$context && echo "Done"'
  doc_links: "\n\n* [Kubernetes API](https://kubernetes.io/docs/reference/generated/kubernetes-api/)\
    \ \n* [Creating Pods Automatically with kubectl run](https://kubernetes.io/docs/tasks/manage-pod/create-pod-automatically/)\n\
    * [Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod/)\n* [Managing\
    \ Service Accounts](https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/)\n\
    * [kubectl exec](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec)\
    \ \n* [kubectl wait](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#wait)\n\
    * [cURL](https://curl.haxx.se/docs/)"
  explanation: '


    This command is used to run a "curl-pod" in Kubernetes using the kubectl run command.
    It creates a pod with an image called "curlimages/curl:latest", which contains
    the curl tool, and sets the ServiceAccountName to "$serviceaccount". A Kubernetes
    API call is then made by getting a token and executing the curl command. Finally,
    the curl-pod is deleted. This command enables engineers to quickly make an API
    call to the Kubernetes API from within the cluster, using the curl tool.'
  multi_line_details: "\n\n# Construct a Kubernetes command to run a single curl-pod\
    \ in the specified namespace and context\nNAMESPACE=${NAMESPACE}\nCONTEXT=${CONTEXT}\n\
    SERVICE_ACCOUNT=${SERVICE_ACCOUNT}\nAPISERVER=https://kubernetes.default.svc\n\
    \n# First, create the pod with the given parameters and set it to never restart.\n\
    kubectl run curl-pod \\\n  --image=curlimages/curl:latest \\\n  --restart=Never\
    \ \\\n  --overrides=\"{ \\\"spec\\\": { \\\"serviceAccountName\\\": \\\"$SERVICE_ACCOUNT\\\
    \" } }\" \\\n  -n $NAMESPACE \\\n  --context=$CONTEXT\n\necho \"Waiting for the\
    \ curl-pod to be running...\"\n\n# Wait until the pod is running\nkubectl wait\
    \ --for=condition=Ready pod/curl-pod --timeout=20s -n $NAMESPACE --context=$CONTEXT\n\
    \n# Get the token from the service account associated with the pod\nTOKEN=$(kubectl\
    \ exec curl-pod -n $NAMESPACE --context=$CONTEXT -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)\n\
    \necho \"Performing a curl request to the Kubernetes API...\"\n\n# Perform a curl\
    \ request to the Kubernetes API.\nkubectl exec curl-pod -n $NAMESPACE --context=$CONTEXT\
    \ -- curl -s -k -H \"Authorization: Bearer $TOKEN\" $APISERVER$RESOURCE\n\necho\
    \ \"Cleaning up...\"\n\n# Clean up by deleting the pod.\nkubectl delete pod curl-pod\
    \ -n $NAMESPACE --context=$CONTEXT\n\necho \"Done\""
  name: test_service_account_access_to_kubernetes_api_server
