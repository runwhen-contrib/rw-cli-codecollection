commands:
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type == "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}")) and (.lastTimestamp | fromdateiso8601)
    >= $time_limit) | {kind: .involvedObject.kind, name: .involvedObject.name, reason:
    .reason, message: .message, firstTimestamp: .firstTimestamp, lastTimestamp: .lastTimestamp}
    ] | group_by([.kind, .name]) | map({kind: .[0].kind, name: .[0].name, count: length,
    reasons: map(.reason) | unique, messages: map(.message) | unique, firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    - [Retrieve events from a Kubernetes cluster](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Filtering events in Kubernetes](https://kubernetes.io/docs/concepts/cluster-administration/logging/#kubectl-logs-and-kubectl-events){:target="_blank"}

    - [Understanding StatefulSets in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Using kubectl to filter events](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-events){:target="_blank"}'
  explanation: This command retrieves events from a Kubernetes cluster and filters
    them to show only warning events related to a specific StatefulSet or Pod within
    the last hour, displaying relevant information such as the kind, name, reason,
    message, and timestamps of the events.
  multi_line_details: "```bash\n# Store the output of \"kubectl get events\" command\
    \ as a JSON object \nevents=$(kubectl get events --context ${CONTEXT} -n ${NAMESPACE}\
    \ -o json)\n\n# Parse and filter the JSON object to find specific events\nfiltered_events=$(echo\
    \ $events | jq '(now - (60*60)) as $time_limit | [ .items[] | select(.type ==\
    \ \"Warning\" and (.involvedObject.kind == \"StatefulSet\" or .involvedObject.kind\
    \ == \"Pod\") and (.involvedObject.name | tostring | contains(\"${STATEFULSET_NAME}\"\
    )) and (.lastTimestamp | fromdateiso8601) >= $time_limit) | {kind: .involvedObject.kind,\
    \ name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:\
    \ .firstTimestamp, lastTimestamp: .lastTimestamp} ]')\n\n# Group the filtered\
    \ events by kind and name, and then extract relevant information\ngrouped_events=$(echo\
    \ $filtered_events | jq 'group_by([.kind, .name]) | map({kind: .[0].kind, name:\
    \ .[0].name, count: length, reasons: map(.reason) | unique, messages: map(.message)\
    \ | unique, firstTimestamp: map(.firstTimestamp | fromdateiso8601) | sort | .[0]\
    \ | todateiso8601, lastTimestamp: map(.lastTimestamp | fromdateiso8601) | sort\
    \ | reverse | .[0] | todateiso8601})')\n```"
  name: troubleshoot_statefulset_warning_events_for_statefulset_name
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type != "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}"))) | {kind: .involvedObject.kind, count:
    .count, name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:
    .firstTimestamp, lastTimestamp: .lastTimestamp, duration: (if (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601)) == 0) then 1 else (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601))/60) end) } ] | group_by([.kind,
    .name]) | map({kind: .[0].kind, name: .[0].name, count: (map(.count) | add), reasons:
    map(.reason) | unique, messages: map(.message) | unique, average_events_per_minute:
    (if .[0].duration == 1 then 1 else ((map(.count) | add)/.[0].duration ) end),firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    - [Kubernetes Event API](https://kubernetes.io/docs/reference/using-api/api-concepts/#events){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [JSON formatting in bash](https://linuxize.com/post/bash-json-processing-with-jq/){:target="_blank"}'
  explanation: This command retrieves events from a Kubernetes cluster, filters out
    certain types of events within a specific time range, and then formats the output
    into a JSON structure that provides information about the count, timing, and other
    details of those events at the StatefulSet or Pod level.
  multi_line_details: "```bash\n# Get events in JSON format for a specific context\
    \ and namespace\nkubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json\
    \ | \\\n    # Filter the events using jq, selecting only events that meet specific\
    \ criteria\n    jq '\n    # Calculate a time limit of 1 hour ago\n    (now - (60*60))\
    \ as $time_limit | \n        # Create an array of objects with specific information\
    \ for each filtered event\n        [ .items[] | \n            # Select events\
    \ with certain type, involved object kind, and name containing a certain value\n\
    \            select(.type != \"Warning\" and (.involvedObject.kind == \"StatefulSet\"\
    \ or .involvedObject.kind == \"Pod\") and (.involvedObject.name | tostring | contains(\"\
    ${STATEFULSET_NAME}\"))) | \n                # Extract specific fields from the\
    \ selected events\n                {kind: .involvedObject.kind, count: .count,\
    \ name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:\
    \ .firstTimestamp, lastTimestamp: .lastTimestamp, \n                    duration:\
    \ (if (((.lastTimestamp | fromdateiso8601) - (.firstTimestamp | fromdateiso8601))\
    \ == 0) then 1 else (((.lastTimestamp | fromdateiso8601) - (.firstTimestamp |\
    \ fromdateiso8601))/60) end)\n                } ] | \n                    # Group\
    \ the filtered events by kind and name\n                    group_by([.kind, .name])\
    \ | \n                        # Map the grouped events into a new structure\n\
    \                        map({kind: .[0].kind, name: .[0].name, count: (map(.count)\
    \ | add), reasons: map(.reason) | unique, messages: map(.message) | unique, average_events_per_minute:\
    \ \n                            (if .[0].duration == 1 then 1 else ((map(.count)\
    \ | add)/.[0].duration ) end),firstTimestamp: map(.firstTimestamp | fromdateiso8601)\
    \ | sort | .[0] | todateiso8601, \n                                lastTimestamp:\
    \ map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'\n\
    ```"
  name: check_statefulset_event_anomalies_for_statefulset_name
- command: kubectl logs --tail=100 statefulset/${STATEFULSET_NAME} --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Viewing Pods and Node Logs](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}

    - [Kubectl Command Reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}'
  explanation: This command allows you to view the logs of the pods within a statefulset
    in Kubernetes, displaying the last 100 lines of each pod's log. You can specify
    the context and namespace for the logs you want to view.
  multi_line_details: '```bash

    # Set the options for displaying the logs

    TAIL=100

    STATEFULSET_NAME=my-statefulset

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Use kubectl to display the last 100 lines of logs from the specified statefulset

    kubectl logs --tail=$TAIL statefulset/$STATEFULSET_NAME --context $CONTEXT -n
    $NAMESPACE

    ```'
  name: fetch_statefulset_statefulset_name_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "${STATEFULSET_NAME}" || true
  doc_links: '

    - [Grep Command Documentation](https://www.gnu.org/software/grep/manual/grep.html){:target="_blank"}

    - [Bash Exit Status Codes](https://tldp.org/LDP/abs/html/exitcodes.html){:target="_blank"}'
  explanation: This command retrieves all events with a warning type for a specified
    namespace and context, then filters the output to only include lines containing
    the statefulset name, and finally the "|| true" at the end ensures that the command
    exits with a success status code even if the grep doesn't find any matches.
  multi_line_details: '```shell

    # Set the context of the Kubernetes cluster to be used

    CONTEXT=${CONTEXT}

    # Set the namespace within the Kubernetes cluster to be used

    NAMESPACE=${NAMESPACE}


    # Use kubectl to get warning events in the specified namespace and context, then
    filter by the value in the STATEFULSET_NAME variable using case-insensitive grep.

    # If no output is returned from the grep command, do not exit with an error by
    appending ''|| true''

    kubectl get events --field-selector type=Warning --context ${CONTEXT} -n ${NAMESPACE}
    | grep -i "${STATEFULSET_NAME}" || true

    ```'
  name: get_related_statefulset_statefulset_name_events
- command: kubectl get statefulset ${LABELS} --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Retrieving a StatefulSet YAML configuration](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Contexts in Kubernetes](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the YAML configuration of a stateful set in
    a specific namespace and context, using specified labels for filtering.
  multi_line_details: '```shell

    # Set the kubernetes context

    CONTEXT=my-context


    # Set the namespace

    NAMESPACE=my-namespace


    # Get YAML for statefulset using specified labels, context, and namespace

    kubectl get statefulset ${LABELS} --context=${CONTEXT} -n ${NAMESPACE} -o yaml

    ```'
  name: fetch_statefulset_statefulset_name_manifest_details
- command: 'kubectl get statefulset -n ${NAMESPACE} -o json --context ${CONTEXT} |
    jq -r ''.items[] | select(.status.availableReplicas < .status.replicas) | "---\nStatefulSet
    Name: " + (.metadata.name|tostring) + "\nDesired Replicas: " + (.status.replicas|tostring)
    + "\nAvailable Replicas: " + (.status.availableReplicas|tostring)'''
  doc_links: '

    '
  explanation: This command uses kubectl to get the stateful sets in a specific namespace
    and context, then uses jq to filter and format the output to show the StatefulSet
    name, desired replicas, and available replicas for any stateful sets that have
    less available replicas than desired.
  multi_line_details: "```shell\n# Set the namespace variable\nNAMESPACE=example-namespace\n\
    # Set the context variable\nCONTEXT=example-context\n\n# Use kubectl to get the\
    \ statefulset in the specified namespace and output it in json format\nkubectl\
    \ get statefulset -n ${NAMESPACE} -o json --context ${CONTEXT} | \\\n  # Use jq\
    \ to filter the items based on the available replicas being less than the desired\
    \ replicas\n  jq -r '.items[] | select(.status.availableReplicas < .status.replicas)\
    \ | \n  # Output the statefulset name, desired replicas, and available replicas\
    \ in a specific format\n  \"---\\nStatefulSet Name: \" + (.metadata.name|tostring)\
    \ + \"\\nDesired Replicas: \" + (.status.replicas|tostring) + \"\\nAvailable Replicas:\
    \ \" + (.status.availableReplicas|tostring)'\n```\nThis multi-line command adds\
    \ comments to explain each step of the original one-line command. It sets the\
    \ namespace and context as variables, uses kubectl to get the statefulset in the\
    \ specified namespace and output it in json format, then uses jq to filter and\
    \ format the output accordingly. The multi-line format and comments make it easier\
    \ for generalists to understand and modify the command if needed."
  name: list_statefulsets_with_unhealthy_replica_counts_in_namespace_namespace
