commands:
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type == "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}")) and (.lastTimestamp | fromdateiso8601)
    >= $time_limit) | {kind: .involvedObject.kind, name: .involvedObject.name, reason:
    .reason, message: .message, firstTimestamp: .firstTimestamp, lastTimestamp: .lastTimestamp}
    ] | group_by([.kind, .name]) | map({kind: .[0].kind, name: .[0].name, count: length,
    reasons: map(.reason) | unique, messages: map(.message) | unique, firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    - [Retrieve events from a Kubernetes cluster](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Filtering events in Kubernetes](https://kubernetes.io/docs/concepts/cluster-administration/logging/#kubectl-logs-and-kubectl-events){:target="_blank"}

    - [Understanding StatefulSets in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Using kubectl to filter events](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-events){:target="_blank"}'
  explanation: This command retrieves events from a Kubernetes cluster and filters
    them to show only warning events related to a specific StatefulSet or Pod within
    the last hour, displaying relevant information such as the kind, name, reason,
    message, and timestamps of the events.
  multi_line_details: "# Get events from the specified context and namespace in JSON\
    \ format\nkubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json |\n\
    \  # Use jq to filter the events based on specific conditions and group them\n\
    \  jq '\n    # Set the time limit for the events (1 hour ago)\n    (now - (60*60))\
    \ as $time_limit |\n    # Select events that meet the criteria and transform the\
    \ output\n    [ .items[] | select(\n      .type == \"Warning\" and\n      (.involvedObject.kind\
    \ == \"StatefulSet\" or .involvedObject.kind == \"Pod\") and\n      (.involvedObject.name\
    \ | tostring | contains(\"${STATEFULSET_NAME}\")) and\n      (.lastTimestamp |\
    \ fromdateiso8601) >= $time_limit\n    ) | \n    {kind: .involvedObject.kind,\
    \ name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:\
    \ .firstTimestamp, lastTimestamp: .lastTimestamp} ] |\n    # Group the events\
    \ based on kind and name, then format the output\n    group_by([.kind, .name])\
    \ |\n    map({\n      kind: .[0].kind,\n      name: .[0].name,\n      count: length,\n\
    \      reasons: map(.reason) | unique,\n      messages: map(.message) | unique,\n\
    \      firstTimestamp: map(.firstTimestamp | fromdateiso8601) | sort | .[0] |\
    \ todateiso8601,\n      lastTimestamp: map(.lastTimestamp | fromdateiso8601) |\
    \ sort | reverse | .[0] | todateiso8601\n    })'"
  name: troubleshoot_statefulset_warning_events_for_statefulset_name
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type != "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}"))) | {kind: .involvedObject.kind, count:
    .count, name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:
    .firstTimestamp, lastTimestamp: .lastTimestamp, duration: (if (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601)) == 0) then 1 else (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601))/60) end) } ] | group_by([.kind,
    .name]) | map({kind: .[0].kind, name: .[0].name, count: (map(.count) | add), reasons:
    map(.reason) | unique, messages: map(.message) | unique, average_events_per_minute:
    (if .[0].duration == 1 then 1 else ((map(.count) | add)/.[0].duration ) end),firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    - [Kubernetes Event API](https://kubernetes.io/docs/reference/using-api/api-concepts/#events){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [JSON formatting in bash](https://linuxize.com/post/bash-json-processing-with-jq/){:target="_blank"}'
  explanation: This command retrieves events from a Kubernetes cluster, filters out
    certain types of events within a specific time range, and then formats the output
    into a JSON structure that provides information about the count, timing, and other
    details of those events at the StatefulSet or Pod level.
  multi_line_details: "# Set the timestamp for the time limit 1 hour ago\ntime_limit=$(now\
    \ - (60*60))\n\n# Get events in JSON format and use jq to filter and format the\
    \ data based on certain conditions\nkubectl get events --context ${CONTEXT} -n\
    \ ${NAMESPACE} -o json | jq '.items[] | \nselect(.type != \"Warning\" and (.involvedObject.kind\
    \ == \"StatefulSet\" or .involvedObject.kind == \"Pod\") and \n(.involvedObject.name\
    \ | tostring | contains(\"${STATEFULSET_NAME}\"))) | \n{\n    kind: .involvedObject.kind,\
    \ \n    count: .count, \n    name: .involvedObject.name, \n    reason: .reason,\
    \ \n    message: .message, \n    firstTimestamp: .firstTimestamp, \n    lastTimestamp:\
    \ .lastTimestamp, \n    duration: (if (((.lastTimestamp | fromdateiso8601) - (.firstTimestamp\
    \ | fromdateiso8601)) == 0) \n               then 1 \n               else (((.lastTimestamp\
    \ | fromdateiso8601) - (.firstTimestamp | fromdateiso8601))/60) \n           \
    \    end)\n}' | \n# Group the filtered data by kind and name, and then format\
    \ it into a new structure\ngroup_by([.kind, .name]) | \nmap({\n    kind: .[0].kind,\
    \ \n    name: .[0].name, \n    count: (map(.count) | add), \n    reasons: map(.reason)\
    \ | unique, \n    messages: map(.message) | unique, \n    average_events_per_minute:\
    \ (if .[0].duration == 1 \n                                then 1 \n         \
    \                       else ((map(.count) | add)/.[0].duration ) \n         \
    \                       end),\n    firstTimestamp: map(.firstTimestamp | fromdateiso8601)\
    \ | sort | .[0] | todateiso8601, \n    lastTimestamp: map(.lastTimestamp | fromdateiso8601)\
    \ | sort | reverse | .[0] | todateiso8601\n})"
  name: check_statefulset_event_anomalies_for_statefulset_name
- command: kubectl logs --tail=100 statefulset/${STATEFULSET_NAME} --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Viewing Pods and Node Logs](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}

    - [Kubectl Command Reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}'
  explanation: This command allows you to view the logs of the pods within a statefulset
    in Kubernetes, displaying the last 100 lines of each pod's log. You can specify
    the context and namespace for the logs you want to view.
  multi_line_details: '# Set the STATEFULSET_NAME variable

    STATEFULSET_NAME=my-statefulset

    # Set the CONTEXT variable

    CONTEXT=my-context

    # Set the NAMESPACE variable

    NAMESPACE=my-namespace


    # Get the logs for the specified statefulset with tailing of 100 lines

    kubectl logs --tail=100 statefulset/${STATEFULSET_NAME} \

    --context ${CONTEXT} -n ${NAMESPACE}'
  name: fetch_statefulset_statefulset_name_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "${STATEFULSET_NAME}" || true
  doc_links: '

    - [Grep Command Documentation](https://www.gnu.org/software/grep/manual/grep.html){:target="_blank"}

    - [Bash Exit Status Codes](https://tldp.org/LDP/abs/html/exitcodes.html){:target="_blank"}'
  explanation: This command retrieves all events with a warning type for a specified
    namespace and context, then filters the output to only include lines containing
    the statefulset name, and finally the "|| true" at the end ensures that the command
    exits with a success status code even if the grep doesn't find any matches.
  multi_line_details: "#!/bin/bash\n# This script retrieves events for a specific\
    \ context and namespace then filters by the StatefulSet name.\n\n# Retrieve events\
    \ for a specific context and namespace\nkubectl get events --field-selector type=Warning\
    \ --context ${CONTEXT} -n ${NAMESPACE} \\\n  # Filter the events by the StatefulSet\
    \ name\n  | grep -i \"${STATEFULSET_NAME}\" || true"
  name: get_related_statefulset_statefulset_name_events
- command: kubectl get statefulset ${LABELS} --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Retrieving a StatefulSet YAML configuration](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Contexts in Kubernetes](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the YAML configuration of a stateful set in
    a specific namespace and context, using specified labels for filtering.
  multi_line_details: "#!/bin/bash\n\n# This script retrieves the statefulset with\
    \ specific labels in a given namespace\n# and outputs the result in YAML format.\n\
    \n# Define variables\nLABELS=\"app=example\"\nCONTEXT=\"my-context\"\nNAMESPACE=\"\
    my-namespace\"\n\n# Execute kubectl command in multiple lines for better readability\n\
    kubectl get statefulset ${LABELS} \\\n  --context=${CONTEXT} \\\n  -n ${NAMESPACE}\
    \ \\\n  -o yaml"
  name: fetch_statefulset_statefulset_name_manifest_details
- command: 'kubectl get statefulset -n ${NAMESPACE} -o json --context ${CONTEXT} |
    jq -r ''.items[] | select(.status.availableReplicas < .status.replicas) | "---\nStatefulSet
    Name: " + (.metadata.name|tostring) + "\nDesired Replicas: " + (.status.replicas|tostring)
    + "\nAvailable Replicas: " + (.status.availableReplicas|tostring)'''
  doc_links: '

    '
  explanation: This command uses kubectl to get the stateful sets in a specific namespace
    and context, then uses jq to filter and format the output to show the StatefulSet
    name, desired replicas, and available replicas for any stateful sets that have
    less available replicas than desired.
  multi_line_details: '#!/bin/bash


    # Get statefulset details in JSON format

    statefulset_details=$(kubectl get statefulset -n ${NAMESPACE} -o json --context
    ${CONTEXT})


    # Filter the statefulset details using jq to find those with availableReplicas
    < replicas

    filtered_statefulsets=$(echo $statefulset_details | jq -r ''.items[] | select(.status.availableReplicas
    < .status.replicas)'')


    # Print out the filtered statefulset details

    echo $filtered_statefulsets | jq -r ''"---\nStatefulSet Name: " + (.metadata.name|tostring)
    + "\nDesired Replicas: " + (.status.replicas|tostring) + "\nAvailable Replicas:
    " + (.status.availableReplicas|tostring)'''
  name: list_statefulsets_with_unhealthy_replica_counts_in_namespace_namespace
