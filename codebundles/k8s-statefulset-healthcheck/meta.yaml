commands:
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type == "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}")) and (.lastTimestamp | fromdateiso8601)
    >= $time_limit) | {kind: .involvedObject.kind, name: .involvedObject.name, reason:
    .reason, message: .message, firstTimestamp: .firstTimestamp, lastTimestamp: .lastTimestamp}
    ] | group_by([.kind, .name]) | map({kind: .[0].kind, name: .[0].name, count: length,
    reasons: map(.reason) | unique, messages: map(.message) | unique, firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: troubleshoot_statefulset_warning_events_for_statefulset_name
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type == "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}")) and (.lastTimestamp | fromdateiso8601)
    >= $time_limit) | {kind: .involvedObject.kind, name: .involvedObject.name, reason:
    .reason, message: .message, firstTimestamp: .firstTimestamp, lastTimestamp: .lastTimestamp}
    ] | group_by([.kind, .name]) | map({kind: .[0].kind, name: .[0].name, count: length,
    reasons: map(.reason) | unique, messages: map(.message) | unique, firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: troubleshoot_statefulset_warning_events_for_statefulset_name
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type != "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}"))) | {kind: .involvedObject.kind, count:
    .count, name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:
    .firstTimestamp, lastTimestamp: .lastTimestamp, duration: (if (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601)) == 0) then 1 else (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601))/60) end) } ] | group_by([.kind,
    .name]) | map({kind: .[0].kind, name: .[0].name, count: (map(.count) | add), reasons:
    map(.reason) | unique, messages: map(.message) | unique, average_events_per_minute:
    (if .[0].duration == 1 then 1 else ((map(.count) | add)/.[0].duration ) end),firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: check_statefulset_event_anomalies_for_statefulset_name
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type != "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}"))) | {kind: .involvedObject.kind, count:
    .count, name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:
    .firstTimestamp, lastTimestamp: .lastTimestamp, duration: (if (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601)) == 0) then 1 else (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601))/60) end) } ] | group_by([.kind,
    .name]) | map({kind: .[0].kind, name: .[0].name, count: (map(.count) | add), reasons:
    map(.reason) | unique, messages: map(.message) | unique, average_events_per_minute:
    (if .[0].duration == 1 then 1 else ((map(.count) | add)/.[0].duration ) end),firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: check_statefulset_event_anomalies_for_statefulset_name
- command: kubectl logs --tail=100 statefulset/${STATEFULSET_NAME} --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: fetch_statefulset_logs_for_statefulset_name
- command: kubectl logs --tail=100 statefulset/${STATEFULSET_NAME} --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: fetch_statefulset_logs_for_statefulset_name
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "${STATEFULSET_NAME}" || true
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: get_related_statefulset_statefulset_name_events
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "${STATEFULSET_NAME}" || true
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: get_related_statefulset_statefulset_name_events
- command: kubectl get statefulset ${LABELS} --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: fetch_manifest_details_for_statefulset_statefulset_name
- command: kubectl get statefulset ${LABELS} --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: fetch_manifest_details_for_statefulset_statefulset_name
- command: 'kubectl get statefulset -n ${NAMESPACE} -o json --context ${CONTEXT} |
    jq -r ''.items[] | select(.status.availableReplicas < .status.replicas) | "---\nStatefulSet
    Name: " + (.metadata.name|tostring) + "\nDesired Replicas: " + (.status.replicas|tostring)
    + "\nAvailable Replicas: " + (.status.availableReplicas|tostring)'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: list_statefulsets_with_unhealthy_replica_counts_in_namespace_namespace
- command: 'kubectl get statefulset -n ${NAMESPACE} -o json --context ${CONTEXT} |
    jq -r ''.items[] | select(.status.availableReplicas < .status.replicas) | "---\nStatefulSet
    Name: " + (.metadata.name|tostring) + "\nDesired Replicas: " + (.status.replicas|tostring)
    + "\nAvailable Replicas: " + (.status.availableReplicas|tostring)'''
  doc_links: '

    Documentation links not available'
  explanation: Explanation not available
  multi_line_details: Multi-line script not available
  name: list_statefulsets_with_unhealthy_replica_counts_in_namespace_namespace
