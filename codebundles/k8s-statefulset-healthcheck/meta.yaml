commands:
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type == "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}")) and (.lastTimestamp | fromdateiso8601)
    >= $time_limit) | {kind: .involvedObject.kind, name: .involvedObject.name, reason:
    .reason, message: .message, firstTimestamp: .firstTimestamp, lastTimestamp: .lastTimestamp}
    ] | group_by([.kind, .name]) | map({kind: .[0].kind, name: .[0].name, count: length,
    reasons: map(.reason) | unique, messages: map(.message) | unique, firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    - [Retrieve events from a Kubernetes cluster](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Filtering events in Kubernetes](https://kubernetes.io/docs/concepts/cluster-administration/logging/#kubectl-logs-and-kubectl-events){:target="_blank"}

    - [Understanding StatefulSets in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Using kubectl to filter events](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get-events){:target="_blank"}'
  explanation: This command retrieves events from a Kubernetes cluster and filters
    them to show only warning events related to a specific StatefulSet or Pod within
    the last hour, displaying relevant information such as the kind, name, reason,
    message, and timestamps of the events.
  multi_line_details: "```bash\n# Use kubectl get events to fetch the events logs\
    \ for a given namespace specified by -n flag\n# Also, use json format to output\
    \ the data making it more suitable for jq refiner\nkubectl get events --context\
    \ ${CONTEXT} -n ${NAMESPACE} -o json \\\n\n# Pipe the result of the above command\
    \ to a jq refinements which takes current system time,\n# subtracts an hour of\
    \ time from the system time and sets this new calculated time as $time_limit \n\
    | jq '(now - (60*60)) as $time_limit |\n\n# Filter only the warning events for\
    \ StatefulSet or Pod kind and name containing ${STATEFULSET_NAME}\n# Select only\
    \ the event that has happened after the new $time_limit\n[ .items[] | \n    select(.type\
    \ == \"Warning\" \n        and (.involvedObject.kind == \"StatefulSet\" or .involvedObject.kind\
    \ == \"Pod\") \n        and (.involvedObject.name | tostring | contains(\"${STATEFULSET_NAME}\"\
    )) \n        and (.lastTimestamp | fromdateiso8601) >= $time_limit) |\n\n# Only\
    \ display certain details of the selected events such as kind, name, reason, message,\
    \ first timestamp, last timestamp  \n    {kind: .involvedObject.kind,\n     name:\
    \ .involvedObject.name, \n     reason: .reason, \n     message: .message, \n \
    \    firstTimestamp: .firstTimestamp, \n     lastTimestamp: .lastTimestamp} ]\
    \ |\n\n# group selected events by kind and name and display count, reasons, messages,\
    \ first and last timestamps\ngroup_by([.kind, .name]) |\nmap({kind: .[0].kind,\n\
    \     name: .[0].name, \n     count: length, \n     reasons: map(.reason) | unique,\
    \ \n     messages: map(.message) | unique, \n     firstTimestamp: map(.firstTimestamp\
    \ | fromdateiso8601) | sort | .[0] | todateiso8601, \n     lastTimestamp: map(.lastTimestamp\
    \ | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})\n```\nThis multi-line\
    \ version of the command includes verbose comments to help new Kubernetes users\
    \ understand each part of the original one-line command and how it processes the\
    \ events."
  name: troubleshoot_statefulset_warning_events_for_statefulset_name
- command: 'kubectl get events --context ${CONTEXT} -n ${NAMESPACE} -o json | jq ''(now
    - (60*60)) as $time_limit | [ .items[] | select(.type != "Warning" and (.involvedObject.kind
    == "StatefulSet" or .involvedObject.kind == "Pod") and (.involvedObject.name |
    tostring | contains("${STATEFULSET_NAME}"))) | {kind: .involvedObject.kind, count:
    .count, name: .involvedObject.name, reason: .reason, message: .message, firstTimestamp:
    .firstTimestamp, lastTimestamp: .lastTimestamp, duration: (if (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601)) == 0) then 1 else (((.lastTimestamp
    | fromdateiso8601) - (.firstTimestamp | fromdateiso8601))/60) end) } ] | group_by([.kind,
    .name]) | map({kind: .[0].kind, name: .[0].name, count: (map(.count) | add), reasons:
    map(.reason) | unique, messages: map(.message) | unique, average_events_per_minute:
    (if .[0].duration == 1 then 1 else ((map(.count) | add)/.[0].duration ) end),firstTimestamp:
    map(.firstTimestamp | fromdateiso8601) | sort | .[0] | todateiso8601, lastTimestamp:
    map(.lastTimestamp | fromdateiso8601) | sort | reverse | .[0] | todateiso8601})'''
  doc_links: '

    - [Kubernetes Event API](https://kubernetes.io/docs/reference/using-api/api-concepts/#events){:target="_blank"}

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [JSON formatting in bash](https://linuxize.com/post/bash-json-processing-with-jq/){:target="_blank"}'
  explanation: This command retrieves events from a Kubernetes cluster, filters out
    certain types of events within a specific time range, and then formats the output
    into a JSON structure that provides information about the count, timing, and other
    details of those events at the StatefulSet or Pod level.
  multi_line_details: "```bash\n# Set the context to the specified Kubernetes cluster\n\
    kubectl config use-context ${CONTEXT}\n\n# Get events from the specified namespace\
    \ in JSON format\nkubectl get events -n ${NAMESPACE} -o json | \n\n# Use jq to\
    \ process and format the output\njq '\n  # Calculate a time limit (one hour ago)\
    \ for filtering events\n  (now - (60*60)) as $time_limit |\n\n  # Filter and transform\
    \ the JSON data\n  [\n    .items[] |\n    select(\n      .type != \"Warning\"\
    \ and \n      (.involvedObject.kind == \"StatefulSet\" or .involvedObject.kind\
    \ == \"Pod\") and \n      (.involvedObject.name | tostring | contains(\"${STATEFULSET_NAME}\"\
    ))\n    ) |\n    {\n      kind: .involvedObject.kind,\n      count: .count,\n\
    \      name: .involvedObject.name,\n      reason: .reason,\n      message: .message,\n\
    \      firstTimestamp: .firstTimestamp,\n      lastTimestamp: .lastTimestamp,\n\
    \      duration: (if (((.lastTimestamp | fromdateiso8601) - (.firstTimestamp |\
    \ fromdateiso8601)) == 0)\n        then 1 else (((.lastTimestamp | fromdateiso8601)\
    \ - (.firstTimestamp | fromdateiso8601))/60) end)\n    }\n  ] |\n\n  # Group the\
    \ filtered data by kind and name\n  group_by([.kind, .name]) |\n\n  # Map and\
    \ calculate aggregated event details\n  map({\n    kind: .[0].kind, \n    name:\
    \ .[0].name, \n    count: (map(.count) | add), \n    reasons: map(.reason) | unique,\
    \ \n    messages: map(.message) | unique, \n    average_events_per_minute: (if\
    \ .[0].duration == 1 \n      then 1 else ((map(.count) | add)/.[0].duration )\
    \ end),\n    firstTimestamp: map(.firstTimestamp | fromdateiso8601) | sort | .[0]\
    \ | todateiso8601,\n    lastTimestamp: map(.lastTimestamp | fromdateiso8601) |\
    \ sort | reverse | .[0] | todateiso8601\n  })'\n```"
  name: check_statefulset_event_anomalies_for_statefulset_name
- command: kubectl logs --tail=100 statefulset/${STATEFULSET_NAME} --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Viewing Pods and Node Logs](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}

    - [Kubectl Command Reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}'
  explanation: This command allows you to view the logs of the pods within a statefulset
    in Kubernetes, displaying the last 100 lines of each pod's log. You can specify
    the context and namespace for the logs you want to view.
  multi_line_details: "# Obtain the logs from a StatefulSet in a specific namespace\
    \ using the specified context\nkubectl logs --tail=100  # Display the last 100\
    \ lines of logs  \nstatefulset/${STATEFULSET_NAME}  # Specify the StatefulSet\
    \ name as part of the command\n--context ${CONTEXT}  # Specify the Kubernetes\
    \ context to use for this operation\n-n ${NAMESPACE}  # Specify the namespace\
    \ where the StatefulSet is located"
  name: fetch_statefulset_statefulset_name_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "${STATEFULSET_NAME}" || true
  doc_links: '

    - [Grep Command Documentation](https://www.gnu.org/software/grep/manual/grep.html){:target="_blank"}

    - [Bash Exit Status Codes](https://tldp.org/LDP/abs/html/exitcodes.html){:target="_blank"}'
  explanation: This command retrieves all events with a warning type for a specified
    namespace and context, then filters the output to only include lines containing
    the statefulset name, and finally the "|| true" at the end ensures that the command
    exits with a success status code even if the grep doesn't find any matches.
  multi_line_details: '```bash

    # Get events for a specific context and namespace in Kubernetes

    echo "Getting events for the ${CONTEXT} context and ${NAMESPACE} namespace"


    # Use kubectl to get all events with type Warning

    events=$(kubectl get events --field-selector type=Warning --context ${CONTEXT}
    -n ${NAMESPACE})


    # Use grep to filter events related to a specific statefulset name

    filtered_events=$(echo "${events}" | grep -i "${STATEFULSET_NAME}")


    # Print the filtered events or ignore errors if no events are found

    echo "${filtered_events}" || true

    ```'
  name: get_related_statefulset_statefulset_name_events
- command: kubectl get statefulset ${LABELS} --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Retrieving a StatefulSet YAML configuration](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Contexts in Kubernetes](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the YAML configuration of a stateful set in
    a specific namespace and context, using specified labels for filtering.
  multi_line_details: '# Step 1: Retrieve the statefulset with specified labels

    statefulset_labels="${LABELS}"


    # Step 2: Set the Kubernetes context for the command

    kubectl_context="${CONTEXT}"


    # Step 3: Specify the namespace for the statefulset

    namespace="${NAMESPACE}"


    # Step 4: Get the statefulset in YAML format with verbose output

    kubectl get statefulset $statefulset_labels --context=$kubectl_context -n $namespace
    -o yaml'
  name: fetch_statefulset_statefulset_name_manifest_details
- command: 'kubectl get statefulset -n ${NAMESPACE} -o json --context ${CONTEXT} |
    jq -r ''.items[] | select(.status.availableReplicas < .status.replicas) | "---\nStatefulSet
    Name: " + (.metadata.name|tostring) + "\nDesired Replicas: " + (.status.replicas|tostring)
    + "\nAvailable Replicas: " + (.status.availableReplicas|tostring)'''
  doc_links: '

    '
  explanation: This command uses kubectl to get the stateful sets in a specific namespace
    and context, then uses jq to filter and format the output to show the StatefulSet
    name, desired replicas, and available replicas for any stateful sets that have
    less available replicas than desired.
  multi_line_details: "```yaml\n# Use kubectl command to get the statefulset details\
    \ in the specified namespace and output it in JSON format\nkubectl get statefulset\
    \ -n ${NAMESPACE} -o json --context ${CONTEXT} \n  # Pipe the output to jq command\
    \ to filter and format the JSON data\n  | jq -r '.items[] | select(.status.availableReplicas\
    \ < .status.replicas) \n    # For each filtered statefulset, print out its name,\
    \ desired replicas, and available replicas\n    | \"---\\nStatefulSet Name: \"\
    \ + (.metadata.name|tostring) + \"\\nDesired Replicas: \" + (.status.replicas|tostring)\
    \ + \"\\nAvailable Replicas: \" + (.status.availableReplicas|tostring)'\n```"
  name: list_statefulsets_with_unhealthy_replica_counts_in_namespace_namespace
