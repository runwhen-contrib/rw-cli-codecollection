commands:
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubectl command documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Namespace documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Context documentation](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Logging in Kubernetes](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}'
  explanation: This command is used to retrieve the logs for the daemonset "vault-csi-provider"
    within the specified namespace and context, displaying the last 100 lines of logs.
  multi_line_details: '

    # Set the context and namespace for the kubectl command

    CONTEXT="example-context"

    NAMESPACE="example-namespace"


    # Use kubectl logs to retrieve the logs of a specific DaemonSet

    # --tail=100 flag limits the number of lines to 100 for each container log

    # daemonset.apps/vault-csi-provider specifies the DaemonSet resource to retrieve
    logs from

    # --context ${CONTEXT} specifies the Kubernetes context to use for the command

    # -n ${NAMESPACE} specifies the namespace where the DaemonSet is located

    kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}

    '
  name: fetch_vault_csi_driver_logs
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubectl command documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Namespace documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Context documentation](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Logging in Kubernetes](https://kubernetes.io/docs/concepts/cluster-administration/logging/){:target="_blank"}'
  explanation: This command is used to retrieve the logs for the daemonset "vault-csi-provider"
    within the specified namespace and context, displaying the last 100 lines of logs.
  multi_line_details: '

    # Set the context and namespace for the kubectl command

    CONTEXT="example-context"

    NAMESPACE="example-namespace"


    # Use kubectl logs to retrieve the logs of a specific DaemonSet

    # --tail=100 flag limits the number of lines to 100 for each container log

    # daemonset.apps/vault-csi-provider specifies the DaemonSet resource to retrieve
    logs from

    # --context ${CONTEXT} specifies the Kubernetes context to use for the command

    # -n ${NAMESPACE} specifies the namespace where the DaemonSet is located

    kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}

    '
  name: fetch_vault_csi_driver_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    '
  explanation: This command retrieves warning events related to the "vault-csi-provider"
    in the specified Kubernetes context and namespace, and uses grep to filter the
    results. If no matching events are found, it returns a success status.
  multi_line_details: "# Get events from a specific context and namespace\n# Use the\
    \ kubectl command to get events with a warning type in a specific context and\
    \ namespace\n# Replace ${CONTEXT} with the actual context name and ${NAMESPACE}\
    \ with the actual namespace\nkubectl get events --field-selector type=Warning\
    \ --context ${CONTEXT} -n ${NAMESPACE} \n\n# Filter the events for \"vault-csi-provider\"\
    \ using grep\n# Use the grep command to filter the events for any mention of \"\
    vault-csi-provider\"\ngrep -i \"vault-csi-provider\"\n\n# Ignore any errors from\
    \ the grep command\n# Add \"|| true\" at the end to ensure the overall command\
    \ returns a success status, even if the grep command does not find a match\n||\
    \ true"
  name: get_vault_csi_driver_warning_events
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    '
  explanation: This command retrieves warning events related to the "vault-csi-provider"
    in the specified Kubernetes context and namespace, and uses grep to filter the
    results. If no matching events are found, it returns a success status.
  multi_line_details: "# Get events from a specific context and namespace\n# Use the\
    \ kubectl command to get events with a warning type in a specific context and\
    \ namespace\n# Replace ${CONTEXT} with the actual context name and ${NAMESPACE}\
    \ with the actual namespace\nkubectl get events --field-selector type=Warning\
    \ --context ${CONTEXT} -n ${NAMESPACE} \n\n# Filter the events for \"vault-csi-provider\"\
    \ using grep\n# Use the grep command to filter the events for any mention of \"\
    vault-csi-provider\"\ngrep -i \"vault-csi-provider\"\n\n# Ignore any errors from\
    \ the grep command\n# Add \"|| true\" at the end to ensure the overall command\
    \ returns a success status, even if the grep command does not find a match\n||\
    \ true"
  name: get_vault_csi_driver_warning_events
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Contexts documentation](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubernetes Namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to provide detailed information about a specific
    daemonset called "vault-csi-provider" in the specified context and namespace within
    a Kubernetes cluster. It can be helpful for troubleshooting and understanding
    the configuration of the daemonset.
  multi_line_details: '

    # This command is used to describe a DaemonSet in Kubernetes, providing detailed
    information about the specified DaemonSet


    # Set the context for the Kubernetes cluster where the DaemonSet is located

    CONTEXT=my-kube-context


    # Set the namespace where the DaemonSet is deployed

    NAMESPACE=my-namespace


    # Use kubectl to describe the specified DaemonSet, providing context and namespace
    flags

    kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT} -n ${NAMESPACE}

    '
  name: check_vault_csi_driver_replicas
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes DaemonSet documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Kubernetes Contexts documentation](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubernetes Namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to provide detailed information about a specific
    daemonset called "vault-csi-provider" in the specified context and namespace within
    a Kubernetes cluster. It can be helpful for troubleshooting and understanding
    the configuration of the daemonset.
  multi_line_details: '

    # This command is used to describe a DaemonSet in Kubernetes, providing detailed
    information about the specified DaemonSet


    # Set the context for the Kubernetes cluster where the DaemonSet is located

    CONTEXT=my-kube-context


    # Set the namespace where the DaemonSet is deployed

    NAMESPACE=my-namespace


    # Use kubectl to describe the specified DaemonSet, providing context and namespace
    flags

    kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT} -n ${NAMESPACE}

    '
  name: check_vault_csi_driver_replicas
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [kubectl command line interface](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes clusters](https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/){:target="_blank"}

    - [StatefulSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes context](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubernetes namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command uses kubectl, the command line interface for running commands
    against Kubernetes clusters, to display the last 100 lines of logs for a specific
    statefulset named "vault" in the specified context and namespace.
  multi_line_details: '

    # Here we are using kubectl to view the logs of a statefulset in a Kubernetes
    cluster.

    # We are tailing the last 100 lines of the logs for the "vault" statefulset.


    # The "--context" flag allows us to specify the name of the kubeconfig context
    to use.

    # This is useful when managing multiple Kubernetes clusters.


    # The "-n" flag specifies the namespace in which the statefulset is running.


    # Replace ${CONTEXT} with the actual context name, and replace ${NAMESPACE} with
    the actual namespace name.


    kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n ${NAMESPACE}

    '
  name: fetch_vault_logs
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [kubectl command line interface](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes clusters](https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/){:target="_blank"}

    - [StatefulSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes context](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubernetes namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command uses kubectl, the command line interface for running commands
    against Kubernetes clusters, to display the last 100 lines of logs for a specific
    statefulset named "vault" in the specified context and namespace.
  multi_line_details: '

    # Here we are using kubectl to view the logs of a statefulset in a Kubernetes
    cluster.

    # We are tailing the last 100 lines of the logs for the "vault" statefulset.


    # The "--context" flag allows us to specify the name of the kubeconfig context
    to use.

    # This is useful when managing multiple Kubernetes clusters.


    # The "-n" flag specifies the namespace in which the statefulset is running.


    # Replace ${CONTEXT} with the actual context name, and replace ${NAMESPACE} with
    the actual namespace name.


    kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n ${NAMESPACE}

    '
  name: fetch_vault_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Vault Documentation](https://www.vaultproject.io/docs){:target="_blank"}

    - [Ignoring Errors in Command Execution](https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_06_02.html){:target="_blank"}'
  explanation: This command retrieves warning events related to the "vault" in a specific
    Kubernetes context and namespace, and it also ignores any errors that may occur
    during the execution.
  multi_line_details: "\n# Retrieve Kubernetes events pertaining to warnings in a\
    \ specific namespace and context\n# Store the context and namespace in variables\
    \ for easier reusability\n\n# Use kubectl command to get events with type \"Warning\"\
    \ in the specified namespace and context\nkubectl get events --field-selector\
    \ type=Warning --context ${CONTEXT} -n ${NAMESPACE} \n\n# Use grep to filter out\
    \ events containing the keyword \"vault\"\n# Use the || true operator to ensure\
    \ that the overall command returns a successful exit code even if grep does not\
    \ find any matches\n| grep -i \"vault\" || true\n"
  name: get_related_vault_events
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Vault Documentation](https://www.vaultproject.io/docs){:target="_blank"}

    - [Ignoring Errors in Command Execution](https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_06_02.html){:target="_blank"}'
  explanation: This command retrieves warning events related to the "vault" in a specific
    Kubernetes context and namespace, and it also ignores any errors that may occur
    during the execution.
  multi_line_details: "\n# Retrieve Kubernetes events pertaining to warnings in a\
    \ specific namespace and context\n# Store the context and namespace in variables\
    \ for easier reusability\n\n# Use kubectl command to get events with type \"Warning\"\
    \ in the specified namespace and context\nkubectl get events --field-selector\
    \ type=Warning --context ${CONTEXT} -n ${NAMESPACE} \n\n# Use grep to filter out\
    \ events containing the keyword \"vault\"\n# Use the || true operator to ensure\
    \ that the overall command returns a successful exit code even if grep does not\
    \ find any matches\n| grep -i \"vault\" || true\n"
  name: get_related_vault_events
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    '
  explanation: This command uses kubectl to retrieve the configuration of the statefulset
    named "vault" in the specified namespace, and outputs it as YAML format. The --context
    flag specifies which Kubernetes cluster to use.
  multi_line_details: '

    # This command is used to retrieve the YAML configuration for a specific StatefulSet
    in the Kubernetes cluster.


    # Set the context to be used for the operation

    CONTEXT=my-context

    # Set the namespace where the StatefulSet is located

    NAMESPACE=my-namespace


    # Use kubectl to get the YAML configuration of the StatefulSet named ''vault''
    in the specified context and namespace

    kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE} -o yaml

    '
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    '
  explanation: This command uses kubectl to retrieve the configuration of the statefulset
    named "vault" in the specified namespace, and outputs it as YAML format. The --context
    flag specifies which Kubernetes cluster to use.
  multi_line_details: '

    # This command is used to retrieve the YAML configuration for a specific StatefulSet
    in the Kubernetes cluster.


    # Set the context to be used for the operation

    CONTEXT=my-context

    # Set the namespace where the StatefulSet is located

    NAMESPACE=my-namespace


    # Use kubectl to get the YAML configuration of the StatefulSet named ''vault''
    in the specified context and namespace

    kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE} -o yaml

    '
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Kubernetes kubectl Command](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes DaemonSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [YAML Format Documentation](https://yaml.org/spec/1.2/spec.html){:target="_blank"}'
  explanation: This command retrieves the configuration for a specific daemonset called
    "vault-csi-provider" in the specified namespace, and outputs it in YAML format
    using the Kubernetes command-line tool (kubectl) with the specified context.
  multi_line_details: "\n# Here we are using the kubectl command to get a DaemonSet\
    \ resource in YAML format. \n# The --context flag allows us to specify which Kubernetes\
    \ context to use, \n# and the -n flag specifies the namespace where the DaemonSet\
    \ is located.\n\n# First, set the variables for the context and namespace\nCONTEXT=my-kubernetes-context\n\
    NAMESPACE=my-namespace\n\n# Then, run the kubectl command with the specified flags\
    \ and options\nkubectl get daemonset.apps/vault-csi-provider \\\n  --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  -o yaml\n"
  name: fetch_vault_daemonset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Kubernetes kubectl Command](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes DaemonSet Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [YAML Format Documentation](https://yaml.org/spec/1.2/spec.html){:target="_blank"}'
  explanation: This command retrieves the configuration for a specific daemonset called
    "vault-csi-provider" in the specified namespace, and outputs it in YAML format
    using the Kubernetes command-line tool (kubectl) with the specified context.
  multi_line_details: "\n# Here we are using the kubectl command to get a DaemonSet\
    \ resource in YAML format. \n# The --context flag allows us to specify which Kubernetes\
    \ context to use, \n# and the -n flag specifies the namespace where the DaemonSet\
    \ is located.\n\n# First, set the variables for the context and namespace\nCONTEXT=my-kubernetes-context\n\
    NAMESPACE=my-namespace\n\n# Then, run the kubectl command with the specified flags\
    \ and options\nkubectl get daemonset.apps/vault-csi-provider \\\n  --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  -o yaml\n"
  name: fetch_vault_daemonset_manifest_details
- command: curl ${VAULT_URL}
  doc_links: '

    - [cURL Documentation](https://curl.se/docs/){:target="_blank"}

    - [HTTP Request Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods){:target="_blank"}

    - [Vault Documentation](https://www.vaultproject.io/docs){:target="_blank"}'
  explanation: This command is using the cURL tool to send a request to a server at
    the specified VAULT_URL, likely to retrieve or manipulate data stored in a secure
    repository.
  multi_line_details: "# We're using curl to make a request to a vault server \n#\
    \ where ${VAULT_URL} is the URL of the vault server we want to access\n\ncurl\
    \ ${VAULT_URL}\n"
  name: verify_vault_availability
- command: curl ${VAULT_URL}
  doc_links: '

    - [cURL Documentation](https://curl.se/docs/){:target="_blank"}

    - [HTTP Request Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods){:target="_blank"}

    - [Vault Documentation](https://www.vaultproject.io/docs){:target="_blank"}'
  explanation: This command is using the cURL tool to send a request to a server at
    the specified VAULT_URL, likely to retrieve or manipulate data stored in a secure
    repository.
  multi_line_details: "# We're using curl to make a request to a vault server \n#\
    \ where ${VAULT_URL} is the URL of the vault server we want to access\n\ncurl\
    \ ${VAULT_URL}\n"
  name: verify_vault_availability
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [JSON output format in kubectl](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command retrieves the details of a StatefulSet named 'vault' in
    the specified namespace and context, and outputs the information in JSON format.
  multi_line_details: '

    # Use kubectl to get the information about the statefulset named vault

    # Set the context by replacing ${CONTEXT} with the actual context name

    # Set the namespace by replacing ${NAMESPACE} with the actual namespace

    # Output the results in JSON format


    kubectl get statefulset.apps/vault \

    --context=${CONTEXT} \

    -n ${NAMESPACE} \

    -o json

    '
  name: check_vault_statefulset_replicas
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [JSON output format in kubectl](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}'
  explanation: This command retrieves the details of a StatefulSet named 'vault' in
    the specified namespace and context, and outputs the information in JSON format.
  multi_line_details: '

    # Use kubectl to get the information about the statefulset named vault

    # Set the context by replacing ${CONTEXT} with the actual context name

    # Set the namespace by replacing ${NAMESPACE} with the actual namespace

    # Output the results in JSON format


    kubectl get statefulset.apps/vault \

    --context=${CONTEXT} \

    -n ${NAMESPACE} \

    -o json

    '
  name: check_vault_statefulset_replicas
