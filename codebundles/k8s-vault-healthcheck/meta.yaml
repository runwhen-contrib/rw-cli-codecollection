commands:
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubectl logs reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Vault CSI Provider documentation](https://www.vaultproject.io/docs/platform/k8s/csi){:target="_blank"}'
  explanation: "This command is used to view the logs of an application running as\
    \ a DaemonSet in a Kubernetes cluster. \n\nHere's a breakdown of the command:\n\
    \n- `kubectl`: This is the command line interface for running commands against\
    \ Kubernetes clusters.\n- `logs`: This sub-command is used to view the logs of\
    \ a specific pod or pods in a deployment, statefulset, or daemonset.\n- `--tail=100`:\
    \ This flag specifies that you want to see the last 100 lines of the logs. You\
    \ can adjust this number to see more or fewer lines.\n- `daemonset.apps/vault-csi-provider`:\
    \ This is the name of the DaemonSet and the application within it whose logs you\
    \ want to view.\n- `--context ${CONTEXT}`: This flag specifies the context, which\
    \ is the cluster, user, and namespace that kubectl will use to execute the command.\
    \ You need to replace `${CONTEXT}` with the actual context name.\n- `-n ${NAMESPACE}`:\
    \ This flag specifies the namespace in which the DaemonSet is running. You need\
    \ to replace `${NAMESPACE}` with the actual namespace name.\n\nWhen you run this\
    \ command, it will return the last 100 lines of logs from the specified DaemonSet.\
    \ This can be helpful for troubleshooting issues or monitoring the behavior of\
    \ the application."
  multi_line_details: '# Set the context to a specific Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Specify the namespace where the daemonset is running

    NAMESPACE=${NAMESPACE}


    # Set the daemonset name and get logs with last 100 lines from the specified namespace

    kubectl logs --tail=100 daemonset.apps/vault-csi-provider -n ${NAMESPACE}'
  name: fetch_vault_csi_driver_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    - [Kubectl get events documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}

    - [Kubectl field selector documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/){:target="_blank"}

    - [Kubectl contexts documentation](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubectl namespaces documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [How to use grep command in Unix/Linux](https://www.geeksforgeeks.org/grep-command-in-unixlinux/){:target="_blank"}'
  explanation: "This command is used in Kubernetes to get a list of events that have\
    \ occurred in a specific namespace under a specific context. Events are notifications\
    \ about changes or problems in the cluster.\n\nHere's what each part of the command\
    \ does:\n\n- kubectl: This is the command-line tool used to interact with Kubernetes\
    \ clusters.\n- get events: This part of the command tells Kubernetes that we want\
    \ to retrieve events from the cluster.\n- --field-selector type=Warning: This\
    \ part of the command filters the events to only show those of type \"Warning\"\
    . This is helpful for focusing on potentially problematic events.\n- --context\
    \ ${CONTEXT}: This specifies the context within Kubernetes to use. The context\
    \ represents a cluster, user, and namespace combination. \n- -n ${NAMESPACE}:\
    \ This option specifies the namespace in which to look for events. Namespaces\
    \ are virtual clusters within the actual Kubernetes cluster, and they can be used\
    \ to organize resources.\n- | grep -i \"vault-csi-provider\" || true: This part\
    \ of the command pipes the output of the previous command (the events) into the\
    \ `grep` command, which searches for lines containing \"vault-csi-provider\" while\
    \ ignoring case (-i option). The `|| true` at the end ensures that the command\
    \ returns a successful exit status regardless of whether the search term was found\
    \ or not.\n\nIn summary, this command fetches warning events from a specific namespace\
    \ within a specific context and then uses `grep` to filter those events based\
    \ on a specific keyword related to the vault-csi-provider. It's a helpful command\
    \ for monitoring and troubleshooting issues in a Kubernetes environment."
  multi_line_details: '```bash

    # Set the Kubernetes context to the specified ${CONTEXT}

    kubectl config use-context ${CONTEXT}


    # Retrieve events from the current context and filter for events of type Warning
    in the specified namespace ${NAMESPACE}

    kubectl get events --field-selector type=Warning -n ${NAMESPACE}


    # Pipe the output to grep and perform a case-insensitive search for "vault-csi-provider"

    grep -i "vault-csi-provider"


    # Using the || true syntax ensures that the command will return a successful exit
    code even if grep does not find a match

    || true

    ```'
  name: get_vault_csi_driver_warning_events
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubectl describe](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#describe){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Contexts in kubectl](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Namespaces in Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: 'This command is using kubectl, which is a command-line tool for interacting
    with Kubernetes clusters. In this specific command, we are using it to describe
    a daemonset called vault-csi-provider in a particular context and namespace.


    A daemonset in Kubernetes ensures that all (or some) nodes run a copy of a pod.
    It does this by creating a set of identical pods, one on each node in the cluster.
    The pods are then updated whenever a node is added or removed from the cluster.


    The `--context` flag is used to specify which Kubernetes cluster context we want
    to use. A context in Kubernetes is a group of access parameters. This could include
    information about the cluster, user, and namespace.


    The `-n` flag is used to specify the namespace where the daemonset is located.
    Namespaces are a way to divide cluster resources between multiple users.


    So, putting it all together, the command is asking for a description of the daemonset
    called vault-csi-provider in the specified context and namespace. This description
    will provide detailed information about the daemonset, including its current status,
    any events related to it, and the specific configuration options that were used
    to create it.'
  multi_line_details: "# Set the context to be used in the command\nCONTEXT=my-context\n\
    \n# Set the namespace to be used in the command\nNAMESPACE=my-namespace\n\n# Create\
    \ a multi-line command for describing a daemonset using kubectl\nkubectl describe\
    \ \\\n  # Specify the resource type and name (daemonset.apps/vault-csi-provider)\n\
    \  daemonset.apps/vault-csi-provider \\\n  # Use the previously set context\n\
    \  --context $CONTEXT \\\n  # Specify the namespace to look in\n  -n $NAMESPACE"
  name: check_vault_csi_driver_replicas
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [kubectl logs command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [StatefulSet in Kubernetes documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Using contexts in Kubernetes](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: 'Sure! Let me break down this command for you.


    - kubectl: This is the command-line tool used to communicate with the Kubernetes
    cluster.

    - logs: This is the subcommand we are using. It''s used to fetch the logs of a
    particular resource in the cluster.

    - --tail=100: This flag limits the number of lines of logs to display. In this
    case, it sets the limit to 100 lines.

    - statefulset.apps/vault: This is the specific resource whose logs we want to
    retrieve. In this case, it''s a StatefulSet named "vault".

    - --context ${CONTEXT}: This is an optional flag that specifies which context
    (or cluster) within your kubeconfig file you want to use. This is useful if you
    have multiple clusters configured.

    - -n ${NAMESPACE}: This flag specifies the namespace in which the StatefulSet
    is located. Namspace is used to organize and isolate objects within a cluster.


    So, when you run this command, it will fetch the last 100 lines of logs from the
    "vault" StatefulSet in the specified namespace and context. This can be helpful
    for troubleshooting or monitoring the behavior of the application running in the
    StatefulSet.'
  multi_line_details: '# set the context for the kubectl command to a specific Kubernetes
    environment

    export CONTEXT=my-context


    # set the namespace where the statefulset is located

    export NAMESPACE=my-namespace


    # use kubectl command to retrieve the logs of the statefulset named ''vault''

    kubectl logs --tail=100 statefulset.apps/vault --context $CONTEXT -n $NAMESPACE'
  name: fetch_vault_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubectl Official Documentation](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubectl Field Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/){:target="_blank"}

    - [Kubectl Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}

    - [Kubectl Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: 'Sure! Let me break down this command for you.


    kubectl: This is the command-line tool for interacting with Kubernetes clusters.
    It allows you to run commands against Kubernetes clusters, such as creating and
    managing resources.


    get events: This part of the command tells kubectl to fetch all the events from
    the cluster. Events are records of operations that have taken place on resources
    in the cluster.


    --field-selector type=Warning: This flag filters the events to only show those
    of type Warning. This helps to narrow down the list of events that are returned,
    so you can focus on potentially problematic issues.


    --context ${CONTEXT}: This flag specifies which Kubernetes context to use for
    the command. A context is a group of access parameters for a Kubernetes cluster,
    including the cluster''s location, authentication information, and namespace.


    -n ${NAMESPACE}: This flag specifies the namespace in which to look for events.
    Namespaces are like virtual clusters within a physical cluster, and they help
    with organizing and isolating resources.


    | grep -i "vault" || true: This part of the command uses the pipe (|) to send
    the output of kubectl get events to the grep command, which filters for lines
    containing the word "vault." The -i option makes the search case-insensitive.
    If grep doesn''t find any matching lines, it will return a non-zero exit code,
    but we use "|| true" to ensure that the overall command still exits successfully.


    In summary, this command fetches warning events from a specific context and namespace,
    then filters them to only show those related to "vault," if any. It''s a useful
    way to quickly check for warnings related to a particular resource in a Kubernetes
    cluster.'
  multi_line_details: '# Set the context to the specified Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Get events from the specified namespace and filter the events based on type=Warning
    using field-selector

    kubectl get events --field-selector type=Warning -n ${NAMESPACE}


    # Use grep command to search for "vault" keyword case-insensitively in the output
    of the previous command

    # If no matches are found, return a successful exit status to prevent the overall
    command from failing

    grep -i "vault" || true'
  name: get_related_vault_events
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [StatefulSets - Kubernetes Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubectl Command Reference](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get){:target="_blank"}'
  explanation: 'This command is used to retrieve the configuration of a specific stateful
    set in your Kubernetes cluster. A stateful set is a type of workload in Kubernetes
    that is used for applications that require stable, unique network identifiers
    and persistent storage.


    Here''s what each part of the command does:


    - `kubectl`: This is the command-line tool used to interact with Kubernetes clusters.

    - `get`: This subcommand is used to retrieve information about resources in the
    cluster.

    - `statefulset.apps/vault`: This specifies the resource type and name of the stateful
    set we want to retrieve. In this case, we are looking for a stateful set named
    "vault" in the "apps" group.

    - `--context=${CONTEXT}`: This option allows you to specify the context, or the
    cluster and user, to use for the operation. The value of `${CONTEXT}` would be
    the name of the context you want to use.

    - `-n ${NAMESPACE}`: This option specifies the namespace in which the stateful
    set is located. The value of `${NAMESPACE}` would be the name of the namespace
    you want to use.

    - `-o yaml`: This option tells `kubectl` to output the details of the stateful
    set in YAML format, which is a human-readable data serialization format.


    So when you run this command, it will retrieve the YAML configuration of the "vault"
    stateful set in the specified namespace and context, allowing you to see the details
    of how it''s configured in the cluster.'
  multi_line_details: '```

    # Change the current context to the specified context

    kubectl config use-context ${CONTEXT}


    # Use kubectl to get the StatefulSet resource named "vault" in the specified namespace,
    and output the result in YAML format

    kubectl get statefulset.apps/vault -n ${NAMESPACE} -o yaml

    ```'
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [Kubectl Overview](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [Vault CSI Provider](https://www.vaultproject.io/docs/platform/k8s/csi){:target="_blank"}

    - [Kubectl Output Formats](https://kubernetes.io/docs/reference/kubectl/jsonpath/){:target="_blank"}

    - [Kubectl Contexts](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/){:target="_blank"}'
  explanation: 'So, this command is used to get information about a specific daemonset
    called "vault-csi-provider" in a Kubernetes cluster. A daemonset is a type of
    controller that ensures that a specific pod is running on all or some nodes in
    the cluster.


    Here''s what each part of the command means:

    - kubectl: This is the command-line tool used to interact with Kubernetes clusters.

    - get: This subcommand is used to retrieve information about Kubernetes resources.

    - daemonset.apps/vault-csi-provider: This is the name of the resource we want
    to retrieve. In this case, it''s a daemonset named "vault-csi-provider" in the
    "apps" API group.

    - --context=${CONTEXT}: This flag specifies which context (i.e., cluster) you
    want to interact with. The value of ${CONTEXT} will be replaced with the actual
    name of the context you want to use.

    - -n ${NAMESPACE}: This flag specifies the namespace in which the daemonset is
    located. The value of ${NAMESPACE} will be replaced with the actual name of the
    namespace.

    - -o yaml: This flag specifies the output format for the information we are retrieving.
    In this case, it''s YAML format, which is a human-readable data serialization
    format.


    So, when you run this command, it will fetch the YAML representation of the "vault-csi-provider"
    daemonset in the specified namespace and context, allowing you to see detailed
    information about its configuration and status. This can be useful for troubleshooting
    or for gaining a better understanding of how the daemonset is configured.'
  multi_line_details: '# Set the context to specify which Kubernetes cluster to use

    kubectl config use-context ${CONTEXT}


    # Get the daemonset resource named ''vault-csi-provider'' in the specified namespace

    kubectl get daemonset.apps/vault-csi-provider -n ${NAMESPACE}


    # Output the information about the daemonset in YAML format

    kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml'
  name: fetch_vault_daemonset_manifest_details
- command: curl ${VAULT_URL}
  doc_links: '

    - [Curl man page](https://linux.die.net/man/1/curl){:target="_blank"}

    - [Introduction to HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview){:target="_blank"}'
  explanation: This command is using the "curl" tool to make a request to a URL that
    is defined by the environment variable ${VAULT_URL}. In Kubernetes, environment
    variables are often used to store configuration information that can be accessed
    by different parts of your application. When you run this command, it will send
    a request to the URL stored in the VAULT_URL variable and return the response.
    This could be used, for example, to access a Vault service in your Kubernetes
    cluster to retrieve secrets or other sensitive information needed by your application.
    Learning to use curl with environment variables is important for interacting with
    external services from within a Kubernetes environment.
  multi_line_details: '# Retrieve the Vault URL from environment variable ${VAULT_URL}

    # Use the curl command to make an HTTP request to the Vault URL

    # This command will retrieve data from the specified Vault URL and display it
    in the terminal'
  name: verify_vault_availability
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [Kubectl get command](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Kubernetes StatefulSet resource](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubectl json output format](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#output-formatting){:target="_blank"}

    - [Kubernetes namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: 'Sure! This command is used to get information about a specific StatefulSet
    resource in a Kubernetes cluster. A StatefulSet is a workload API object that
    maintains a set of pods with a stable identity, so each pod in the StatefulSet
    has a unique ordinal index and is persistent.


    Let me break down the command for you:


    - `kubectl`: This is the command-line tool for interacting with the Kubernetes
    cluster.

    - `get`: This subcommand is used to retrieve information about resources in the
    cluster.

    - `statefulset.apps/vault`: This specifies the type and name of the resource we
    want to retrieve information about. In this case, "vault" is the name of the StatefulSet
    we want to query.

    - `--context=${CONTEXT}`: This flag allows you to specify which Kubernetes cluster
    to target if you are working with multiple clusters. The `${CONTEXT}` variable
    would be replaced with the actual name of the context you want to use.

    - `-n ${NAMESPACE}`: This flag specifies the namespace in which the StatefulSet
    is located. The `${NAMESPACE}` variable would be replaced with the actual name
    of the namespace.

    - `-o json`: This flag specifies the output format for the information retrieved.
    In this case, the output will be formatted as JSON, which is a common data interchange
    format.


    So, when you run this command, it will retrieve detailed information about the
    "vault" StatefulSet in the specified namespace and output it in JSON format. This
    information can include details about the StatefulSet''s configuration, the number
    of replicas, and the status of its pods.'
  multi_line_details: '# Set the context to specify which Kubernetes cluster to use

    kubectl config use-context ${CONTEXT}


    # Use the get command to retrieve information about a specific StatefulSet object

    # The --namespace flag specifies the namespace in which to look for the StatefulSet

    # The -o flag with the json option outputs the result in JSON format

    kubectl get statefulset.apps/vault -n ${NAMESPACE} -o json'
  name: check_vault_statefulset_replicas
