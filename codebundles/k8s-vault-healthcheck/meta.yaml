commands:
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Vault CSI Provider](https://www.vaultproject.io/docs/platform/k8s/csi){:target="_blank"}

    - [Retrieving Logs in Kubernetes](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#interacting-with-running-pods){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs for the Vault CSI
    Provider daemon set in a specific Kubernetes context and namespace.
  multi_line_details: '```sh

    # Set the number of lines to be shown from the end of the logs to 100

    logs_tail=100


    # Specify the daemonset to retrieve logs from

    daemonset_name=vault-csi-provider


    # Set the context for the Kubernetes cluster

    context=${CONTEXT}


    # Set the namespace in which the daemonset is running

    namespace=${NAMESPACE}


    # Use kubectl to retrieve the logs from the specified daemonset, using the specified
    context and namespace

    kubectl logs --tail=$logs_tail daemonset.apps/$daemonset_name --context $context
    -n $namespace

    ```'
  name: fetch_vault_csi_driver_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    - [Kubernetes Event API documentation](https://kubernetes.io/docs/reference/using-api/api-concepts/#event-api){:target="_blank"}

    - [Kubectl command line reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}'
  explanation: This command is used to get event logs from a Kubernetes cluster, specifically
    filtering for warnings related to the "vault-csi-provider" component in the specified
    context and namespace. If no matching events are found, it will still return a
    successful exit code.
  multi_line_details: '```bash

    # Set the context to be used for the kubectl command

    CONTEXT="your_context_name"

    # Set the namespace in which to search for events

    NAMESPACE="your_namespace"


    # Use kubectl to get events with field selector set to Warning, in the specified
    context and namespace

    kubectl get events --field-selector type=Warning --context ${CONTEXT} -n ${NAMESPACE}
    |

    # Filter the output to only show lines containing "vault-csi-provider", case-insensitive

    grep -i "vault-csi-provider" ||

    # Continue execution even if grep returns a non-zero status

    true

    ```'
  name: get_vault_csi_driver_warning_events
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}'
  explanation: This command uses "kubectl" to provide detailed information about a
    specific daemonset called "vault-csi-provider" in a particular Kubernetes context
    and namespace. It is helpful for troubleshooting and getting an overview of the
    configuration and status of the daemonset.
  multi_line_details: '```bash

    # Set the context for the Kubernetes cluster

    CONTEXT="example-context"


    # Set the namespace for the Kubernetes resources

    NAMESPACE="example-namespace"


    # Describe the daemonset with the specified context and namespace

    kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT} -n ${NAMESPACE}

    ```'
  name: check_vault_csi_driver_replicas
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes StatefulSets overview](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [kubectl logs command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs from a specific statefulset
    called 'vault' in a Kubernetes cluster, using the specified context and namespace.
  multi_line_details: '```bash

    #!/bin/bash


    # Set the context for the Kubernetes cluster

    CONTEXT="your_context_here"


    # Set the namespace where the statefulset is located

    NAMESPACE="your_namespace_here"


    # Specify the number of lines from the end of the logs to show

    TAIL_LINES=100


    # Use kubectl command to retrieve the logs of the vault statefulset

    kubectl logs --tail=${TAIL_LINES} statefulset.apps/vault --context ${CONTEXT}
    -n ${NAMESPACE}

    ```'
  name: fetch_vault_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Concepts - Pods](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to retrieve events related to the "Warning" type
    from a specific Kubernetes context and namespace, and then filters the output
    for the term "vault". If there are no matching events, it returns a successful
    status.
  multi_line_details: "```shell\n# Set the context and namespace for the kubectl command\n\
    CONTEXT=my-context\nNAMESPACE=my-namespace\n# Retrieve events in the specified\
    \ namespace with type Warning using kubectl\nkubectl get events --field-selector\
    \ type=Warning --context ${CONTEXT} -n ${NAMESPACE} | \n# Filter the events containing\
    \ \"vault\" in a case-insensitive manner using grep\ngrep -i \"vault\" || true\n\
    # If no results are returned from the command, force it to return a successful\
    \ exit code\n```"
  name: get_related_vault_events
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command retrieves the configuration of the stateful set named
    "vault" within a specific Kubernetes context and namespace, and outputs it in
    YAML format.
  multi_line_details: '```bash

    # Get the statefulset named ''vault''

    kubectl get statefulset.apps/vault \

    # Use the context specified in the environment variable ${CONTEXT}

    --context=${CONTEXT} \

    # In the namespace specified in the environment variable ${NAMESPACE}

    -n ${NAMESPACE} \

    # Output the results in YAML format

    -o yaml

    ```'
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [YAML format documentation](https://yaml.org/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about the DaemonSet
    called "vault-csi-provider" in the specified namespace and context, and outputs
    the details in YAML format.
  multi_line_details: '```shell

    # Set the context for the Kubernetes cluster

    CONTEXT=my-context


    # Set the namespace where the daemonset is located

    NAMESPACE=my-namespace


    # Use kubectl to retrieve the configuration of the specified DaemonSet and output
    it in YAML format

    kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml

    ```'
  name: fetch_vault_daemonset_manifest_details
- command: curl ${VAULT_URL}
  doc_links: '

    - [curl Documentation](https://curl.se/docs/){:target="_blank"}

    - [HTTP Request Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods){:target="_blank"}'
  explanation: This command is using the 'curl' program to make a request to a specific
    URL, represented by the variable ${VAULT_URL}. It's commonly used for interacting
    with web services and APIs.
  multi_line_details: '```bash

    # Set the variable VAULT_URL to specify the URL for the data retrieval

    VAULT_URL="https://example.com/data"

    # Use the curl command to retrieve data from the specified URL

    curl ${VAULT_URL}

    ```'
  name: verify_vault_availability
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Reference Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-kubectl-get){:target="_blank"}'
  explanation: This command retrieves the statefulset named "vault" from a specific
    Kubernetes context and namespace, displaying the results in json format.
  multi_line_details: "```bash\n# Set the kubectl command to get the statefulset for\
    \ the Vault application \n# Using the specified context and namespace, then output\
    \ the result in JSON format\nkubectl get statefulset.apps/vault --context=${CONTEXT}\
    \ -n ${NAMESPACE} -o json\n```"
  name: check_vault_statefulset_replicas
