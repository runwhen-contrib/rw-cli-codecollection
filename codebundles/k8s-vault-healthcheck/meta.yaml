commands:
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Vault CSI Provider](https://www.vaultproject.io/docs/platform/k8s/csi){:target="_blank"}

    - [Retrieving Logs in Kubernetes](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#interacting-with-running-pods){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs for the Vault CSI
    Provider daemon set in a specific Kubernetes context and namespace.
  multi_line_details: "```bash\n# This command retrieves the last 100 lines of logs\
    \ from the vault-csi-provider DaemonSet application in a specified context and\
    \ namespace.\n\nkubectl logs \\\n  --tail=100 \\\n  daemonset.apps/vault-csi-provider\
    \ \\\n  --context ${CONTEXT} \\\n  -n ${NAMESPACE}\n```"
  name: fetch_vault_csi_driver_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    - [Kubernetes Event API documentation](https://kubernetes.io/docs/reference/using-api/api-concepts/#event-api){:target="_blank"}

    - [Kubectl command line reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}'
  explanation: This command is used to get event logs from a Kubernetes cluster, specifically
    filtering for warnings related to the "vault-csi-provider" component in the specified
    context and namespace. If no matching events are found, it will still return a
    successful exit code.
  multi_line_details: "```\n# The following command retrieves events related to warnings\
    \ and searches for any events containing \"vault-csi-provider\".\n# If no matching\
    \ events are found, it will return a successful exit code.\nkubectl get events\
    \ \\ \n  --field-selector type=Warning \\\n  --context ${CONTEXT} \\\n  -n ${NAMESPACE}\
    \ \\\n  | grep -i \"vault-csi-provider\" || true\n```"
  name: get_vault_csi_driver_warning_events
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}'
  explanation: This command uses "kubectl" to provide detailed information about a
    specific daemonset called "vault-csi-provider" in a particular Kubernetes context
    and namespace. It is helpful for troubleshooting and getting an overview of the
    configuration and status of the daemonset.
  multi_line_details: '```

    # This command describes the daemonset named ''vault-csi-provider'' in a specific
    context and namespace


    # Set the context and namespace to use for the kubectl command

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Describe the daemonset using the specified context and namespace

    kubectl describe daemonset.apps/vault-csi-provider --context $CONTEXT -n $NAMESPACE

    ```'
  name: check_vault_csi_driver_replicas
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes StatefulSets overview](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [kubectl logs command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs from a specific statefulset
    called 'vault' in a Kubernetes cluster, using the specified context and namespace.
  multi_line_details: '```bash

    # Set the number of lines to display in the logs

    tail=100


    # Set the resource and context for the logs

    resource="statefulset.apps/vault"

    context="${CONTEXT}"

    namespace="${NAMESPACE}"


    # Display the last 100 lines of logs for the specified resource, context, and
    namespace

    kubectl logs --tail=${tail} ${resource} --context ${context} -n ${namespace}

    ```'
  name: fetch_vault_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Concepts - Pods](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to retrieve events related to the "Warning" type
    from a specific Kubernetes context and namespace, and then filters the output
    for the term "vault". If there are no matching events, it returns a successful
    status.
  multi_line_details: '```bash

    # This command gets events from a specific context and namespace, filters them
    for warnings, and then searches for "vault" using case-insensitive grep. It uses
    the || true to ensure the entire command returns success even if grep does not
    find anything.


    kubectl get events \

    --field-selector type=Warning \

    --context ${CONTEXT} \

    -n ${NAMESPACE} | grep -i "vault" || true

    ```'
  name: get_related_vault_events
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command retrieves the configuration of the stateful set named
    "vault" within a specific Kubernetes context and namespace, and outputs it in
    YAML format.
  multi_line_details: "```bash\n# Using kubectl to get the yaml configuration of a\
    \ statefulset in a specific context and namespace\nkubectl get statefulset.apps/vault\
    \ \\\n  --context=${CONTEXT} \\\n  -n ${NAMESPACE} \\\n  -o yaml\n```\n\nIn this\
    \ multi-line command, the `kubectl` is used to get the YAML configuration of a\
    \ statefulset named \"vault\" in a specific context and namespace. The `${CONTEXT}`\
    \ and `${NAMESPACE}` are variables that need to be defined before executing the\
    \ command."
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [YAML format documentation](https://yaml.org/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about the DaemonSet
    called "vault-csi-provider" in the specified namespace and context, and outputs
    the details in YAML format.
  multi_line_details: "```bash\n# Command to get the YAML representation of a specific\
    \ DaemonSet in a namespace\n\nkubectl get daemonset.apps/vault-csi-provider \\\
    \n  --context=${CONTEXT} \\\n  -n ${NAMESPACE} \\\n  -o yaml\n```\n\nThis multi-line\
    \ command uses `kubectl` to retrieve the YAML representation of the DaemonSet\
    \ named \"vault-csi-provider\" in the specified namespace. The `--context` flag\
    \ is used to specify the Kubernetes context, and the `-n` flag is used to specify\
    \ the namespace. The output format is set to YAML using the `-o` flag."
  name: fetch_vault_daemonset_manifest_details
- command: curl ${VAULT_URL}
  doc_links: '

    - [curl Documentation](https://curl.se/docs/){:target="_blank"}

    - [HTTP Request Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods){:target="_blank"}'
  explanation: This command is using the 'curl' program to make a request to a specific
    URL, represented by the variable ${VAULT_URL}. It's commonly used for interacting
    with web services and APIs.
  multi_line_details: '```bash

    # This command is used to make an HTTP request to the specified VAULT_URL using
    the curl command.


    # Setting environment variable for VAULT_URL and then using it in the curl command

    VAULT_URL="https://example.com/vault"

    curl ${VAULT_URL}

    ```'
  name: verify_vault_availability
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Reference Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-kubectl-get){:target="_blank"}'
  explanation: This command retrieves the statefulset named "vault" from a specific
    Kubernetes context and namespace, displaying the results in json format.
  multi_line_details: "```bash\n# Get the statefulset 'vault' in the specified context\
    \ and namespace in JSON format\nkubectl get statefulset.apps/vault \\\n  --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  -o json\n```\n\nIn this multi-line command, we use\
    \ `kubectl` to fetch the statefulset named 'vault' in a specific context and namespace.\
    \ We output the information in JSON format. The `${CONTEXT}` and `${NAMESPACE}`\
    \ are environment variables that contain the desired context and namespace values."
  name: check_vault_statefulset_replicas
