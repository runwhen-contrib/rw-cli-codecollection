commands:
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Vault CSI Provider](https://www.vaultproject.io/docs/platform/k8s/csi){:target="_blank"}

    - [Retrieving Logs in Kubernetes](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#interacting-with-running-pods){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs for the Vault CSI
    Provider daemon set in a specific Kubernetes context and namespace.
  multi_line_details: '#!/bin/bash


    # This script retrieves the last 100 logs from the vault-csi-provider in a specified
    namespace.


    # Set the context and namespace

    CONTEXT=your_context_here

    NAMESPACE=your_namespace_here


    # Use kubectl to retrieve the last 100 logs

    kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}'
  name: fetch_vault_csi_driver_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    - [Kubernetes Event API documentation](https://kubernetes.io/docs/reference/using-api/api-concepts/#event-api){:target="_blank"}

    - [Kubectl command line reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}'
  explanation: This command is used to get event logs from a Kubernetes cluster, specifically
    filtering for warnings related to the "vault-csi-provider" component in the specified
    context and namespace. If no matching events are found, it will still return a
    successful exit code.
  multi_line_details: "```bash\n# Description:  Retrieve events with type Warning\
    \ in a specific namespace and context, then filter for \"vault-csi-provider\"\
    \ and ignore any errors.\n# Command to retrieve events with type Warning in specific\
    \ namespace and context\nkubectl get events --field-selector type=Warning \\\n\
    \  --context ${CONTEXT} -n ${NAMESPACE} | grep -i \"vault-csi-provider\" || true\n\
    ```"
  name: get_vault_csi_driver_warning_events
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}'
  explanation: This command uses "kubectl" to provide detailed information about a
    specific daemonset called "vault-csi-provider" in a particular Kubernetes context
    and namespace. It is helpful for troubleshooting and getting an overview of the
    configuration and status of the daemonset.
  multi_line_details: "```bash\n# This command is used to describe a specific DaemonSet\
    \ in the Kubernetes cluster\n# It uses the kubectl tool with the describe option\
    \ to provide detailed information about the DaemonSet\n# The --context flag specifies\
    \ the context to use for the operation, and the -n flag specifies the namespace\n\
    # Both the context and namespace are provided as variables for flexibility\n\n\
    kubectl describe daemonset.apps/vault-csi-provider \\\n  --context ${CONTEXT}\
    \ \\\n  -n ${NAMESPACE}\n```"
  name: check_vault_csi_driver_replicas
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes StatefulSets overview](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [kubectl logs command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs from a specific statefulset
    called 'vault' in a Kubernetes cluster, using the specified context and namespace.
  multi_line_details: '#!/bin/bash

    # This script retrieves the last 100 logs from the vault statefulset using kubectl

    # Set the context to the value of the CONTEXT variable and namespace to the value
    of the NAMESPACE variable


    kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n ${NAMESPACE}'
  name: fetch_vault_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Concepts - Pods](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to retrieve events related to the "Warning" type
    from a specific Kubernetes context and namespace, and then filters the output
    for the term "vault". If there are no matching events, it returns a successful
    status.
  multi_line_details: '```bash

    # Set the Kubernetes context and namespace

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Get events from the Kubernetes cluster that are of type Warning

    # and filter for only those related to "vault"

    # If no results are found, return true

    kubectl get events --field-selector type=Warning --context $CONTEXT -n $NAMESPACE
    | grep -i "vault" || true

    ```'
  name: get_related_vault_events
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command retrieves the configuration of the stateful set named
    "vault" within a specific Kubernetes context and namespace, and outputs it in
    YAML format.
  multi_line_details: "```bash\n#!/bin/bash\n\n# This is a multi-line bash command\
    \ to get the statefulset \"vault\" in yaml format\n# It includes context and namespace\
    \ variables for kubectl\n\nkubectl get statefulset.apps/vault \\\n  --context=${CONTEXT}\
    \ \\\n  -n ${NAMESPACE} \\\n  -o yaml\n```"
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [YAML format documentation](https://yaml.org/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about the DaemonSet
    called "vault-csi-provider" in the specified namespace and context, and outputs
    the details in YAML format.
  multi_line_details: "```\n# The following command is used to retrieve a daemonset\
    \ resource in YAML format using kubectl.\n# It specifies the context and namespace\
    \ from which to retrieve the information.\n\nkubectl get daemonset.apps/vault-csi-provider\
    \ \\\n  --context=${CONTEXT} \\\n  -n ${NAMESPACE} \\\n  -o yaml\n```"
  name: fetch_vault_daemonset_manifest_details
- command: curl ${VAULT_URL}
  doc_links: '

    - [curl Documentation](https://curl.se/docs/){:target="_blank"}

    - [HTTP Request Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods){:target="_blank"}'
  explanation: This command is using the 'curl' program to make a request to a specific
    URL, represented by the variable ${VAULT_URL}. It's commonly used for interacting
    with web services and APIs.
  multi_line_details: '#!/bin/bash


    : ''

    This script is used to perform a GET request using curl to the specified VAULT_URL.

    It requires the VAULT_URL environment variable to be set.

    ''


    curl ${VAULT_URL}'
  name: verify_vault_availability
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Reference Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-kubectl-get){:target="_blank"}'
  explanation: This command retrieves the statefulset named "vault" from a specific
    Kubernetes context and namespace, displaying the results in json format.
  multi_line_details: "#!/bin/bash\n\n# This command is used to get details of the\
    \ statefulset named 'vault'\n# The --context flag specifies the context to use\
    \ for the operation\n# The -n flag specifies the namespace in which to operate\n\
    # The -o json flag specifies that the output should be in JSON format\n\nkubectl\
    \ get statefulset.apps/vault \\\n  --context=${CONTEXT} \\\n  -n ${NAMESPACE}\
    \ \\\n  -o json"
  name: check_vault_statefulset_replicas
