commands:
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Vault CSI Provider](https://www.vaultproject.io/docs/platform/k8s/csi){:target="_blank"}

    - [Retrieving Logs in Kubernetes](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#interacting-with-running-pods){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs for the Vault CSI
    Provider daemon set in a specific Kubernetes context and namespace.
  multi_line_details: '# Set the context to a specific Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Specify the namespace where the daemonset is running

    NAMESPACE=${NAMESPACE}


    # Set the daemonset name and get logs with last 100 lines from the specified namespace

    kubectl logs --tail=100 daemonset.apps/vault-csi-provider -n ${NAMESPACE}'
  name: fetch_vault_csi_driver_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    - [Kubernetes Event API documentation](https://kubernetes.io/docs/reference/using-api/api-concepts/#event-api){:target="_blank"}

    - [Kubectl command line reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}'
  explanation: This command is used to get event logs from a Kubernetes cluster, specifically
    filtering for warnings related to the "vault-csi-provider" component in the specified
    context and namespace. If no matching events are found, it will still return a
    successful exit code.
  multi_line_details: '```bash

    # Set the Kubernetes context to the specified ${CONTEXT}

    kubectl config use-context ${CONTEXT}


    # Retrieve events from the current context and filter for events of type Warning
    in the specified namespace ${NAMESPACE}

    kubectl get events --field-selector type=Warning -n ${NAMESPACE}


    # Pipe the output to grep and perform a case-insensitive search for "vault-csi-provider"

    grep -i "vault-csi-provider"


    # Using the || true syntax ensures that the command will return a successful exit
    code even if grep does not find a match

    || true

    ```'
  name: get_vault_csi_driver_warning_events
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}'
  explanation: This command uses "kubectl" to provide detailed information about a
    specific daemonset called "vault-csi-provider" in a particular Kubernetes context
    and namespace. It is helpful for troubleshooting and getting an overview of the
    configuration and status of the daemonset.
  multi_line_details: "# Set the context to be used in the command\nCONTEXT=my-context\n\
    \n# Set the namespace to be used in the command\nNAMESPACE=my-namespace\n\n# Create\
    \ a multi-line command for describing a daemonset using kubectl\nkubectl describe\
    \ \\\n  # Specify the resource type and name (daemonset.apps/vault-csi-provider)\n\
    \  daemonset.apps/vault-csi-provider \\\n  # Use the previously set context\n\
    \  --context $CONTEXT \\\n  # Specify the namespace to look in\n  -n $NAMESPACE"
  name: check_vault_csi_driver_replicas
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes StatefulSets overview](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [kubectl logs command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs from a specific statefulset
    called 'vault' in a Kubernetes cluster, using the specified context and namespace.
  multi_line_details: '# set the context for the kubectl command to a specific Kubernetes
    environment

    export CONTEXT=my-context


    # set the namespace where the statefulset is located

    export NAMESPACE=my-namespace


    # use kubectl command to retrieve the logs of the statefulset named ''vault''

    kubectl logs --tail=100 statefulset.apps/vault --context $CONTEXT -n $NAMESPACE'
  name: fetch_vault_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Concepts - Pods](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to retrieve events related to the "Warning" type
    from a specific Kubernetes context and namespace, and then filters the output
    for the term "vault". If there are no matching events, it returns a successful
    status.
  multi_line_details: '# Set the context to the specified Kubernetes cluster

    kubectl config use-context ${CONTEXT}


    # Get events from the specified namespace and filter the events based on type=Warning
    using field-selector

    kubectl get events --field-selector type=Warning -n ${NAMESPACE}


    # Use grep command to search for "vault" keyword case-insensitively in the output
    of the previous command

    # If no matches are found, return a successful exit status to prevent the overall
    command from failing

    grep -i "vault" || true'
  name: get_related_vault_events
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command retrieves the configuration of the stateful set named
    "vault" within a specific Kubernetes context and namespace, and outputs it in
    YAML format.
  multi_line_details: '```

    # Change the current context to the specified context

    kubectl config use-context ${CONTEXT}


    # Use kubectl to get the StatefulSet resource named "vault" in the specified namespace,
    and output the result in YAML format

    kubectl get statefulset.apps/vault -n ${NAMESPACE} -o yaml

    ```'
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [YAML format documentation](https://yaml.org/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about the DaemonSet
    called "vault-csi-provider" in the specified namespace and context, and outputs
    the details in YAML format.
  multi_line_details: '# Set the context to specify which Kubernetes cluster to use

    kubectl config use-context ${CONTEXT}


    # Get the daemonset resource named ''vault-csi-provider'' in the specified namespace

    kubectl get daemonset.apps/vault-csi-provider -n ${NAMESPACE}


    # Output the information about the daemonset in YAML format

    kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml'
  name: fetch_vault_daemonset_manifest_details
- command: curl ${VAULT_URL}
  doc_links: '

    - [curl Documentation](https://curl.se/docs/){:target="_blank"}

    - [HTTP Request Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods){:target="_blank"}'
  explanation: This command is using the 'curl' program to make a request to a specific
    URL, represented by the variable ${VAULT_URL}. It's commonly used for interacting
    with web services and APIs.
  multi_line_details: '# Retrieve the Vault URL from environment variable ${VAULT_URL}

    # Use the curl command to make an HTTP request to the Vault URL

    # This command will retrieve data from the specified Vault URL and display it
    in the terminal'
  name: verify_vault_availability
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Reference Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-kubectl-get){:target="_blank"}'
  explanation: This command retrieves the statefulset named "vault" from a specific
    Kubernetes context and namespace, displaying the results in json format.
  multi_line_details: '# Set the context to specify which Kubernetes cluster to use

    kubectl config use-context ${CONTEXT}


    # Use the get command to retrieve information about a specific StatefulSet object

    # The --namespace flag specifies the namespace in which to look for the StatefulSet

    # The -o flag with the json option outputs the result in JSON format

    kubectl get statefulset.apps/vault -n ${NAMESPACE} -o json'
  name: check_vault_statefulset_replicas
