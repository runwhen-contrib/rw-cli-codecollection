commands:
- command: kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}

    - [Vault CSI Provider](https://www.vaultproject.io/docs/platform/k8s/csi){:target="_blank"}

    - [Retrieving Logs in Kubernetes](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#interacting-with-running-pods){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs for the Vault CSI
    Provider daemon set in a specific Kubernetes context and namespace.
  multi_line_details: '# Set the context and namespace variables for the kubectl command

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Use kubectl logs to retrieve the last 100 lines of logs from the vault-csi-provider
    daemonset

    # --tail=100 specifies the number of lines to retrieve

    # daemonset.apps/vault-csi-provider is the name of the daemonset

    # --context ${CONTEXT} specifies the Kubernetes cluster context to use

    # -n ${NAMESPACE} specifies the Kubernetes namespace to use

    kubectl logs --tail=100 daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}'
  name: fetch_vault_csi_driver_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault-csi-provider" || true
  doc_links: '

    - [Kubernetes Event API documentation](https://kubernetes.io/docs/reference/using-api/api-concepts/#event-api){:target="_blank"}

    - [Kubectl command line reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [Understanding Kubernetes contexts and namespaces](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}'
  explanation: This command is used to get event logs from a Kubernetes cluster, specifically
    filtering for warnings related to the "vault-csi-provider" component in the specified
    context and namespace. If no matching events are found, it will still return a
    successful exit code.
  multi_line_details: "# Set the context and namespace for kubectl\nCONTEXT=my-context\n\
    NAMESPACE=my-namespace\n\n# Use kubectl to get events with type Warning filtered\
    \ by context and namespace,\n# then use grep to filter for \"vault-csi-provider\"\
    \n# If no results are found, return true\nkubectl get events --field-selector\
    \ type=Warning --context $CONTEXT -n $NAMESPACE |\n    grep -i \"vault-csi-provider\"\
    \ || true"
  name: get_vault_csi_driver_warning_events
- command: kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT}
    -n ${NAMESPACE}
  doc_links: '

    - [kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}'
  explanation: This command uses "kubectl" to provide detailed information about a
    specific daemonset called "vault-csi-provider" in a particular Kubernetes context
    and namespace. It is helpful for troubleshooting and getting an overview of the
    configuration and status of the daemonset.
  multi_line_details: "# Set the context and namespace for the kubectl command\nCONTEXT=\"\
    your_context_here\"\nNAMESPACE=\"your_namespace_here\"\n\n# Use kubectl to describe\
    \ the daemonset named 'vault-csi-provider' \n# in the specified context and namespace\n\
    kubectl describe daemonset.apps/vault-csi-provider --context ${CONTEXT} -n ${NAMESPACE}"
  name: check_vault_csi_driver_replicas
- command: kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n
    ${NAMESPACE}
  doc_links: '

    - [Kubernetes StatefulSets overview](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [kubectl logs command documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs){:target="_blank"}

    - [Kubernetes contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context){:target="_blank"}'
  explanation: This command retrieves the last 100 lines of logs from a specific statefulset
    called 'vault' in a Kubernetes cluster, using the specified context and namespace.
  multi_line_details: '# Set the context and namespace variables for kubectl command

    CONTEXT="my-context"

    NAMESPACE="my-namespace"


    # Use kubectl to retrieve the last 100 logs from the statefulset "vault" in the
    specified context and namespace

    kubectl logs --tail=100 statefulset.apps/vault --context ${CONTEXT} -n ${NAMESPACE}'
  name: fetch_vault_logs
- command: kubectl get events --field-selector type=Warning --context ${CONTEXT} -n
    ${NAMESPACE} | grep -i "vault" || true
  doc_links: '

    - [Kubernetes kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubernetes Concepts - Pods](https://kubernetes.io/docs/concepts/workloads/pods/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command is used to retrieve events related to the "Warning" type
    from a specific Kubernetes context and namespace, and then filters the output
    for the term "vault". If there are no matching events, it returns a successful
    status.
  multi_line_details: '```bash

    # Set the kubectl context to the specified ${CONTEXT} and namespace to ${NAMESPACE}

    # Get all events with type Warning from the specified namespace

    # Pipe the output to grep to search for "vault" case insensitively

    # Use the || true operator to ensure that the command returns a successful exit
    status even if grep doesn''t find a matching line

    kubectl get events --field-selector type=Warning --context ${CONTEXT} -n ${NAMESPACE}
    | grep -i "vault" || true

    ```'
  name: get_related_vault_events
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/){:target="_blank"}

    - [Kubernetes Contexts](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/){:target="_blank"}

    - [Kubernetes Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/){:target="_blank"}'
  explanation: This command retrieves the configuration of the stateful set named
    "vault" within a specific Kubernetes context and namespace, and outputs it in
    YAML format.
  multi_line_details: '# This multi-line command retrieves the statefulset configuration
    for the Vault application in a specific Kubernetes context and namespace.


    # Set the context and namespace variables to make the command reusable and more
    readable

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Use the kubectl command to get the statefulset configuration for the Vault application

    kubectl get statefulset.apps/vault \

    --context=${CONTEXT} \

    -n ${NAMESPACE} \

    -o yaml'
  name: fetch_vault_statefulset_manifest_details
- command: kubectl get daemonset.apps/vault-csi-provider --context=${CONTEXT} -n ${NAMESPACE}
    -o yaml
  doc_links: '

    - [kubectl command reference](https://kubernetes.io/docs/reference/kubectl/overview/){:target="_blank"}

    - [DaemonSet in Kubernetes](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/){:target="_blank"}

    - [YAML format documentation](https://yaml.org/){:target="_blank"}'
  explanation: This command uses kubectl to retrieve information about the DaemonSet
    called "vault-csi-provider" in the specified namespace and context, and outputs
    the details in YAML format.
  multi_line_details: '# Set the context and namespace variables for kubectl command

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Use kubectl to get the DaemonSet resource in YAML format

    kubectl get daemonset.vault-csi-provider \

    --context=${CONTEXT} \

    -n ${NAMESPACE} \

    -o yaml'
  name: fetch_vault_daemonset_manifest_details
- command: curl ${VAULT_URL}
  doc_links: '

    - [curl Documentation](https://curl.se/docs/){:target="_blank"}

    - [HTTP Request Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods){:target="_blank"}'
  explanation: This command is using the 'curl' program to make a request to a specific
    URL, represented by the variable ${VAULT_URL}. It's commonly used for interacting
    with web services and APIs.
  multi_line_details: '# Here we are using the curl command to make an HTTP request
    to the VAULT_URL variable

    # The VAULT_URL environment variable should be set with the URL of the Vault server
    we want to interact with

    # The curl command will issue a GET request by default, and will print the output
    to the console

    # It''s important to handle any authentication or authorization needed for accessing
    the Vault server


    curl ${VAULT_URL}'
  name: verify_vault_availability
- command: kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE}
    -o json
  doc_links: '

    - [Kubectl Cheat Sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/){:target="_blank"}

    - [Kubectl Reference Documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-kubectl-get){:target="_blank"}'
  explanation: This command retrieves the statefulset named "vault" from a specific
    Kubernetes context and namespace, displaying the results in json format.
  multi_line_details: '# Set the variables for context and namespace

    CONTEXT=my-context

    NAMESPACE=my-namespace


    # Use kubectl to get the statefulset with the name "vault" in the specified context
    and namespace, and output the result in JSON format

    kubectl get statefulset.apps/vault --context=${CONTEXT} -n ${NAMESPACE} -o json'
  name: check_vault_statefulset_replicas
